
entrega3.elf:     file format elf32-littlenios2
entrega3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010230

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x000059a4 memsz 0x000059a4 flags r-x
    LOAD off    0x00007000 vaddr 0x00020000 paddr 0x000159c4 align 2**12
         filesz 0x00001ab8 memsz 0x00001c0c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005794  00010230  00010230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00020000  000159c4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  0002004c  00015a10  0000704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00021ab8  0001747c  00008ab8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0001747c  0001747c  00008ab8  2**0
                  CONTENTS
  7 .onchip_memory2_1 00000000  00021c0c  00021c0c  00008ab8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008ab8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a50  00000000  00000000  00008ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000164e8  00000000  00000000  00009530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006031  00000000  00000000  0001fa18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a5c  00000000  00000000  00025a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001614  00000000  00000000  0002c4a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000280a  00000000  00000000  0002dabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  000302c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00034da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00034de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000379fe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037a01  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00037a0d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00037a0e  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00037a0f  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00037a1a  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00037a25  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00037a30  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000004e  00000000  00000000  00037a38  2**0
                  CONTENTS, READONLY
 27 .jdi          00004e8b  00000000  00000000  00037a86  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0003dab8  00000000  00000000  0003c911  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .exceptions	00000000 .exceptions
00010230 l    d  .text	00000000 .text
00020000 l    d  .rodata	00000000 .rodata
0002004c l    d  .rwdata	00000000 .rwdata
00021ab8 l    d  .bss	00000000 .bss
0001747c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00021c0c l    d  .onchip_memory2_1	00000000 .onchip_memory2_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../entrega3_bsp//obj/HAL/src/crt0.o
00010268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00010508 l     F .text	00000008 __fp_unlock
0001051c l     F .text	0000019c __sinit.part.1
000106b8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0002004c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
000131a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
000132bc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000132e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000133dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000134c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000135b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0001378c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00021aa8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00013a30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00013b6c l     F .text	00000034 alt_dev_reg
00020a20 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00013e44 l     F .text	0000020c altera_avalon_jtag_uart_irq
00014050 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0001492c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00014d8c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00014eec l     F .text	0000003c alt_get_errno
00014f28 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00021ae0 g     O .bss	00000004 alt_instruction_exception_handler
000102ac g     F .text	00000024 motor_en
00012f78 g     F .text	00000054 _isatty_r
000136c8 g     F .text	0000007c alt_main
0001039c g     F .text	000000c0 _puts_r
00021b0c g     O .bss	00000100 alt_irq
00012ca0 g     F .text	00000060 _lseek_r
00015a10 g       *ABS*	00000000 __flash_rwdata_start
00021c0c g       *ABS*	00000000 __alt_heap_start
00012254 g     F .text	0000005c __sseek
00010868 g     F .text	00000010 __sinit
000106c0 g     F .text	00000078 __sfmoreglue
00013768 g     F .text	00000024 __malloc_unlock
00011940 g     F .text	0000015c memmove
00010850 g     F .text	00000018 _cleanup
0001026c g     F .text	00000020 motor_init
00015314 g     F .text	00000024 altera_nios2_gen2_irq_init
00010000 g     F .entry	0000000c __reset
00010020 g       *ABS*	00000000 __flash_exceptions_start
00012f1c g     F .text	0000005c _fstat_r
00021ac4 g     O .bss	00000004 errno
000121d0 g     F .text	00000008 __seofread
00021acc g     O .bss	00000004 alt_argv
00029a80 g       *ABS*	00000000 _gp
00013a00 g     F .text	00000030 usleep
000208a0 g     O .rwdata	00000180 alt_fd_list
00015338 g     F .text	00000090 alt_find_dev
000117f8 g     F .text	00000148 memcpy
00010510 g     F .text	0000000c _cleanup_r
00014e70 g     F .text	0000007c alt_io_redirect
000159c4 g       *ABS*	00000000 __DTOR_END__
0001045c g     F .text	00000014 puts
00015594 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00014248 g     F .text	0000021c altera_avalon_jtag_uart_read
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000130c4 g     F .text	00000064 .hidden __udivsi3
00013418 g     F .text	000000ac isatty
00021ac0 g     O .bss	00000004 __malloc_top_pad
000108b8 g     F .text	000004c8 __sfvwrite_r
00012128 g     F .text	00000054 _sbrk_r
00012ebc g     F .text	00000060 _read_r
00021aa0 g     O .rwdata	00000004 alt_max_fd
000124c0 g     F .text	000000f0 _fclose_r
0001283c g     F .text	00000030 fflush
00021abc g     O .bss	00000004 __malloc_max_sbrked_mem
000135ec g     F .text	000000dc lseek
00021a80 g     O .rwdata	00000004 _global_impure_ptr
00011bc4 g     F .text	00000564 _realloc_r
00021c0c g       *ABS*	00000000 __bss_end
00014c9c g     F .text	000000f0 alt_iic_isr_register
0001520c g     F .text	00000108 alt_tick
00010888 g     F .text	00000018 __fp_lock_all
00014c50 g     F .text	0000004c alt_ic_irq_enabled
00015170 g     F .text	0000009c alt_alarm_stop
00021ad4 g     O .bss	00000004 alt_irq_active
000100fc g     F .exceptions	000000d4 alt_irq_handler
00020878 g     O .rwdata	00000028 alt_dev_null
0001490c g     F .text	00000020 alt_dcache_flush_all
00021ab8 g       *ABS*	00000000 __ram_rwdata_end
00021a98 g     O .rwdata	00000008 alt_dev_list
00013a6c g     F .text	00000100 write
0001028c g     F .text	00000020 motor_halt
0002004c g       *ABS*	00000000 __ram_rodata_end
00013324 g     F .text	000000b8 fstat
00013128 g     F .text	00000058 .hidden __umodsi3
00021c0c g       *ABS*	00000000 end
00013d84 g     F .text	000000c0 altera_avalon_jtag_uart_init
000101d0 g     F .exceptions	00000060 alt_instruction_exception_entry
000159c4 g       *ABS*	00000000 __CTOR_LIST__
00030000 g       *ABS*	00000000 __alt_stack_pointer
00014464 g     F .text	00000224 altera_avalon_jtag_uart_write
00010878 g     F .text	00000004 __sfp_lock_acquire
00011714 g     F .text	000000e4 memchr
00012990 g     F .text	00000310 _free_r
00015810 g     F .text	00000180 __call_exitprocs
00021a88 g     O .rwdata	00000004 __malloc_sbrk_base
00010230 g     F .text	0000003c _start
00021ad8 g     O .bss	00000004 _alt_tick_rate
00021adc g     O .bss	00000004 _alt_nticks
000137c8 g     F .text	00000104 read
00013bd8 g     F .text	00000048 alt_sys_init
000156f8 g     F .text	00000118 __register_exitproc
000140f0 g     F .text	00000068 altera_avalon_jtag_uart_close
00013180 g     F .text	00000028 .hidden __mulsi3
0002004c g       *ABS*	00000000 __ram_rwdata_start
00020000 g       *ABS*	00000000 __ram_rodata_start
00021ae4 g     O .bss	00000028 __malloc_current_mallinfo
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_1
00013c20 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000154d0 g     F .text	000000c4 alt_get_fd
000147b4 g     F .text	00000158 alt_busy_sleep
0001246c g     F .text	00000054 _close_r
0001567c g     F .text	0000007c memcmp
00013ce0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00021c0c g       *ABS*	00000000 __alt_stack_base
00013d30 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00012318 g     F .text	00000154 __swsetup_r
00010738 g     F .text	00000118 __sfp
00020470 g     O .rwdata	00000408 __malloc_av_
00010884 g     F .text	00000004 __sinit_lock_release
0001217c g     F .text	00000054 __sread
000153c8 g     F .text	00000108 alt_find_file
00014968 g     F .text	000000a4 alt_dev_llist_insert
00013744 g     F .text	00000024 __malloc_lock
00013950 g     F .text	000000b0 sbrk
000127e0 g     F .text	0000005c _fflush_r
00021ab8 g       *ABS*	00000000 __bss_start
00011a9c g     F .text	00000128 memset
000102d0 g     F .text	000000cc main
00021ad0 g     O .bss	00000004 alt_envp
00021ab8 g     O .bss	00000004 __malloc_max_total_mem
00013c80 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000122b0 g     F .text	00000008 __sclose
00030000 g       *ABS*	00000000 __alt_heap_limit
000125b0 g     F .text	00000014 fclose
00010f08 g     F .text	0000080c _malloc_r
00021aa4 g     O .rwdata	00000004 alt_errno
00010d80 g     F .text	000000c4 _fwalk
00012fcc g     F .text	00000084 .hidden __divsi3
0001286c g     F .text	00000124 _malloc_trim_r
000159c4 g       *ABS*	00000000 __CTOR_END__
000159c4 g       *ABS*	00000000 __flash_rodata_start
000159c4 g       *ABS*	00000000 __DTOR_LIST__
00013ba0 g     F .text	00000038 alt_irq_init
000138cc g     F .text	00000084 alt_release_fd
00015630 g     F .text	00000014 atexit
000122b8 g     F .text	00000060 _write_r
00021a84 g     O .rwdata	00000004 _impure_ptr
00021ac8 g     O .bss	00000004 alt_argc
000125c4 g     F .text	0000021c __sflush_r
00014a6c g     F .text	00000060 _do_dtors
00010020 g       .exceptions	00000000 alt_irq_entry
000108a0 g     F .text	00000018 __fp_unlock_all
00021a90 g     O .rwdata	00000008 alt_fs_list
00010020 g       *ABS*	00000000 __ram_exceptions_start
00014aec g     F .text	00000050 alt_ic_isr_register
00021ab8 g       *ABS*	00000000 _edata
00021c0c g       *ABS*	00000000 _end
00010230 g       *ABS*	00000000 __ram_exceptions_end
00014158 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00014bc4 g     F .text	0000008c alt_ic_irq_disable
000121d8 g     F .text	0000007c __swrite
00021a8c g     O .rwdata	00000004 __malloc_trim_threshold
00015644 g     F .text	00000038 exit
00010e44 g     F .text	000000c4 _fwalk_reent
00013050 g     F .text	00000074 .hidden __modsi3
00030000 g       *ABS*	00000000 __alt_data_end
00010020 g     F .exceptions	00000000 alt_exception
0001087c g     F .text	00000004 __sfp_lock_release
00015990 g     F .text	00000034 _exit
00014688 g     F .text	0000012c alt_alarm_start
00012d00 g     F .text	000001bc __smakebuf_r
00010470 g     F .text	00000098 strlen
00015014 g     F .text	0000015c open
00014acc g     F .text	00000020 alt_icache_flush_all
00021aac g     O .rwdata	00000004 alt_priority_mask
00014b3c g     F .text	00000088 alt_ic_irq_enable
00021ab0 g     O .rwdata	00000008 alt_alarm_list
00014a0c g     F .text	00000060 _do_ctors
000131e4 g     F .text	000000d8 close
0001352c g     F .text	00000084 alt_load
00010880 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08408c14 	ori	at,at,560
    jmp r1
   10008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00010020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   10020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   10024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   10028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   1002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   10030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   10034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   10038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   1003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   10040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   10044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   10048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   1004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   10050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   10054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   10058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   1005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   10060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   10064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   10068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   1006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   10070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   10074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   10078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   1007c:	10000326 	beq	r2,zero,1008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   10080:	20000226 	beq	r4,zero,1008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   10084:	00100fc0 	call	100fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   10088:	00000706 	br	100a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   1008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   10090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   10094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   10098:	00101d00 	call	101d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   1009c:	1000021e 	bne	r2,zero,100a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   100a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   100a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   100a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   100ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   100b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   100b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   100b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   100bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   100c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   100c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   100c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   100cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   100d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   100d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   100d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   100dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   100e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   100e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   100e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   100ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   100f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   100f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   100f8:	ef80083a 	eret

000100fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   100fc:	defff904 	addi	sp,sp,-28
   10100:	dfc00615 	stw	ra,24(sp)
   10104:	df000515 	stw	fp,20(sp)
   10108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   1010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   10110:	0005313a 	rdctl	r2,ipending
   10114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   10118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   1011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   10120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   10124:	00800044 	movi	r2,1
   10128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   1012c:	e0fffb17 	ldw	r3,-20(fp)
   10130:	e0bffc17 	ldw	r2,-16(fp)
   10134:	1884703a 	and	r2,r3,r2
   10138:	10001426 	beq	r2,zero,1018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   1013c:	008000b4 	movhi	r2,2
   10140:	1086c304 	addi	r2,r2,6924
   10144:	e0fffd17 	ldw	r3,-12(fp)
   10148:	180690fa 	slli	r3,r3,3
   1014c:	10c5883a 	add	r2,r2,r3
   10150:	10c00017 	ldw	r3,0(r2)
   10154:	008000b4 	movhi	r2,2
   10158:	1086c304 	addi	r2,r2,6924
   1015c:	e13ffd17 	ldw	r4,-12(fp)
   10160:	200890fa 	slli	r4,r4,3
   10164:	1105883a 	add	r2,r2,r4
   10168:	10800104 	addi	r2,r2,4
   1016c:	10800017 	ldw	r2,0(r2)
   10170:	1009883a 	mov	r4,r2
   10174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   10178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   1017c:	0005313a 	rdctl	r2,ipending
   10180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   10184:	e0bfff17 	ldw	r2,-4(fp)
   10188:	00000706 	br	101a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   1018c:	e0bffc17 	ldw	r2,-16(fp)
   10190:	1085883a 	add	r2,r2,r2
   10194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   10198:	e0bffd17 	ldw	r2,-12(fp)
   1019c:	10800044 	addi	r2,r2,1
   101a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   101a4:	003fe106 	br	1012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   101a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   101ac:	e0bffb17 	ldw	r2,-20(fp)
   101b0:	103fdb1e 	bne	r2,zero,10120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   101b4:	0001883a 	nop
}
   101b8:	0001883a 	nop
   101bc:	e037883a 	mov	sp,fp
   101c0:	dfc00117 	ldw	ra,4(sp)
   101c4:	df000017 	ldw	fp,0(sp)
   101c8:	dec00204 	addi	sp,sp,8
   101cc:	f800283a 	ret

000101d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   101d0:	defffb04 	addi	sp,sp,-20
   101d4:	dfc00415 	stw	ra,16(sp)
   101d8:	df000315 	stw	fp,12(sp)
   101dc:	df000304 	addi	fp,sp,12
   101e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   101e4:	00bfffc4 	movi	r2,-1
   101e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
   101ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   101f0:	d0a01817 	ldw	r2,-32672(gp)
   101f4:	10000726 	beq	r2,zero,10214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   101f8:	d0a01817 	ldw	r2,-32672(gp)
   101fc:	e0fffd17 	ldw	r3,-12(fp)
   10200:	e1bffe17 	ldw	r6,-8(fp)
   10204:	e17fff17 	ldw	r5,-4(fp)
   10208:	1809883a 	mov	r4,r3
   1020c:	103ee83a 	callr	r2
   10210:	00000206 	br	1021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   10214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   10218:	0005883a 	mov	r2,zero
}
   1021c:	e037883a 	mov	sp,fp
   10220:	dfc00117 	ldw	ra,4(sp)
   10224:	df000017 	ldw	fp,0(sp)
   10228:	dec00204 	addi	sp,sp,8
   1022c:	f800283a 	ret

Disassembly of section .text:

00010230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10230:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   10234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   10238:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   1023c:	d6a6a014 	ori	gp,gp,39552
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10240:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   10244:	1086ae14 	ori	r2,r2,6840

    movhi r3, %hi(__bss_end)
   10248:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   1024c:	18c70314 	ori	r3,r3,7180

    beq r2, r3, 1f
   10250:	10c00326 	beq	r2,r3,10260 <_start+0x30>

0:
    stw zero, (r2)
   10254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1025c:	10fffd36 	bltu	r2,r3,10254 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10260:	001352c0 	call	1352c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10264:	00136c80 	call	136c8 <alt_main>

00010268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10268:	003fff06 	br	10268 <alt_after_alt_main>

0001026c <motor_init>:
//#define SIM

// LED Peripheral
#define REG_DATA_OFFSET 1

int motor_init(){
   1026c:	deffff04 	addi	sp,sp,-4
   10270:	df000015 	stw	fp,0(sp)
   10274:	d839883a 	mov	fp,sp
	return 0b0001;
   10278:	00800044 	movi	r2,1
}
   1027c:	e037883a 	mov	sp,fp
   10280:	df000017 	ldw	fp,0(sp)
   10284:	dec00104 	addi	sp,sp,4
   10288:	f800283a 	ret

0001028c <motor_halt>:
int motor_halt(){
   1028c:	deffff04 	addi	sp,sp,-4
   10290:	df000015 	stw	fp,0(sp)
   10294:	d839883a 	mov	fp,sp
	return 0b0000;
   10298:	0005883a 	mov	r2,zero
}
   1029c:	e037883a 	mov	sp,fp
   102a0:	df000017 	ldw	fp,0(sp)
   102a4:	dec00104 	addi	sp,sp,4
   102a8:	f800283a 	ret

000102ac <motor_en>:
int motor_en(unsigned int *p_motor){
   102ac:	defffe04 	addi	sp,sp,-8
   102b0:	df000115 	stw	fp,4(sp)
   102b4:	df000104 	addi	fp,sp,4
   102b8:	e13fff15 	stw	r4,-4(fp)
	return 0;
   102bc:	0005883a 	mov	r2,zero
}
   102c0:	e037883a 	mov	sp,fp
   102c4:	df000017 	ldw	fp,0(sp)
   102c8:	dec00104 	addi	sp,sp,4
   102cc:	f800283a 	ret

000102d0 <main>:

int main(void){
   102d0:	defffa04 	addi	sp,sp,-24
   102d4:	dfc00515 	stw	ra,20(sp)
   102d8:	df000415 	stw	fp,16(sp)
   102dc:	dc000315 	stw	r16,12(sp)
   102e0:	df000404 	addi	fp,sp,16
  unsigned int led = 0;
   102e4:	e03ffc15 	stw	zero,-16(fp)
  unsigned int *p_led = (unsigned int *) PERIPHERAL_LED_0_BASE;
   102e8:	008000f4 	movhi	r2,3
   102ec:	10840004 	addi	r2,r2,4096
   102f0:	e0bffd15 	stw	r2,-12(fp)
  unsigned int *p_motor = (unsigned int *) STEPMOTORMM_0_BASE;
   102f4:	e03ffe15 	stw	zero,-8(fp)


  printf("Embarcados++ \n");
   102f8:	010000b4 	movhi	r4,2
   102fc:	21000004 	addi	r4,r4,0
   10300:	001045c0 	call	1045c <puts>

  *(p_motor + REG_DATA_OFFSET) = motor_halt();
   10304:	e0bffe17 	ldw	r2,-8(fp)
   10308:	14000104 	addi	r16,r2,4
   1030c:	001028c0 	call	1028c <motor_halt>
   10310:	80800015 	stw	r2,0(r16)
  usleep(500000);
   10314:	01000234 	movhi	r4,8
   10318:	21284804 	addi	r4,r4,-24288
   1031c:	0013a000 	call	13a00 <usleep>
  *(p_motor + REG_DATA_OFFSET) = motor_init();
   10320:	e0bffe17 	ldw	r2,-8(fp)
   10324:	14000104 	addi	r16,r2,4
   10328:	001026c0 	call	1026c <motor_init>
   1032c:	80800015 	stw	r2,0(r16)
  usleep(500000);
   10330:	01000234 	movhi	r4,8
   10334:	21284804 	addi	r4,r4,-24288
   10338:	0013a000 	call	13a00 <usleep>
  *(p_motor + REG_DATA_OFFSET) = 0b0010 | *(p_motor + REG_DATA_OFFSET);
   1033c:	e0bffe17 	ldw	r2,-8(fp)
   10340:	10800104 	addi	r2,r2,4
   10344:	e0fffe17 	ldw	r3,-8(fp)
   10348:	18c00104 	addi	r3,r3,4
   1034c:	18c00017 	ldw	r3,0(r3)
   10350:	18c00094 	ori	r3,r3,2
   10354:	10c00015 	stw	r3,0(r2)


  //*(p_motor + REG_DATA_OFFSET) = 1 << 0;

  while(1){
       if (led < 4){
   10358:	e0bffc17 	ldw	r2,-16(fp)
   1035c:	10800128 	cmpgeui	r2,r2,4
   10360:	10000c1e 	bne	r2,zero,10394 <main+0xc4>
           *(p_led+REG_DATA_OFFSET) = (0x1 << led++);
   10364:	e0bffd17 	ldw	r2,-12(fp)
   10368:	10c00104 	addi	r3,r2,4
   1036c:	e0bffc17 	ldw	r2,-16(fp)
   10370:	11000044 	addi	r4,r2,1
   10374:	e13ffc15 	stw	r4,-16(fp)
   10378:	01000044 	movi	r4,1
   1037c:	2084983a 	sll	r2,r4,r2
   10380:	18800015 	stw	r2,0(r3)
           usleep(500000); // remover durante a simulacao
   10384:	01000234 	movhi	r4,8
   10388:	21284804 	addi	r4,r4,-24288
   1038c:	0013a000 	call	13a00 <usleep>
   10390:	003ff106 	br	10358 <main+0x88>
       }
       else{
           led = 0;
   10394:	e03ffc15 	stw	zero,-16(fp)
       }
   };
   10398:	003fef06 	br	10358 <main+0x88>

0001039c <_puts_r>:
   1039c:	defff604 	addi	sp,sp,-40
   103a0:	dc000715 	stw	r16,28(sp)
   103a4:	2021883a 	mov	r16,r4
   103a8:	2809883a 	mov	r4,r5
   103ac:	dc400815 	stw	r17,32(sp)
   103b0:	dfc00915 	stw	ra,36(sp)
   103b4:	2823883a 	mov	r17,r5
   103b8:	00104700 	call	10470 <strlen>
   103bc:	10c00044 	addi	r3,r2,1
   103c0:	d8800115 	stw	r2,4(sp)
   103c4:	008000b4 	movhi	r2,2
   103c8:	10800404 	addi	r2,r2,16
   103cc:	d8800215 	stw	r2,8(sp)
   103d0:	00800044 	movi	r2,1
   103d4:	d8800315 	stw	r2,12(sp)
   103d8:	00800084 	movi	r2,2
   103dc:	dc400015 	stw	r17,0(sp)
   103e0:	d8c00615 	stw	r3,24(sp)
   103e4:	dec00415 	stw	sp,16(sp)
   103e8:	d8800515 	stw	r2,20(sp)
   103ec:	80000226 	beq	r16,zero,103f8 <_puts_r+0x5c>
   103f0:	80800e17 	ldw	r2,56(r16)
   103f4:	10001426 	beq	r2,zero,10448 <_puts_r+0xac>
   103f8:	81400217 	ldw	r5,8(r16)
   103fc:	2880030b 	ldhu	r2,12(r5)
   10400:	10c8000c 	andi	r3,r2,8192
   10404:	1800061e 	bne	r3,zero,10420 <_puts_r+0x84>
   10408:	29001917 	ldw	r4,100(r5)
   1040c:	00f7ffc4 	movi	r3,-8193
   10410:	10880014 	ori	r2,r2,8192
   10414:	20c6703a 	and	r3,r4,r3
   10418:	2880030d 	sth	r2,12(r5)
   1041c:	28c01915 	stw	r3,100(r5)
   10420:	d9800404 	addi	r6,sp,16
   10424:	8009883a 	mov	r4,r16
   10428:	00108b80 	call	108b8 <__sfvwrite_r>
   1042c:	1000091e 	bne	r2,zero,10454 <_puts_r+0xb8>
   10430:	00800284 	movi	r2,10
   10434:	dfc00917 	ldw	ra,36(sp)
   10438:	dc400817 	ldw	r17,32(sp)
   1043c:	dc000717 	ldw	r16,28(sp)
   10440:	dec00a04 	addi	sp,sp,40
   10444:	f800283a 	ret
   10448:	8009883a 	mov	r4,r16
   1044c:	00108680 	call	10868 <__sinit>
   10450:	003fe906 	br	103f8 <_puts_r+0x5c>
   10454:	00bfffc4 	movi	r2,-1
   10458:	003ff606 	br	10434 <_puts_r+0x98>

0001045c <puts>:
   1045c:	008000b4 	movhi	r2,2
   10460:	1086a104 	addi	r2,r2,6788
   10464:	200b883a 	mov	r5,r4
   10468:	11000017 	ldw	r4,0(r2)
   1046c:	001039c1 	jmpi	1039c <_puts_r>

00010470 <strlen>:
   10470:	208000cc 	andi	r2,r4,3
   10474:	10002026 	beq	r2,zero,104f8 <strlen+0x88>
   10478:	20800007 	ldb	r2,0(r4)
   1047c:	10002026 	beq	r2,zero,10500 <strlen+0x90>
   10480:	2005883a 	mov	r2,r4
   10484:	00000206 	br	10490 <strlen+0x20>
   10488:	10c00007 	ldb	r3,0(r2)
   1048c:	18001826 	beq	r3,zero,104f0 <strlen+0x80>
   10490:	10800044 	addi	r2,r2,1
   10494:	10c000cc 	andi	r3,r2,3
   10498:	183ffb1e 	bne	r3,zero,10488 <strlen+0x18>
   1049c:	10c00017 	ldw	r3,0(r2)
   104a0:	01ffbff4 	movhi	r7,65279
   104a4:	39ffbfc4 	addi	r7,r7,-257
   104a8:	00ca303a 	nor	r5,zero,r3
   104ac:	01a02074 	movhi	r6,32897
   104b0:	19c7883a 	add	r3,r3,r7
   104b4:	31a02004 	addi	r6,r6,-32640
   104b8:	1946703a 	and	r3,r3,r5
   104bc:	1986703a 	and	r3,r3,r6
   104c0:	1800091e 	bne	r3,zero,104e8 <strlen+0x78>
   104c4:	10800104 	addi	r2,r2,4
   104c8:	10c00017 	ldw	r3,0(r2)
   104cc:	19cb883a 	add	r5,r3,r7
   104d0:	00c6303a 	nor	r3,zero,r3
   104d4:	28c6703a 	and	r3,r5,r3
   104d8:	1986703a 	and	r3,r3,r6
   104dc:	183ff926 	beq	r3,zero,104c4 <strlen+0x54>
   104e0:	00000106 	br	104e8 <strlen+0x78>
   104e4:	10800044 	addi	r2,r2,1
   104e8:	10c00007 	ldb	r3,0(r2)
   104ec:	183ffd1e 	bne	r3,zero,104e4 <strlen+0x74>
   104f0:	1105c83a 	sub	r2,r2,r4
   104f4:	f800283a 	ret
   104f8:	2005883a 	mov	r2,r4
   104fc:	003fe706 	br	1049c <strlen+0x2c>
   10500:	0005883a 	mov	r2,zero
   10504:	f800283a 	ret

00010508 <__fp_unlock>:
   10508:	0005883a 	mov	r2,zero
   1050c:	f800283a 	ret

00010510 <_cleanup_r>:
   10510:	01400074 	movhi	r5,1
   10514:	29493004 	addi	r5,r5,9408
   10518:	0010e441 	jmpi	10e44 <_fwalk_reent>

0001051c <__sinit.part.1>:
   1051c:	defff704 	addi	sp,sp,-36
   10520:	00c00074 	movhi	r3,1
   10524:	dfc00815 	stw	ra,32(sp)
   10528:	ddc00715 	stw	r23,28(sp)
   1052c:	dd800615 	stw	r22,24(sp)
   10530:	dd400515 	stw	r21,20(sp)
   10534:	dd000415 	stw	r20,16(sp)
   10538:	dcc00315 	stw	r19,12(sp)
   1053c:	dc800215 	stw	r18,8(sp)
   10540:	dc400115 	stw	r17,4(sp)
   10544:	dc000015 	stw	r16,0(sp)
   10548:	18c14404 	addi	r3,r3,1296
   1054c:	24000117 	ldw	r16,4(r4)
   10550:	20c00f15 	stw	r3,60(r4)
   10554:	2080bb04 	addi	r2,r4,748
   10558:	00c000c4 	movi	r3,3
   1055c:	20c0b915 	stw	r3,740(r4)
   10560:	2080ba15 	stw	r2,744(r4)
   10564:	2000b815 	stw	zero,736(r4)
   10568:	05c00204 	movi	r23,8
   1056c:	00800104 	movi	r2,4
   10570:	2025883a 	mov	r18,r4
   10574:	b80d883a 	mov	r6,r23
   10578:	81001704 	addi	r4,r16,92
   1057c:	000b883a 	mov	r5,zero
   10580:	80000015 	stw	zero,0(r16)
   10584:	80000115 	stw	zero,4(r16)
   10588:	80000215 	stw	zero,8(r16)
   1058c:	8080030d 	sth	r2,12(r16)
   10590:	80001915 	stw	zero,100(r16)
   10594:	8000038d 	sth	zero,14(r16)
   10598:	80000415 	stw	zero,16(r16)
   1059c:	80000515 	stw	zero,20(r16)
   105a0:	80000615 	stw	zero,24(r16)
   105a4:	0011a9c0 	call	11a9c <memset>
   105a8:	05800074 	movhi	r22,1
   105ac:	94400217 	ldw	r17,8(r18)
   105b0:	05400074 	movhi	r21,1
   105b4:	05000074 	movhi	r20,1
   105b8:	04c00074 	movhi	r19,1
   105bc:	b5885f04 	addi	r22,r22,8572
   105c0:	ad487604 	addi	r21,r21,8664
   105c4:	a5089504 	addi	r20,r20,8788
   105c8:	9cc8ac04 	addi	r19,r19,8880
   105cc:	85800815 	stw	r22,32(r16)
   105d0:	85400915 	stw	r21,36(r16)
   105d4:	85000a15 	stw	r20,40(r16)
   105d8:	84c00b15 	stw	r19,44(r16)
   105dc:	84000715 	stw	r16,28(r16)
   105e0:	00800284 	movi	r2,10
   105e4:	8880030d 	sth	r2,12(r17)
   105e8:	00800044 	movi	r2,1
   105ec:	b80d883a 	mov	r6,r23
   105f0:	89001704 	addi	r4,r17,92
   105f4:	000b883a 	mov	r5,zero
   105f8:	88000015 	stw	zero,0(r17)
   105fc:	88000115 	stw	zero,4(r17)
   10600:	88000215 	stw	zero,8(r17)
   10604:	88001915 	stw	zero,100(r17)
   10608:	8880038d 	sth	r2,14(r17)
   1060c:	88000415 	stw	zero,16(r17)
   10610:	88000515 	stw	zero,20(r17)
   10614:	88000615 	stw	zero,24(r17)
   10618:	0011a9c0 	call	11a9c <memset>
   1061c:	94000317 	ldw	r16,12(r18)
   10620:	00800484 	movi	r2,18
   10624:	8c400715 	stw	r17,28(r17)
   10628:	8d800815 	stw	r22,32(r17)
   1062c:	8d400915 	stw	r21,36(r17)
   10630:	8d000a15 	stw	r20,40(r17)
   10634:	8cc00b15 	stw	r19,44(r17)
   10638:	8080030d 	sth	r2,12(r16)
   1063c:	00800084 	movi	r2,2
   10640:	80000015 	stw	zero,0(r16)
   10644:	80000115 	stw	zero,4(r16)
   10648:	80000215 	stw	zero,8(r16)
   1064c:	80001915 	stw	zero,100(r16)
   10650:	8080038d 	sth	r2,14(r16)
   10654:	80000415 	stw	zero,16(r16)
   10658:	80000515 	stw	zero,20(r16)
   1065c:	80000615 	stw	zero,24(r16)
   10660:	b80d883a 	mov	r6,r23
   10664:	000b883a 	mov	r5,zero
   10668:	81001704 	addi	r4,r16,92
   1066c:	0011a9c0 	call	11a9c <memset>
   10670:	00800044 	movi	r2,1
   10674:	84000715 	stw	r16,28(r16)
   10678:	85800815 	stw	r22,32(r16)
   1067c:	85400915 	stw	r21,36(r16)
   10680:	85000a15 	stw	r20,40(r16)
   10684:	84c00b15 	stw	r19,44(r16)
   10688:	90800e15 	stw	r2,56(r18)
   1068c:	dfc00817 	ldw	ra,32(sp)
   10690:	ddc00717 	ldw	r23,28(sp)
   10694:	dd800617 	ldw	r22,24(sp)
   10698:	dd400517 	ldw	r21,20(sp)
   1069c:	dd000417 	ldw	r20,16(sp)
   106a0:	dcc00317 	ldw	r19,12(sp)
   106a4:	dc800217 	ldw	r18,8(sp)
   106a8:	dc400117 	ldw	r17,4(sp)
   106ac:	dc000017 	ldw	r16,0(sp)
   106b0:	dec00904 	addi	sp,sp,36
   106b4:	f800283a 	ret

000106b8 <__fp_lock>:
   106b8:	0005883a 	mov	r2,zero
   106bc:	f800283a 	ret

000106c0 <__sfmoreglue>:
   106c0:	defffc04 	addi	sp,sp,-16
   106c4:	dc800215 	stw	r18,8(sp)
   106c8:	2825883a 	mov	r18,r5
   106cc:	dc000015 	stw	r16,0(sp)
   106d0:	01401a04 	movi	r5,104
   106d4:	2021883a 	mov	r16,r4
   106d8:	913fffc4 	addi	r4,r18,-1
   106dc:	dfc00315 	stw	ra,12(sp)
   106e0:	dc400115 	stw	r17,4(sp)
   106e4:	00131800 	call	13180 <__mulsi3>
   106e8:	8009883a 	mov	r4,r16
   106ec:	11401d04 	addi	r5,r2,116
   106f0:	1023883a 	mov	r17,r2
   106f4:	0010f080 	call	10f08 <_malloc_r>
   106f8:	1021883a 	mov	r16,r2
   106fc:	10000726 	beq	r2,zero,1071c <__sfmoreglue+0x5c>
   10700:	11000304 	addi	r4,r2,12
   10704:	10000015 	stw	zero,0(r2)
   10708:	14800115 	stw	r18,4(r2)
   1070c:	11000215 	stw	r4,8(r2)
   10710:	89801a04 	addi	r6,r17,104
   10714:	000b883a 	mov	r5,zero
   10718:	0011a9c0 	call	11a9c <memset>
   1071c:	8005883a 	mov	r2,r16
   10720:	dfc00317 	ldw	ra,12(sp)
   10724:	dc800217 	ldw	r18,8(sp)
   10728:	dc400117 	ldw	r17,4(sp)
   1072c:	dc000017 	ldw	r16,0(sp)
   10730:	dec00404 	addi	sp,sp,16
   10734:	f800283a 	ret

00010738 <__sfp>:
   10738:	defffb04 	addi	sp,sp,-20
   1073c:	dc000015 	stw	r16,0(sp)
   10740:	040000b4 	movhi	r16,2
   10744:	8406a004 	addi	r16,r16,6784
   10748:	dcc00315 	stw	r19,12(sp)
   1074c:	2027883a 	mov	r19,r4
   10750:	81000017 	ldw	r4,0(r16)
   10754:	dfc00415 	stw	ra,16(sp)
   10758:	dc800215 	stw	r18,8(sp)
   1075c:	20800e17 	ldw	r2,56(r4)
   10760:	dc400115 	stw	r17,4(sp)
   10764:	1000021e 	bne	r2,zero,10770 <__sfp+0x38>
   10768:	001051c0 	call	1051c <__sinit.part.1>
   1076c:	81000017 	ldw	r4,0(r16)
   10770:	2480b804 	addi	r18,r4,736
   10774:	047fffc4 	movi	r17,-1
   10778:	91000117 	ldw	r4,4(r18)
   1077c:	94000217 	ldw	r16,8(r18)
   10780:	213fffc4 	addi	r4,r4,-1
   10784:	20000a16 	blt	r4,zero,107b0 <__sfp+0x78>
   10788:	8080030f 	ldh	r2,12(r16)
   1078c:	10000c26 	beq	r2,zero,107c0 <__sfp+0x88>
   10790:	80c01d04 	addi	r3,r16,116
   10794:	00000206 	br	107a0 <__sfp+0x68>
   10798:	18bfe60f 	ldh	r2,-104(r3)
   1079c:	10000826 	beq	r2,zero,107c0 <__sfp+0x88>
   107a0:	213fffc4 	addi	r4,r4,-1
   107a4:	1c3ffd04 	addi	r16,r3,-12
   107a8:	18c01a04 	addi	r3,r3,104
   107ac:	247ffa1e 	bne	r4,r17,10798 <__sfp+0x60>
   107b0:	90800017 	ldw	r2,0(r18)
   107b4:	10001d26 	beq	r2,zero,1082c <__sfp+0xf4>
   107b8:	1025883a 	mov	r18,r2
   107bc:	003fee06 	br	10778 <__sfp+0x40>
   107c0:	00bfffc4 	movi	r2,-1
   107c4:	8080038d 	sth	r2,14(r16)
   107c8:	00800044 	movi	r2,1
   107cc:	8080030d 	sth	r2,12(r16)
   107d0:	80001915 	stw	zero,100(r16)
   107d4:	80000015 	stw	zero,0(r16)
   107d8:	80000215 	stw	zero,8(r16)
   107dc:	80000115 	stw	zero,4(r16)
   107e0:	80000415 	stw	zero,16(r16)
   107e4:	80000515 	stw	zero,20(r16)
   107e8:	80000615 	stw	zero,24(r16)
   107ec:	01800204 	movi	r6,8
   107f0:	000b883a 	mov	r5,zero
   107f4:	81001704 	addi	r4,r16,92
   107f8:	0011a9c0 	call	11a9c <memset>
   107fc:	8005883a 	mov	r2,r16
   10800:	80000c15 	stw	zero,48(r16)
   10804:	80000d15 	stw	zero,52(r16)
   10808:	80001115 	stw	zero,68(r16)
   1080c:	80001215 	stw	zero,72(r16)
   10810:	dfc00417 	ldw	ra,16(sp)
   10814:	dcc00317 	ldw	r19,12(sp)
   10818:	dc800217 	ldw	r18,8(sp)
   1081c:	dc400117 	ldw	r17,4(sp)
   10820:	dc000017 	ldw	r16,0(sp)
   10824:	dec00504 	addi	sp,sp,20
   10828:	f800283a 	ret
   1082c:	01400104 	movi	r5,4
   10830:	9809883a 	mov	r4,r19
   10834:	00106c00 	call	106c0 <__sfmoreglue>
   10838:	90800015 	stw	r2,0(r18)
   1083c:	103fde1e 	bne	r2,zero,107b8 <__sfp+0x80>
   10840:	00800304 	movi	r2,12
   10844:	98800015 	stw	r2,0(r19)
   10848:	0005883a 	mov	r2,zero
   1084c:	003ff006 	br	10810 <__sfp+0xd8>

00010850 <_cleanup>:
   10850:	008000b4 	movhi	r2,2
   10854:	1086a004 	addi	r2,r2,6784
   10858:	11000017 	ldw	r4,0(r2)
   1085c:	01400074 	movhi	r5,1
   10860:	29493004 	addi	r5,r5,9408
   10864:	0010e441 	jmpi	10e44 <_fwalk_reent>

00010868 <__sinit>:
   10868:	20800e17 	ldw	r2,56(r4)
   1086c:	10000126 	beq	r2,zero,10874 <__sinit+0xc>
   10870:	f800283a 	ret
   10874:	001051c1 	jmpi	1051c <__sinit.part.1>

00010878 <__sfp_lock_acquire>:
   10878:	f800283a 	ret

0001087c <__sfp_lock_release>:
   1087c:	f800283a 	ret

00010880 <__sinit_lock_acquire>:
   10880:	f800283a 	ret

00010884 <__sinit_lock_release>:
   10884:	f800283a 	ret

00010888 <__fp_lock_all>:
   10888:	008000b4 	movhi	r2,2
   1088c:	1086a104 	addi	r2,r2,6788
   10890:	11000017 	ldw	r4,0(r2)
   10894:	01400074 	movhi	r5,1
   10898:	2941ae04 	addi	r5,r5,1720
   1089c:	0010d801 	jmpi	10d80 <_fwalk>

000108a0 <__fp_unlock_all>:
   108a0:	008000b4 	movhi	r2,2
   108a4:	1086a104 	addi	r2,r2,6788
   108a8:	11000017 	ldw	r4,0(r2)
   108ac:	01400074 	movhi	r5,1
   108b0:	29414204 	addi	r5,r5,1288
   108b4:	0010d801 	jmpi	10d80 <_fwalk>

000108b8 <__sfvwrite_r>:
   108b8:	30800217 	ldw	r2,8(r6)
   108bc:	10006726 	beq	r2,zero,10a5c <__sfvwrite_r+0x1a4>
   108c0:	28c0030b 	ldhu	r3,12(r5)
   108c4:	defff404 	addi	sp,sp,-48
   108c8:	dd400715 	stw	r21,28(sp)
   108cc:	dd000615 	stw	r20,24(sp)
   108d0:	dc000215 	stw	r16,8(sp)
   108d4:	dfc00b15 	stw	ra,44(sp)
   108d8:	df000a15 	stw	fp,40(sp)
   108dc:	ddc00915 	stw	r23,36(sp)
   108e0:	dd800815 	stw	r22,32(sp)
   108e4:	dcc00515 	stw	r19,20(sp)
   108e8:	dc800415 	stw	r18,16(sp)
   108ec:	dc400315 	stw	r17,12(sp)
   108f0:	1880020c 	andi	r2,r3,8
   108f4:	2821883a 	mov	r16,r5
   108f8:	202b883a 	mov	r21,r4
   108fc:	3029883a 	mov	r20,r6
   10900:	10002726 	beq	r2,zero,109a0 <__sfvwrite_r+0xe8>
   10904:	28800417 	ldw	r2,16(r5)
   10908:	10002526 	beq	r2,zero,109a0 <__sfvwrite_r+0xe8>
   1090c:	1880008c 	andi	r2,r3,2
   10910:	a4400017 	ldw	r17,0(r20)
   10914:	10002a26 	beq	r2,zero,109c0 <__sfvwrite_r+0x108>
   10918:	05a00034 	movhi	r22,32768
   1091c:	0027883a 	mov	r19,zero
   10920:	0025883a 	mov	r18,zero
   10924:	b5bf0004 	addi	r22,r22,-1024
   10928:	980d883a 	mov	r6,r19
   1092c:	a809883a 	mov	r4,r21
   10930:	90004626 	beq	r18,zero,10a4c <__sfvwrite_r+0x194>
   10934:	900f883a 	mov	r7,r18
   10938:	b480022e 	bgeu	r22,r18,10944 <__sfvwrite_r+0x8c>
   1093c:	01e00034 	movhi	r7,32768
   10940:	39ff0004 	addi	r7,r7,-1024
   10944:	80800917 	ldw	r2,36(r16)
   10948:	81400717 	ldw	r5,28(r16)
   1094c:	103ee83a 	callr	r2
   10950:	00805a0e 	bge	zero,r2,10abc <__sfvwrite_r+0x204>
   10954:	a0c00217 	ldw	r3,8(r20)
   10958:	98a7883a 	add	r19,r19,r2
   1095c:	90a5c83a 	sub	r18,r18,r2
   10960:	1885c83a 	sub	r2,r3,r2
   10964:	a0800215 	stw	r2,8(r20)
   10968:	103fef1e 	bne	r2,zero,10928 <__sfvwrite_r+0x70>
   1096c:	0005883a 	mov	r2,zero
   10970:	dfc00b17 	ldw	ra,44(sp)
   10974:	df000a17 	ldw	fp,40(sp)
   10978:	ddc00917 	ldw	r23,36(sp)
   1097c:	dd800817 	ldw	r22,32(sp)
   10980:	dd400717 	ldw	r21,28(sp)
   10984:	dd000617 	ldw	r20,24(sp)
   10988:	dcc00517 	ldw	r19,20(sp)
   1098c:	dc800417 	ldw	r18,16(sp)
   10990:	dc400317 	ldw	r17,12(sp)
   10994:	dc000217 	ldw	r16,8(sp)
   10998:	dec00c04 	addi	sp,sp,48
   1099c:	f800283a 	ret
   109a0:	800b883a 	mov	r5,r16
   109a4:	a809883a 	mov	r4,r21
   109a8:	00123180 	call	12318 <__swsetup_r>
   109ac:	1000ee1e 	bne	r2,zero,10d68 <__sfvwrite_r+0x4b0>
   109b0:	80c0030b 	ldhu	r3,12(r16)
   109b4:	a4400017 	ldw	r17,0(r20)
   109b8:	1880008c 	andi	r2,r3,2
   109bc:	103fd61e 	bne	r2,zero,10918 <__sfvwrite_r+0x60>
   109c0:	1880004c 	andi	r2,r3,1
   109c4:	1000421e 	bne	r2,zero,10ad0 <__sfvwrite_r+0x218>
   109c8:	0039883a 	mov	fp,zero
   109cc:	0025883a 	mov	r18,zero
   109d0:	90001a26 	beq	r18,zero,10a3c <__sfvwrite_r+0x184>
   109d4:	1880800c 	andi	r2,r3,512
   109d8:	84c00217 	ldw	r19,8(r16)
   109dc:	10002126 	beq	r2,zero,10a64 <__sfvwrite_r+0x1ac>
   109e0:	982f883a 	mov	r23,r19
   109e4:	94c09636 	bltu	r18,r19,10c40 <__sfvwrite_r+0x388>
   109e8:	1881200c 	andi	r2,r3,1152
   109ec:	1000a11e 	bne	r2,zero,10c74 <__sfvwrite_r+0x3bc>
   109f0:	81000017 	ldw	r4,0(r16)
   109f4:	b80d883a 	mov	r6,r23
   109f8:	e00b883a 	mov	r5,fp
   109fc:	00119400 	call	11940 <memmove>
   10a00:	80c00217 	ldw	r3,8(r16)
   10a04:	81000017 	ldw	r4,0(r16)
   10a08:	9005883a 	mov	r2,r18
   10a0c:	1ce7c83a 	sub	r19,r3,r19
   10a10:	25cf883a 	add	r7,r4,r23
   10a14:	84c00215 	stw	r19,8(r16)
   10a18:	81c00015 	stw	r7,0(r16)
   10a1c:	a0c00217 	ldw	r3,8(r20)
   10a20:	e0b9883a 	add	fp,fp,r2
   10a24:	90a5c83a 	sub	r18,r18,r2
   10a28:	18a7c83a 	sub	r19,r3,r2
   10a2c:	a4c00215 	stw	r19,8(r20)
   10a30:	983fce26 	beq	r19,zero,1096c <__sfvwrite_r+0xb4>
   10a34:	80c0030b 	ldhu	r3,12(r16)
   10a38:	903fe61e 	bne	r18,zero,109d4 <__sfvwrite_r+0x11c>
   10a3c:	8f000017 	ldw	fp,0(r17)
   10a40:	8c800117 	ldw	r18,4(r17)
   10a44:	8c400204 	addi	r17,r17,8
   10a48:	003fe106 	br	109d0 <__sfvwrite_r+0x118>
   10a4c:	8cc00017 	ldw	r19,0(r17)
   10a50:	8c800117 	ldw	r18,4(r17)
   10a54:	8c400204 	addi	r17,r17,8
   10a58:	003fb306 	br	10928 <__sfvwrite_r+0x70>
   10a5c:	0005883a 	mov	r2,zero
   10a60:	f800283a 	ret
   10a64:	81000017 	ldw	r4,0(r16)
   10a68:	80800417 	ldw	r2,16(r16)
   10a6c:	11005a36 	bltu	r2,r4,10bd8 <__sfvwrite_r+0x320>
   10a70:	85c00517 	ldw	r23,20(r16)
   10a74:	95c05836 	bltu	r18,r23,10bd8 <__sfvwrite_r+0x320>
   10a78:	00a00034 	movhi	r2,32768
   10a7c:	10bfffc4 	addi	r2,r2,-1
   10a80:	9009883a 	mov	r4,r18
   10a84:	1480012e 	bgeu	r2,r18,10a8c <__sfvwrite_r+0x1d4>
   10a88:	1009883a 	mov	r4,r2
   10a8c:	b80b883a 	mov	r5,r23
   10a90:	0012fcc0 	call	12fcc <__divsi3>
   10a94:	b80b883a 	mov	r5,r23
   10a98:	1009883a 	mov	r4,r2
   10a9c:	00131800 	call	13180 <__mulsi3>
   10aa0:	81400717 	ldw	r5,28(r16)
   10aa4:	80c00917 	ldw	r3,36(r16)
   10aa8:	100f883a 	mov	r7,r2
   10aac:	e00d883a 	mov	r6,fp
   10ab0:	a809883a 	mov	r4,r21
   10ab4:	183ee83a 	callr	r3
   10ab8:	00bfd816 	blt	zero,r2,10a1c <__sfvwrite_r+0x164>
   10abc:	8080030b 	ldhu	r2,12(r16)
   10ac0:	10801014 	ori	r2,r2,64
   10ac4:	8080030d 	sth	r2,12(r16)
   10ac8:	00bfffc4 	movi	r2,-1
   10acc:	003fa806 	br	10970 <__sfvwrite_r+0xb8>
   10ad0:	0027883a 	mov	r19,zero
   10ad4:	0011883a 	mov	r8,zero
   10ad8:	0039883a 	mov	fp,zero
   10adc:	0025883a 	mov	r18,zero
   10ae0:	90001f26 	beq	r18,zero,10b60 <__sfvwrite_r+0x2a8>
   10ae4:	40005a26 	beq	r8,zero,10c50 <__sfvwrite_r+0x398>
   10ae8:	982d883a 	mov	r22,r19
   10aec:	94c0012e 	bgeu	r18,r19,10af4 <__sfvwrite_r+0x23c>
   10af0:	902d883a 	mov	r22,r18
   10af4:	81000017 	ldw	r4,0(r16)
   10af8:	80800417 	ldw	r2,16(r16)
   10afc:	b02f883a 	mov	r23,r22
   10b00:	81c00517 	ldw	r7,20(r16)
   10b04:	1100032e 	bgeu	r2,r4,10b14 <__sfvwrite_r+0x25c>
   10b08:	80c00217 	ldw	r3,8(r16)
   10b0c:	38c7883a 	add	r3,r7,r3
   10b10:	1d801816 	blt	r3,r22,10b74 <__sfvwrite_r+0x2bc>
   10b14:	b1c03e16 	blt	r22,r7,10c10 <__sfvwrite_r+0x358>
   10b18:	80800917 	ldw	r2,36(r16)
   10b1c:	81400717 	ldw	r5,28(r16)
   10b20:	e00d883a 	mov	r6,fp
   10b24:	da000115 	stw	r8,4(sp)
   10b28:	a809883a 	mov	r4,r21
   10b2c:	103ee83a 	callr	r2
   10b30:	102f883a 	mov	r23,r2
   10b34:	da000117 	ldw	r8,4(sp)
   10b38:	00bfe00e 	bge	zero,r2,10abc <__sfvwrite_r+0x204>
   10b3c:	9de7c83a 	sub	r19,r19,r23
   10b40:	98001f26 	beq	r19,zero,10bc0 <__sfvwrite_r+0x308>
   10b44:	a0800217 	ldw	r2,8(r20)
   10b48:	e5f9883a 	add	fp,fp,r23
   10b4c:	95e5c83a 	sub	r18,r18,r23
   10b50:	15efc83a 	sub	r23,r2,r23
   10b54:	a5c00215 	stw	r23,8(r20)
   10b58:	b83f8426 	beq	r23,zero,1096c <__sfvwrite_r+0xb4>
   10b5c:	903fe11e 	bne	r18,zero,10ae4 <__sfvwrite_r+0x22c>
   10b60:	8f000017 	ldw	fp,0(r17)
   10b64:	8c800117 	ldw	r18,4(r17)
   10b68:	0011883a 	mov	r8,zero
   10b6c:	8c400204 	addi	r17,r17,8
   10b70:	003fdb06 	br	10ae0 <__sfvwrite_r+0x228>
   10b74:	180d883a 	mov	r6,r3
   10b78:	e00b883a 	mov	r5,fp
   10b7c:	da000115 	stw	r8,4(sp)
   10b80:	d8c00015 	stw	r3,0(sp)
   10b84:	00119400 	call	11940 <memmove>
   10b88:	d8c00017 	ldw	r3,0(sp)
   10b8c:	80800017 	ldw	r2,0(r16)
   10b90:	800b883a 	mov	r5,r16
   10b94:	a809883a 	mov	r4,r21
   10b98:	10c5883a 	add	r2,r2,r3
   10b9c:	80800015 	stw	r2,0(r16)
   10ba0:	d8c00015 	stw	r3,0(sp)
   10ba4:	00127e00 	call	127e0 <_fflush_r>
   10ba8:	d8c00017 	ldw	r3,0(sp)
   10bac:	da000117 	ldw	r8,4(sp)
   10bb0:	103fc21e 	bne	r2,zero,10abc <__sfvwrite_r+0x204>
   10bb4:	182f883a 	mov	r23,r3
   10bb8:	9de7c83a 	sub	r19,r19,r23
   10bbc:	983fe11e 	bne	r19,zero,10b44 <__sfvwrite_r+0x28c>
   10bc0:	800b883a 	mov	r5,r16
   10bc4:	a809883a 	mov	r4,r21
   10bc8:	00127e00 	call	127e0 <_fflush_r>
   10bcc:	103fbb1e 	bne	r2,zero,10abc <__sfvwrite_r+0x204>
   10bd0:	0011883a 	mov	r8,zero
   10bd4:	003fdb06 	br	10b44 <__sfvwrite_r+0x28c>
   10bd8:	94c0012e 	bgeu	r18,r19,10be0 <__sfvwrite_r+0x328>
   10bdc:	9027883a 	mov	r19,r18
   10be0:	980d883a 	mov	r6,r19
   10be4:	e00b883a 	mov	r5,fp
   10be8:	00119400 	call	11940 <memmove>
   10bec:	80800217 	ldw	r2,8(r16)
   10bf0:	80c00017 	ldw	r3,0(r16)
   10bf4:	14c5c83a 	sub	r2,r2,r19
   10bf8:	1cc7883a 	add	r3,r3,r19
   10bfc:	80800215 	stw	r2,8(r16)
   10c00:	80c00015 	stw	r3,0(r16)
   10c04:	10004326 	beq	r2,zero,10d14 <__sfvwrite_r+0x45c>
   10c08:	9805883a 	mov	r2,r19
   10c0c:	003f8306 	br	10a1c <__sfvwrite_r+0x164>
   10c10:	b00d883a 	mov	r6,r22
   10c14:	e00b883a 	mov	r5,fp
   10c18:	da000115 	stw	r8,4(sp)
   10c1c:	00119400 	call	11940 <memmove>
   10c20:	80800217 	ldw	r2,8(r16)
   10c24:	80c00017 	ldw	r3,0(r16)
   10c28:	da000117 	ldw	r8,4(sp)
   10c2c:	1585c83a 	sub	r2,r2,r22
   10c30:	1dad883a 	add	r22,r3,r22
   10c34:	80800215 	stw	r2,8(r16)
   10c38:	85800015 	stw	r22,0(r16)
   10c3c:	003fbf06 	br	10b3c <__sfvwrite_r+0x284>
   10c40:	81000017 	ldw	r4,0(r16)
   10c44:	9027883a 	mov	r19,r18
   10c48:	902f883a 	mov	r23,r18
   10c4c:	003f6906 	br	109f4 <__sfvwrite_r+0x13c>
   10c50:	900d883a 	mov	r6,r18
   10c54:	01400284 	movi	r5,10
   10c58:	e009883a 	mov	r4,fp
   10c5c:	00117140 	call	11714 <memchr>
   10c60:	10003e26 	beq	r2,zero,10d5c <__sfvwrite_r+0x4a4>
   10c64:	10800044 	addi	r2,r2,1
   10c68:	1727c83a 	sub	r19,r2,fp
   10c6c:	02000044 	movi	r8,1
   10c70:	003f9d06 	br	10ae8 <__sfvwrite_r+0x230>
   10c74:	80800517 	ldw	r2,20(r16)
   10c78:	81400417 	ldw	r5,16(r16)
   10c7c:	81c00017 	ldw	r7,0(r16)
   10c80:	10a7883a 	add	r19,r2,r2
   10c84:	9885883a 	add	r2,r19,r2
   10c88:	1026d7fa 	srli	r19,r2,31
   10c8c:	396dc83a 	sub	r22,r7,r5
   10c90:	b1000044 	addi	r4,r22,1
   10c94:	9885883a 	add	r2,r19,r2
   10c98:	1027d07a 	srai	r19,r2,1
   10c9c:	2485883a 	add	r2,r4,r18
   10ca0:	980d883a 	mov	r6,r19
   10ca4:	9880022e 	bgeu	r19,r2,10cb0 <__sfvwrite_r+0x3f8>
   10ca8:	1027883a 	mov	r19,r2
   10cac:	100d883a 	mov	r6,r2
   10cb0:	18c1000c 	andi	r3,r3,1024
   10cb4:	18001c26 	beq	r3,zero,10d28 <__sfvwrite_r+0x470>
   10cb8:	300b883a 	mov	r5,r6
   10cbc:	a809883a 	mov	r4,r21
   10cc0:	0010f080 	call	10f08 <_malloc_r>
   10cc4:	102f883a 	mov	r23,r2
   10cc8:	10002926 	beq	r2,zero,10d70 <__sfvwrite_r+0x4b8>
   10ccc:	81400417 	ldw	r5,16(r16)
   10cd0:	b00d883a 	mov	r6,r22
   10cd4:	1009883a 	mov	r4,r2
   10cd8:	00117f80 	call	117f8 <memcpy>
   10cdc:	8080030b 	ldhu	r2,12(r16)
   10ce0:	00fedfc4 	movi	r3,-1153
   10ce4:	10c4703a 	and	r2,r2,r3
   10ce8:	10802014 	ori	r2,r2,128
   10cec:	8080030d 	sth	r2,12(r16)
   10cf0:	bd89883a 	add	r4,r23,r22
   10cf4:	9d8fc83a 	sub	r7,r19,r22
   10cf8:	85c00415 	stw	r23,16(r16)
   10cfc:	84c00515 	stw	r19,20(r16)
   10d00:	81000015 	stw	r4,0(r16)
   10d04:	9027883a 	mov	r19,r18
   10d08:	81c00215 	stw	r7,8(r16)
   10d0c:	902f883a 	mov	r23,r18
   10d10:	003f3806 	br	109f4 <__sfvwrite_r+0x13c>
   10d14:	800b883a 	mov	r5,r16
   10d18:	a809883a 	mov	r4,r21
   10d1c:	00127e00 	call	127e0 <_fflush_r>
   10d20:	103fb926 	beq	r2,zero,10c08 <__sfvwrite_r+0x350>
   10d24:	003f6506 	br	10abc <__sfvwrite_r+0x204>
   10d28:	a809883a 	mov	r4,r21
   10d2c:	0011bc40 	call	11bc4 <_realloc_r>
   10d30:	102f883a 	mov	r23,r2
   10d34:	103fee1e 	bne	r2,zero,10cf0 <__sfvwrite_r+0x438>
   10d38:	81400417 	ldw	r5,16(r16)
   10d3c:	a809883a 	mov	r4,r21
   10d40:	00129900 	call	12990 <_free_r>
   10d44:	8080030b 	ldhu	r2,12(r16)
   10d48:	00ffdfc4 	movi	r3,-129
   10d4c:	1884703a 	and	r2,r3,r2
   10d50:	00c00304 	movi	r3,12
   10d54:	a8c00015 	stw	r3,0(r21)
   10d58:	003f5906 	br	10ac0 <__sfvwrite_r+0x208>
   10d5c:	94c00044 	addi	r19,r18,1
   10d60:	02000044 	movi	r8,1
   10d64:	003f6006 	br	10ae8 <__sfvwrite_r+0x230>
   10d68:	00bfffc4 	movi	r2,-1
   10d6c:	003f0006 	br	10970 <__sfvwrite_r+0xb8>
   10d70:	00800304 	movi	r2,12
   10d74:	a8800015 	stw	r2,0(r21)
   10d78:	8080030b 	ldhu	r2,12(r16)
   10d7c:	003f5006 	br	10ac0 <__sfvwrite_r+0x208>

00010d80 <_fwalk>:
   10d80:	defff704 	addi	sp,sp,-36
   10d84:	dd000415 	stw	r20,16(sp)
   10d88:	dfc00815 	stw	ra,32(sp)
   10d8c:	ddc00715 	stw	r23,28(sp)
   10d90:	dd800615 	stw	r22,24(sp)
   10d94:	dd400515 	stw	r21,20(sp)
   10d98:	dcc00315 	stw	r19,12(sp)
   10d9c:	dc800215 	stw	r18,8(sp)
   10da0:	dc400115 	stw	r17,4(sp)
   10da4:	dc000015 	stw	r16,0(sp)
   10da8:	2500b804 	addi	r20,r4,736
   10dac:	a0002326 	beq	r20,zero,10e3c <_fwalk+0xbc>
   10db0:	282b883a 	mov	r21,r5
   10db4:	002f883a 	mov	r23,zero
   10db8:	05800044 	movi	r22,1
   10dbc:	04ffffc4 	movi	r19,-1
   10dc0:	a4400117 	ldw	r17,4(r20)
   10dc4:	a4800217 	ldw	r18,8(r20)
   10dc8:	8c7fffc4 	addi	r17,r17,-1
   10dcc:	88000d16 	blt	r17,zero,10e04 <_fwalk+0x84>
   10dd0:	94000304 	addi	r16,r18,12
   10dd4:	94800384 	addi	r18,r18,14
   10dd8:	8080000b 	ldhu	r2,0(r16)
   10ddc:	8c7fffc4 	addi	r17,r17,-1
   10de0:	813ffd04 	addi	r4,r16,-12
   10de4:	b080042e 	bgeu	r22,r2,10df8 <_fwalk+0x78>
   10de8:	9080000f 	ldh	r2,0(r18)
   10dec:	14c00226 	beq	r2,r19,10df8 <_fwalk+0x78>
   10df0:	a83ee83a 	callr	r21
   10df4:	b8aeb03a 	or	r23,r23,r2
   10df8:	84001a04 	addi	r16,r16,104
   10dfc:	94801a04 	addi	r18,r18,104
   10e00:	8cfff51e 	bne	r17,r19,10dd8 <_fwalk+0x58>
   10e04:	a5000017 	ldw	r20,0(r20)
   10e08:	a03fed1e 	bne	r20,zero,10dc0 <_fwalk+0x40>
   10e0c:	b805883a 	mov	r2,r23
   10e10:	dfc00817 	ldw	ra,32(sp)
   10e14:	ddc00717 	ldw	r23,28(sp)
   10e18:	dd800617 	ldw	r22,24(sp)
   10e1c:	dd400517 	ldw	r21,20(sp)
   10e20:	dd000417 	ldw	r20,16(sp)
   10e24:	dcc00317 	ldw	r19,12(sp)
   10e28:	dc800217 	ldw	r18,8(sp)
   10e2c:	dc400117 	ldw	r17,4(sp)
   10e30:	dc000017 	ldw	r16,0(sp)
   10e34:	dec00904 	addi	sp,sp,36
   10e38:	f800283a 	ret
   10e3c:	002f883a 	mov	r23,zero
   10e40:	003ff206 	br	10e0c <_fwalk+0x8c>

00010e44 <_fwalk_reent>:
   10e44:	defff704 	addi	sp,sp,-36
   10e48:	dd000415 	stw	r20,16(sp)
   10e4c:	dfc00815 	stw	ra,32(sp)
   10e50:	ddc00715 	stw	r23,28(sp)
   10e54:	dd800615 	stw	r22,24(sp)
   10e58:	dd400515 	stw	r21,20(sp)
   10e5c:	dcc00315 	stw	r19,12(sp)
   10e60:	dc800215 	stw	r18,8(sp)
   10e64:	dc400115 	stw	r17,4(sp)
   10e68:	dc000015 	stw	r16,0(sp)
   10e6c:	2500b804 	addi	r20,r4,736
   10e70:	a0002326 	beq	r20,zero,10f00 <_fwalk_reent+0xbc>
   10e74:	282b883a 	mov	r21,r5
   10e78:	2027883a 	mov	r19,r4
   10e7c:	002f883a 	mov	r23,zero
   10e80:	05800044 	movi	r22,1
   10e84:	04bfffc4 	movi	r18,-1
   10e88:	a4400117 	ldw	r17,4(r20)
   10e8c:	a4000217 	ldw	r16,8(r20)
   10e90:	8c7fffc4 	addi	r17,r17,-1
   10e94:	88000c16 	blt	r17,zero,10ec8 <_fwalk_reent+0x84>
   10e98:	84000304 	addi	r16,r16,12
   10e9c:	8080000b 	ldhu	r2,0(r16)
   10ea0:	8c7fffc4 	addi	r17,r17,-1
   10ea4:	817ffd04 	addi	r5,r16,-12
   10ea8:	b080052e 	bgeu	r22,r2,10ec0 <_fwalk_reent+0x7c>
   10eac:	8080008f 	ldh	r2,2(r16)
   10eb0:	9809883a 	mov	r4,r19
   10eb4:	14800226 	beq	r2,r18,10ec0 <_fwalk_reent+0x7c>
   10eb8:	a83ee83a 	callr	r21
   10ebc:	b8aeb03a 	or	r23,r23,r2
   10ec0:	84001a04 	addi	r16,r16,104
   10ec4:	8cbff51e 	bne	r17,r18,10e9c <_fwalk_reent+0x58>
   10ec8:	a5000017 	ldw	r20,0(r20)
   10ecc:	a03fee1e 	bne	r20,zero,10e88 <_fwalk_reent+0x44>
   10ed0:	b805883a 	mov	r2,r23
   10ed4:	dfc00817 	ldw	ra,32(sp)
   10ed8:	ddc00717 	ldw	r23,28(sp)
   10edc:	dd800617 	ldw	r22,24(sp)
   10ee0:	dd400517 	ldw	r21,20(sp)
   10ee4:	dd000417 	ldw	r20,16(sp)
   10ee8:	dcc00317 	ldw	r19,12(sp)
   10eec:	dc800217 	ldw	r18,8(sp)
   10ef0:	dc400117 	ldw	r17,4(sp)
   10ef4:	dc000017 	ldw	r16,0(sp)
   10ef8:	dec00904 	addi	sp,sp,36
   10efc:	f800283a 	ret
   10f00:	002f883a 	mov	r23,zero
   10f04:	003ff206 	br	10ed0 <_fwalk_reent+0x8c>

00010f08 <_malloc_r>:
   10f08:	defff504 	addi	sp,sp,-44
   10f0c:	dc800315 	stw	r18,12(sp)
   10f10:	dfc00a15 	stw	ra,40(sp)
   10f14:	df000915 	stw	fp,36(sp)
   10f18:	ddc00815 	stw	r23,32(sp)
   10f1c:	dd800715 	stw	r22,28(sp)
   10f20:	dd400615 	stw	r21,24(sp)
   10f24:	dd000515 	stw	r20,20(sp)
   10f28:	dcc00415 	stw	r19,16(sp)
   10f2c:	dc400215 	stw	r17,8(sp)
   10f30:	dc000115 	stw	r16,4(sp)
   10f34:	288002c4 	addi	r2,r5,11
   10f38:	00c00584 	movi	r3,22
   10f3c:	2025883a 	mov	r18,r4
   10f40:	18807f2e 	bgeu	r3,r2,11140 <_malloc_r+0x238>
   10f44:	047ffe04 	movi	r17,-8
   10f48:	1462703a 	and	r17,r2,r17
   10f4c:	8800a316 	blt	r17,zero,111dc <_malloc_r+0x2d4>
   10f50:	8940a236 	bltu	r17,r5,111dc <_malloc_r+0x2d4>
   10f54:	00137440 	call	13744 <__malloc_lock>
   10f58:	00807dc4 	movi	r2,503
   10f5c:	1441e92e 	bgeu	r2,r17,11704 <_malloc_r+0x7fc>
   10f60:	8804d27a 	srli	r2,r17,9
   10f64:	1000a126 	beq	r2,zero,111ec <_malloc_r+0x2e4>
   10f68:	00c00104 	movi	r3,4
   10f6c:	18811e36 	bltu	r3,r2,113e8 <_malloc_r+0x4e0>
   10f70:	8804d1ba 	srli	r2,r17,6
   10f74:	12000e44 	addi	r8,r2,57
   10f78:	11c00e04 	addi	r7,r2,56
   10f7c:	4209883a 	add	r4,r8,r8
   10f80:	04c000b4 	movhi	r19,2
   10f84:	2109883a 	add	r4,r4,r4
   10f88:	9cc11c04 	addi	r19,r19,1136
   10f8c:	2109883a 	add	r4,r4,r4
   10f90:	9909883a 	add	r4,r19,r4
   10f94:	24000117 	ldw	r16,4(r4)
   10f98:	213ffe04 	addi	r4,r4,-8
   10f9c:	24009726 	beq	r4,r16,111fc <_malloc_r+0x2f4>
   10fa0:	80800117 	ldw	r2,4(r16)
   10fa4:	01bfff04 	movi	r6,-4
   10fa8:	014003c4 	movi	r5,15
   10fac:	1184703a 	and	r2,r2,r6
   10fb0:	1447c83a 	sub	r3,r2,r17
   10fb4:	28c00716 	blt	r5,r3,10fd4 <_malloc_r+0xcc>
   10fb8:	1800920e 	bge	r3,zero,11204 <_malloc_r+0x2fc>
   10fbc:	84000317 	ldw	r16,12(r16)
   10fc0:	24008e26 	beq	r4,r16,111fc <_malloc_r+0x2f4>
   10fc4:	80800117 	ldw	r2,4(r16)
   10fc8:	1184703a 	and	r2,r2,r6
   10fcc:	1447c83a 	sub	r3,r2,r17
   10fd0:	28fff90e 	bge	r5,r3,10fb8 <_malloc_r+0xb0>
   10fd4:	3809883a 	mov	r4,r7
   10fd8:	018000b4 	movhi	r6,2
   10fdc:	9c000417 	ldw	r16,16(r19)
   10fe0:	31811c04 	addi	r6,r6,1136
   10fe4:	32000204 	addi	r8,r6,8
   10fe8:	82013426 	beq	r16,r8,114bc <_malloc_r+0x5b4>
   10fec:	80c00117 	ldw	r3,4(r16)
   10ff0:	00bfff04 	movi	r2,-4
   10ff4:	188e703a 	and	r7,r3,r2
   10ff8:	3c45c83a 	sub	r2,r7,r17
   10ffc:	00c003c4 	movi	r3,15
   11000:	18811f16 	blt	r3,r2,11480 <_malloc_r+0x578>
   11004:	32000515 	stw	r8,20(r6)
   11008:	32000415 	stw	r8,16(r6)
   1100c:	10007f0e 	bge	r2,zero,1120c <_malloc_r+0x304>
   11010:	00807fc4 	movi	r2,511
   11014:	11c0fd36 	bltu	r2,r7,1140c <_malloc_r+0x504>
   11018:	3806d0fa 	srli	r3,r7,3
   1101c:	01c00044 	movi	r7,1
   11020:	30800117 	ldw	r2,4(r6)
   11024:	19400044 	addi	r5,r3,1
   11028:	294b883a 	add	r5,r5,r5
   1102c:	1807d0ba 	srai	r3,r3,2
   11030:	294b883a 	add	r5,r5,r5
   11034:	294b883a 	add	r5,r5,r5
   11038:	298b883a 	add	r5,r5,r6
   1103c:	38c6983a 	sll	r3,r7,r3
   11040:	29c00017 	ldw	r7,0(r5)
   11044:	2a7ffe04 	addi	r9,r5,-8
   11048:	1886b03a 	or	r3,r3,r2
   1104c:	82400315 	stw	r9,12(r16)
   11050:	81c00215 	stw	r7,8(r16)
   11054:	30c00115 	stw	r3,4(r6)
   11058:	2c000015 	stw	r16,0(r5)
   1105c:	3c000315 	stw	r16,12(r7)
   11060:	2005d0ba 	srai	r2,r4,2
   11064:	01400044 	movi	r5,1
   11068:	288a983a 	sll	r5,r5,r2
   1106c:	19406f36 	bltu	r3,r5,1122c <_malloc_r+0x324>
   11070:	28c4703a 	and	r2,r5,r3
   11074:	10000a1e 	bne	r2,zero,110a0 <_malloc_r+0x198>
   11078:	00bfff04 	movi	r2,-4
   1107c:	294b883a 	add	r5,r5,r5
   11080:	2088703a 	and	r4,r4,r2
   11084:	28c4703a 	and	r2,r5,r3
   11088:	21000104 	addi	r4,r4,4
   1108c:	1000041e 	bne	r2,zero,110a0 <_malloc_r+0x198>
   11090:	294b883a 	add	r5,r5,r5
   11094:	28c4703a 	and	r2,r5,r3
   11098:	21000104 	addi	r4,r4,4
   1109c:	103ffc26 	beq	r2,zero,11090 <_malloc_r+0x188>
   110a0:	02bfff04 	movi	r10,-4
   110a4:	024003c4 	movi	r9,15
   110a8:	21800044 	addi	r6,r4,1
   110ac:	318d883a 	add	r6,r6,r6
   110b0:	318d883a 	add	r6,r6,r6
   110b4:	318d883a 	add	r6,r6,r6
   110b8:	998d883a 	add	r6,r19,r6
   110bc:	333ffe04 	addi	r12,r6,-8
   110c0:	2017883a 	mov	r11,r4
   110c4:	31800104 	addi	r6,r6,4
   110c8:	34000017 	ldw	r16,0(r6)
   110cc:	31fffd04 	addi	r7,r6,-12
   110d0:	81c0041e 	bne	r16,r7,110e4 <_malloc_r+0x1dc>
   110d4:	0000fb06 	br	114c4 <_malloc_r+0x5bc>
   110d8:	1801030e 	bge	r3,zero,114e8 <_malloc_r+0x5e0>
   110dc:	84000317 	ldw	r16,12(r16)
   110e0:	81c0f826 	beq	r16,r7,114c4 <_malloc_r+0x5bc>
   110e4:	80800117 	ldw	r2,4(r16)
   110e8:	1284703a 	and	r2,r2,r10
   110ec:	1447c83a 	sub	r3,r2,r17
   110f0:	48fff90e 	bge	r9,r3,110d8 <_malloc_r+0x1d0>
   110f4:	80800317 	ldw	r2,12(r16)
   110f8:	81000217 	ldw	r4,8(r16)
   110fc:	89400054 	ori	r5,r17,1
   11100:	81400115 	stw	r5,4(r16)
   11104:	20800315 	stw	r2,12(r4)
   11108:	11000215 	stw	r4,8(r2)
   1110c:	8463883a 	add	r17,r16,r17
   11110:	9c400515 	stw	r17,20(r19)
   11114:	9c400415 	stw	r17,16(r19)
   11118:	18800054 	ori	r2,r3,1
   1111c:	88800115 	stw	r2,4(r17)
   11120:	8a000315 	stw	r8,12(r17)
   11124:	8a000215 	stw	r8,8(r17)
   11128:	88e3883a 	add	r17,r17,r3
   1112c:	88c00015 	stw	r3,0(r17)
   11130:	9009883a 	mov	r4,r18
   11134:	00137680 	call	13768 <__malloc_unlock>
   11138:	80800204 	addi	r2,r16,8
   1113c:	00001b06 	br	111ac <_malloc_r+0x2a4>
   11140:	04400404 	movi	r17,16
   11144:	89402536 	bltu	r17,r5,111dc <_malloc_r+0x2d4>
   11148:	00137440 	call	13744 <__malloc_lock>
   1114c:	00800184 	movi	r2,6
   11150:	01000084 	movi	r4,2
   11154:	04c000b4 	movhi	r19,2
   11158:	1085883a 	add	r2,r2,r2
   1115c:	9cc11c04 	addi	r19,r19,1136
   11160:	1085883a 	add	r2,r2,r2
   11164:	9885883a 	add	r2,r19,r2
   11168:	14000117 	ldw	r16,4(r2)
   1116c:	10fffe04 	addi	r3,r2,-8
   11170:	80c0d926 	beq	r16,r3,114d8 <_malloc_r+0x5d0>
   11174:	80c00117 	ldw	r3,4(r16)
   11178:	81000317 	ldw	r4,12(r16)
   1117c:	00bfff04 	movi	r2,-4
   11180:	1884703a 	and	r2,r3,r2
   11184:	81400217 	ldw	r5,8(r16)
   11188:	8085883a 	add	r2,r16,r2
   1118c:	10c00117 	ldw	r3,4(r2)
   11190:	29000315 	stw	r4,12(r5)
   11194:	21400215 	stw	r5,8(r4)
   11198:	18c00054 	ori	r3,r3,1
   1119c:	10c00115 	stw	r3,4(r2)
   111a0:	9009883a 	mov	r4,r18
   111a4:	00137680 	call	13768 <__malloc_unlock>
   111a8:	80800204 	addi	r2,r16,8
   111ac:	dfc00a17 	ldw	ra,40(sp)
   111b0:	df000917 	ldw	fp,36(sp)
   111b4:	ddc00817 	ldw	r23,32(sp)
   111b8:	dd800717 	ldw	r22,28(sp)
   111bc:	dd400617 	ldw	r21,24(sp)
   111c0:	dd000517 	ldw	r20,20(sp)
   111c4:	dcc00417 	ldw	r19,16(sp)
   111c8:	dc800317 	ldw	r18,12(sp)
   111cc:	dc400217 	ldw	r17,8(sp)
   111d0:	dc000117 	ldw	r16,4(sp)
   111d4:	dec00b04 	addi	sp,sp,44
   111d8:	f800283a 	ret
   111dc:	00800304 	movi	r2,12
   111e0:	90800015 	stw	r2,0(r18)
   111e4:	0005883a 	mov	r2,zero
   111e8:	003ff006 	br	111ac <_malloc_r+0x2a4>
   111ec:	01002004 	movi	r4,128
   111f0:	02001004 	movi	r8,64
   111f4:	01c00fc4 	movi	r7,63
   111f8:	003f6106 	br	10f80 <_malloc_r+0x78>
   111fc:	4009883a 	mov	r4,r8
   11200:	003f7506 	br	10fd8 <_malloc_r+0xd0>
   11204:	81000317 	ldw	r4,12(r16)
   11208:	003fde06 	br	11184 <_malloc_r+0x27c>
   1120c:	81c5883a 	add	r2,r16,r7
   11210:	11400117 	ldw	r5,4(r2)
   11214:	9009883a 	mov	r4,r18
   11218:	29400054 	ori	r5,r5,1
   1121c:	11400115 	stw	r5,4(r2)
   11220:	00137680 	call	13768 <__malloc_unlock>
   11224:	80800204 	addi	r2,r16,8
   11228:	003fe006 	br	111ac <_malloc_r+0x2a4>
   1122c:	9c000217 	ldw	r16,8(r19)
   11230:	00bfff04 	movi	r2,-4
   11234:	85800117 	ldw	r22,4(r16)
   11238:	b0ac703a 	and	r22,r22,r2
   1123c:	b4400336 	bltu	r22,r17,1124c <_malloc_r+0x344>
   11240:	b445c83a 	sub	r2,r22,r17
   11244:	00c003c4 	movi	r3,15
   11248:	18805d16 	blt	r3,r2,113c0 <_malloc_r+0x4b8>
   1124c:	05c000b4 	movhi	r23,2
   11250:	008000b4 	movhi	r2,2
   11254:	1086b004 	addi	r2,r2,6848
   11258:	bdc6a204 	addi	r23,r23,6792
   1125c:	15400017 	ldw	r21,0(r2)
   11260:	b8c00017 	ldw	r3,0(r23)
   11264:	00bfffc4 	movi	r2,-1
   11268:	858d883a 	add	r6,r16,r22
   1126c:	8d6b883a 	add	r21,r17,r21
   11270:	1880ea26 	beq	r3,r2,1161c <_malloc_r+0x714>
   11274:	ad4403c4 	addi	r21,r21,4111
   11278:	00bc0004 	movi	r2,-4096
   1127c:	a8aa703a 	and	r21,r21,r2
   11280:	a80b883a 	mov	r5,r21
   11284:	9009883a 	mov	r4,r18
   11288:	d9800015 	stw	r6,0(sp)
   1128c:	00121280 	call	12128 <_sbrk_r>
   11290:	1029883a 	mov	r20,r2
   11294:	00bfffc4 	movi	r2,-1
   11298:	d9800017 	ldw	r6,0(sp)
   1129c:	a080e826 	beq	r20,r2,11640 <_malloc_r+0x738>
   112a0:	a180a636 	bltu	r20,r6,1153c <_malloc_r+0x634>
   112a4:	070000b4 	movhi	fp,2
   112a8:	e706b904 	addi	fp,fp,6884
   112ac:	e0800017 	ldw	r2,0(fp)
   112b0:	a887883a 	add	r3,r21,r2
   112b4:	e0c00015 	stw	r3,0(fp)
   112b8:	3500e626 	beq	r6,r20,11654 <_malloc_r+0x74c>
   112bc:	b9000017 	ldw	r4,0(r23)
   112c0:	00bfffc4 	movi	r2,-1
   112c4:	2080ee26 	beq	r4,r2,11680 <_malloc_r+0x778>
   112c8:	a185c83a 	sub	r2,r20,r6
   112cc:	10c5883a 	add	r2,r2,r3
   112d0:	e0800015 	stw	r2,0(fp)
   112d4:	a0c001cc 	andi	r3,r20,7
   112d8:	1800bc26 	beq	r3,zero,115cc <_malloc_r+0x6c4>
   112dc:	a0e9c83a 	sub	r20,r20,r3
   112e0:	00840204 	movi	r2,4104
   112e4:	a5000204 	addi	r20,r20,8
   112e8:	10c7c83a 	sub	r3,r2,r3
   112ec:	a545883a 	add	r2,r20,r21
   112f0:	1083ffcc 	andi	r2,r2,4095
   112f4:	18abc83a 	sub	r21,r3,r2
   112f8:	a80b883a 	mov	r5,r21
   112fc:	9009883a 	mov	r4,r18
   11300:	00121280 	call	12128 <_sbrk_r>
   11304:	00ffffc4 	movi	r3,-1
   11308:	10c0e126 	beq	r2,r3,11690 <_malloc_r+0x788>
   1130c:	1505c83a 	sub	r2,r2,r20
   11310:	1545883a 	add	r2,r2,r21
   11314:	10800054 	ori	r2,r2,1
   11318:	e0c00017 	ldw	r3,0(fp)
   1131c:	9d000215 	stw	r20,8(r19)
   11320:	a0800115 	stw	r2,4(r20)
   11324:	a8c7883a 	add	r3,r21,r3
   11328:	e0c00015 	stw	r3,0(fp)
   1132c:	84c00e26 	beq	r16,r19,11368 <_malloc_r+0x460>
   11330:	018003c4 	movi	r6,15
   11334:	3580a72e 	bgeu	r6,r22,115d4 <_malloc_r+0x6cc>
   11338:	81400117 	ldw	r5,4(r16)
   1133c:	013ffe04 	movi	r4,-8
   11340:	b0bffd04 	addi	r2,r22,-12
   11344:	1104703a 	and	r2,r2,r4
   11348:	2900004c 	andi	r4,r5,1
   1134c:	2088b03a 	or	r4,r4,r2
   11350:	81000115 	stw	r4,4(r16)
   11354:	01400144 	movi	r5,5
   11358:	8089883a 	add	r4,r16,r2
   1135c:	21400115 	stw	r5,4(r4)
   11360:	21400215 	stw	r5,8(r4)
   11364:	3080cd36 	bltu	r6,r2,1169c <_malloc_r+0x794>
   11368:	008000b4 	movhi	r2,2
   1136c:	1086af04 	addi	r2,r2,6844
   11370:	11000017 	ldw	r4,0(r2)
   11374:	20c0012e 	bgeu	r4,r3,1137c <_malloc_r+0x474>
   11378:	10c00015 	stw	r3,0(r2)
   1137c:	008000b4 	movhi	r2,2
   11380:	1086ae04 	addi	r2,r2,6840
   11384:	11000017 	ldw	r4,0(r2)
   11388:	9c000217 	ldw	r16,8(r19)
   1138c:	20c0012e 	bgeu	r4,r3,11394 <_malloc_r+0x48c>
   11390:	10c00015 	stw	r3,0(r2)
   11394:	80c00117 	ldw	r3,4(r16)
   11398:	00bfff04 	movi	r2,-4
   1139c:	1886703a 	and	r3,r3,r2
   113a0:	1c45c83a 	sub	r2,r3,r17
   113a4:	1c400236 	bltu	r3,r17,113b0 <_malloc_r+0x4a8>
   113a8:	00c003c4 	movi	r3,15
   113ac:	18800416 	blt	r3,r2,113c0 <_malloc_r+0x4b8>
   113b0:	9009883a 	mov	r4,r18
   113b4:	00137680 	call	13768 <__malloc_unlock>
   113b8:	0005883a 	mov	r2,zero
   113bc:	003f7b06 	br	111ac <_malloc_r+0x2a4>
   113c0:	88c00054 	ori	r3,r17,1
   113c4:	80c00115 	stw	r3,4(r16)
   113c8:	8463883a 	add	r17,r16,r17
   113cc:	10800054 	ori	r2,r2,1
   113d0:	9c400215 	stw	r17,8(r19)
   113d4:	88800115 	stw	r2,4(r17)
   113d8:	9009883a 	mov	r4,r18
   113dc:	00137680 	call	13768 <__malloc_unlock>
   113e0:	80800204 	addi	r2,r16,8
   113e4:	003f7106 	br	111ac <_malloc_r+0x2a4>
   113e8:	00c00504 	movi	r3,20
   113ec:	18804a2e 	bgeu	r3,r2,11518 <_malloc_r+0x610>
   113f0:	00c01504 	movi	r3,84
   113f4:	18806e36 	bltu	r3,r2,115b0 <_malloc_r+0x6a8>
   113f8:	8804d33a 	srli	r2,r17,12
   113fc:	12001bc4 	addi	r8,r2,111
   11400:	11c01b84 	addi	r7,r2,110
   11404:	4209883a 	add	r4,r8,r8
   11408:	003edd06 	br	10f80 <_malloc_r+0x78>
   1140c:	3804d27a 	srli	r2,r7,9
   11410:	00c00104 	movi	r3,4
   11414:	1880442e 	bgeu	r3,r2,11528 <_malloc_r+0x620>
   11418:	00c00504 	movi	r3,20
   1141c:	18808136 	bltu	r3,r2,11624 <_malloc_r+0x71c>
   11420:	11401704 	addi	r5,r2,92
   11424:	10c016c4 	addi	r3,r2,91
   11428:	294b883a 	add	r5,r5,r5
   1142c:	294b883a 	add	r5,r5,r5
   11430:	294b883a 	add	r5,r5,r5
   11434:	994b883a 	add	r5,r19,r5
   11438:	28800017 	ldw	r2,0(r5)
   1143c:	018000b4 	movhi	r6,2
   11440:	297ffe04 	addi	r5,r5,-8
   11444:	31811c04 	addi	r6,r6,1136
   11448:	28806526 	beq	r5,r2,115e0 <_malloc_r+0x6d8>
   1144c:	01bfff04 	movi	r6,-4
   11450:	10c00117 	ldw	r3,4(r2)
   11454:	1986703a 	and	r3,r3,r6
   11458:	38c0022e 	bgeu	r7,r3,11464 <_malloc_r+0x55c>
   1145c:	10800217 	ldw	r2,8(r2)
   11460:	28bffb1e 	bne	r5,r2,11450 <_malloc_r+0x548>
   11464:	11400317 	ldw	r5,12(r2)
   11468:	98c00117 	ldw	r3,4(r19)
   1146c:	81400315 	stw	r5,12(r16)
   11470:	80800215 	stw	r2,8(r16)
   11474:	2c000215 	stw	r16,8(r5)
   11478:	14000315 	stw	r16,12(r2)
   1147c:	003ef806 	br	11060 <_malloc_r+0x158>
   11480:	88c00054 	ori	r3,r17,1
   11484:	80c00115 	stw	r3,4(r16)
   11488:	8463883a 	add	r17,r16,r17
   1148c:	34400515 	stw	r17,20(r6)
   11490:	34400415 	stw	r17,16(r6)
   11494:	10c00054 	ori	r3,r2,1
   11498:	8a000315 	stw	r8,12(r17)
   1149c:	8a000215 	stw	r8,8(r17)
   114a0:	88c00115 	stw	r3,4(r17)
   114a4:	88a3883a 	add	r17,r17,r2
   114a8:	88800015 	stw	r2,0(r17)
   114ac:	9009883a 	mov	r4,r18
   114b0:	00137680 	call	13768 <__malloc_unlock>
   114b4:	80800204 	addi	r2,r16,8
   114b8:	003f3c06 	br	111ac <_malloc_r+0x2a4>
   114bc:	30c00117 	ldw	r3,4(r6)
   114c0:	003ee706 	br	11060 <_malloc_r+0x158>
   114c4:	5ac00044 	addi	r11,r11,1
   114c8:	588000cc 	andi	r2,r11,3
   114cc:	31800204 	addi	r6,r6,8
   114d0:	103efd1e 	bne	r2,zero,110c8 <_malloc_r+0x1c0>
   114d4:	00002406 	br	11568 <_malloc_r+0x660>
   114d8:	14000317 	ldw	r16,12(r2)
   114dc:	143f251e 	bne	r2,r16,11174 <_malloc_r+0x26c>
   114e0:	21000084 	addi	r4,r4,2
   114e4:	003ebc06 	br	10fd8 <_malloc_r+0xd0>
   114e8:	8085883a 	add	r2,r16,r2
   114ec:	10c00117 	ldw	r3,4(r2)
   114f0:	81000317 	ldw	r4,12(r16)
   114f4:	81400217 	ldw	r5,8(r16)
   114f8:	18c00054 	ori	r3,r3,1
   114fc:	10c00115 	stw	r3,4(r2)
   11500:	29000315 	stw	r4,12(r5)
   11504:	21400215 	stw	r5,8(r4)
   11508:	9009883a 	mov	r4,r18
   1150c:	00137680 	call	13768 <__malloc_unlock>
   11510:	80800204 	addi	r2,r16,8
   11514:	003f2506 	br	111ac <_malloc_r+0x2a4>
   11518:	12001704 	addi	r8,r2,92
   1151c:	11c016c4 	addi	r7,r2,91
   11520:	4209883a 	add	r4,r8,r8
   11524:	003e9606 	br	10f80 <_malloc_r+0x78>
   11528:	3804d1ba 	srli	r2,r7,6
   1152c:	11400e44 	addi	r5,r2,57
   11530:	10c00e04 	addi	r3,r2,56
   11534:	294b883a 	add	r5,r5,r5
   11538:	003fbc06 	br	1142c <_malloc_r+0x524>
   1153c:	84ff5926 	beq	r16,r19,112a4 <_malloc_r+0x39c>
   11540:	008000b4 	movhi	r2,2
   11544:	10811c04 	addi	r2,r2,1136
   11548:	14000217 	ldw	r16,8(r2)
   1154c:	00bfff04 	movi	r2,-4
   11550:	80c00117 	ldw	r3,4(r16)
   11554:	1886703a 	and	r3,r3,r2
   11558:	003f9106 	br	113a0 <_malloc_r+0x498>
   1155c:	60800217 	ldw	r2,8(r12)
   11560:	213fffc4 	addi	r4,r4,-1
   11564:	1300651e 	bne	r2,r12,116fc <_malloc_r+0x7f4>
   11568:	208000cc 	andi	r2,r4,3
   1156c:	633ffe04 	addi	r12,r12,-8
   11570:	103ffa1e 	bne	r2,zero,1155c <_malloc_r+0x654>
   11574:	98800117 	ldw	r2,4(r19)
   11578:	0146303a 	nor	r3,zero,r5
   1157c:	1884703a 	and	r2,r3,r2
   11580:	98800115 	stw	r2,4(r19)
   11584:	294b883a 	add	r5,r5,r5
   11588:	117f2836 	bltu	r2,r5,1122c <_malloc_r+0x324>
   1158c:	283f2726 	beq	r5,zero,1122c <_malloc_r+0x324>
   11590:	2886703a 	and	r3,r5,r2
   11594:	5809883a 	mov	r4,r11
   11598:	183ec31e 	bne	r3,zero,110a8 <_malloc_r+0x1a0>
   1159c:	294b883a 	add	r5,r5,r5
   115a0:	2886703a 	and	r3,r5,r2
   115a4:	21000104 	addi	r4,r4,4
   115a8:	183ffc26 	beq	r3,zero,1159c <_malloc_r+0x694>
   115ac:	003ebe06 	br	110a8 <_malloc_r+0x1a0>
   115b0:	00c05504 	movi	r3,340
   115b4:	18801236 	bltu	r3,r2,11600 <_malloc_r+0x6f8>
   115b8:	8804d3fa 	srli	r2,r17,15
   115bc:	12001e04 	addi	r8,r2,120
   115c0:	11c01dc4 	addi	r7,r2,119
   115c4:	4209883a 	add	r4,r8,r8
   115c8:	003e6d06 	br	10f80 <_malloc_r+0x78>
   115cc:	00c40004 	movi	r3,4096
   115d0:	003f4606 	br	112ec <_malloc_r+0x3e4>
   115d4:	00800044 	movi	r2,1
   115d8:	a0800115 	stw	r2,4(r20)
   115dc:	003f7406 	br	113b0 <_malloc_r+0x4a8>
   115e0:	1805d0ba 	srai	r2,r3,2
   115e4:	01c00044 	movi	r7,1
   115e8:	30c00117 	ldw	r3,4(r6)
   115ec:	388e983a 	sll	r7,r7,r2
   115f0:	2805883a 	mov	r2,r5
   115f4:	38c6b03a 	or	r3,r7,r3
   115f8:	30c00115 	stw	r3,4(r6)
   115fc:	003f9b06 	br	1146c <_malloc_r+0x564>
   11600:	00c15504 	movi	r3,1364
   11604:	18801a36 	bltu	r3,r2,11670 <_malloc_r+0x768>
   11608:	8804d4ba 	srli	r2,r17,18
   1160c:	12001f44 	addi	r8,r2,125
   11610:	11c01f04 	addi	r7,r2,124
   11614:	4209883a 	add	r4,r8,r8
   11618:	003e5906 	br	10f80 <_malloc_r+0x78>
   1161c:	ad400404 	addi	r21,r21,16
   11620:	003f1706 	br	11280 <_malloc_r+0x378>
   11624:	00c01504 	movi	r3,84
   11628:	18802336 	bltu	r3,r2,116b8 <_malloc_r+0x7b0>
   1162c:	3804d33a 	srli	r2,r7,12
   11630:	11401bc4 	addi	r5,r2,111
   11634:	10c01b84 	addi	r3,r2,110
   11638:	294b883a 	add	r5,r5,r5
   1163c:	003f7b06 	br	1142c <_malloc_r+0x524>
   11640:	9c000217 	ldw	r16,8(r19)
   11644:	00bfff04 	movi	r2,-4
   11648:	80c00117 	ldw	r3,4(r16)
   1164c:	1886703a 	and	r3,r3,r2
   11650:	003f5306 	br	113a0 <_malloc_r+0x498>
   11654:	3083ffcc 	andi	r2,r6,4095
   11658:	103f181e 	bne	r2,zero,112bc <_malloc_r+0x3b4>
   1165c:	99000217 	ldw	r4,8(r19)
   11660:	b545883a 	add	r2,r22,r21
   11664:	10800054 	ori	r2,r2,1
   11668:	20800115 	stw	r2,4(r4)
   1166c:	003f3e06 	br	11368 <_malloc_r+0x460>
   11670:	01003f84 	movi	r4,254
   11674:	02001fc4 	movi	r8,127
   11678:	01c01f84 	movi	r7,126
   1167c:	003e4006 	br	10f80 <_malloc_r+0x78>
   11680:	008000b4 	movhi	r2,2
   11684:	1086a204 	addi	r2,r2,6792
   11688:	15000015 	stw	r20,0(r2)
   1168c:	003f1106 	br	112d4 <_malloc_r+0x3cc>
   11690:	00800044 	movi	r2,1
   11694:	002b883a 	mov	r21,zero
   11698:	003f1f06 	br	11318 <_malloc_r+0x410>
   1169c:	81400204 	addi	r5,r16,8
   116a0:	9009883a 	mov	r4,r18
   116a4:	00129900 	call	12990 <_free_r>
   116a8:	008000b4 	movhi	r2,2
   116ac:	1086b904 	addi	r2,r2,6884
   116b0:	10c00017 	ldw	r3,0(r2)
   116b4:	003f2c06 	br	11368 <_malloc_r+0x460>
   116b8:	00c05504 	movi	r3,340
   116bc:	18800536 	bltu	r3,r2,116d4 <_malloc_r+0x7cc>
   116c0:	3804d3fa 	srli	r2,r7,15
   116c4:	11401e04 	addi	r5,r2,120
   116c8:	10c01dc4 	addi	r3,r2,119
   116cc:	294b883a 	add	r5,r5,r5
   116d0:	003f5606 	br	1142c <_malloc_r+0x524>
   116d4:	00c15504 	movi	r3,1364
   116d8:	18800536 	bltu	r3,r2,116f0 <_malloc_r+0x7e8>
   116dc:	3804d4ba 	srli	r2,r7,18
   116e0:	11401f44 	addi	r5,r2,125
   116e4:	10c01f04 	addi	r3,r2,124
   116e8:	294b883a 	add	r5,r5,r5
   116ec:	003f4f06 	br	1142c <_malloc_r+0x524>
   116f0:	01403f84 	movi	r5,254
   116f4:	00c01f84 	movi	r3,126
   116f8:	003f4c06 	br	1142c <_malloc_r+0x524>
   116fc:	98800117 	ldw	r2,4(r19)
   11700:	003fa006 	br	11584 <_malloc_r+0x67c>
   11704:	8808d0fa 	srli	r4,r17,3
   11708:	20800044 	addi	r2,r4,1
   1170c:	1085883a 	add	r2,r2,r2
   11710:	003e9006 	br	11154 <_malloc_r+0x24c>

00011714 <memchr>:
   11714:	208000cc 	andi	r2,r4,3
   11718:	280f883a 	mov	r7,r5
   1171c:	10003426 	beq	r2,zero,117f0 <memchr+0xdc>
   11720:	30bfffc4 	addi	r2,r6,-1
   11724:	30001a26 	beq	r6,zero,11790 <memchr+0x7c>
   11728:	20c00003 	ldbu	r3,0(r4)
   1172c:	29803fcc 	andi	r6,r5,255
   11730:	30c0051e 	bne	r6,r3,11748 <memchr+0x34>
   11734:	00001806 	br	11798 <memchr+0x84>
   11738:	10001526 	beq	r2,zero,11790 <memchr+0x7c>
   1173c:	20c00003 	ldbu	r3,0(r4)
   11740:	10bfffc4 	addi	r2,r2,-1
   11744:	30c01426 	beq	r6,r3,11798 <memchr+0x84>
   11748:	21000044 	addi	r4,r4,1
   1174c:	20c000cc 	andi	r3,r4,3
   11750:	183ff91e 	bne	r3,zero,11738 <memchr+0x24>
   11754:	020000c4 	movi	r8,3
   11758:	40801136 	bltu	r8,r2,117a0 <memchr+0x8c>
   1175c:	10000c26 	beq	r2,zero,11790 <memchr+0x7c>
   11760:	20c00003 	ldbu	r3,0(r4)
   11764:	29403fcc 	andi	r5,r5,255
   11768:	28c00b26 	beq	r5,r3,11798 <memchr+0x84>
   1176c:	20c00044 	addi	r3,r4,1
   11770:	39803fcc 	andi	r6,r7,255
   11774:	2089883a 	add	r4,r4,r2
   11778:	00000306 	br	11788 <memchr+0x74>
   1177c:	18c00044 	addi	r3,r3,1
   11780:	197fffc3 	ldbu	r5,-1(r3)
   11784:	31400526 	beq	r6,r5,1179c <memchr+0x88>
   11788:	1805883a 	mov	r2,r3
   1178c:	20fffb1e 	bne	r4,r3,1177c <memchr+0x68>
   11790:	0005883a 	mov	r2,zero
   11794:	f800283a 	ret
   11798:	2005883a 	mov	r2,r4
   1179c:	f800283a 	ret
   117a0:	28c03fcc 	andi	r3,r5,255
   117a4:	1812923a 	slli	r9,r3,8
   117a8:	02ffbff4 	movhi	r11,65279
   117ac:	02a02074 	movhi	r10,32897
   117b0:	48d2b03a 	or	r9,r9,r3
   117b4:	4806943a 	slli	r3,r9,16
   117b8:	5affbfc4 	addi	r11,r11,-257
   117bc:	52a02004 	addi	r10,r10,-32640
   117c0:	48d2b03a 	or	r9,r9,r3
   117c4:	20c00017 	ldw	r3,0(r4)
   117c8:	48c6f03a 	xor	r3,r9,r3
   117cc:	1acd883a 	add	r6,r3,r11
   117d0:	00c6303a 	nor	r3,zero,r3
   117d4:	30c6703a 	and	r3,r6,r3
   117d8:	1a86703a 	and	r3,r3,r10
   117dc:	183fe01e 	bne	r3,zero,11760 <memchr+0x4c>
   117e0:	10bfff04 	addi	r2,r2,-4
   117e4:	21000104 	addi	r4,r4,4
   117e8:	40bff636 	bltu	r8,r2,117c4 <memchr+0xb0>
   117ec:	003fdb06 	br	1175c <memchr+0x48>
   117f0:	3005883a 	mov	r2,r6
   117f4:	003fd706 	br	11754 <memchr+0x40>

000117f8 <memcpy>:
   117f8:	defffd04 	addi	sp,sp,-12
   117fc:	dfc00215 	stw	ra,8(sp)
   11800:	dc400115 	stw	r17,4(sp)
   11804:	dc000015 	stw	r16,0(sp)
   11808:	00c003c4 	movi	r3,15
   1180c:	2005883a 	mov	r2,r4
   11810:	1980452e 	bgeu	r3,r6,11928 <memcpy+0x130>
   11814:	2906b03a 	or	r3,r5,r4
   11818:	18c000cc 	andi	r3,r3,3
   1181c:	1800441e 	bne	r3,zero,11930 <memcpy+0x138>
   11820:	347ffc04 	addi	r17,r6,-16
   11824:	8822d13a 	srli	r17,r17,4
   11828:	28c00104 	addi	r3,r5,4
   1182c:	23400104 	addi	r13,r4,4
   11830:	8820913a 	slli	r16,r17,4
   11834:	2b000204 	addi	r12,r5,8
   11838:	22c00204 	addi	r11,r4,8
   1183c:	84000504 	addi	r16,r16,20
   11840:	2a800304 	addi	r10,r5,12
   11844:	22400304 	addi	r9,r4,12
   11848:	2c21883a 	add	r16,r5,r16
   1184c:	2811883a 	mov	r8,r5
   11850:	200f883a 	mov	r7,r4
   11854:	41000017 	ldw	r4,0(r8)
   11858:	1fc00017 	ldw	ra,0(r3)
   1185c:	63c00017 	ldw	r15,0(r12)
   11860:	39000015 	stw	r4,0(r7)
   11864:	53800017 	ldw	r14,0(r10)
   11868:	6fc00015 	stw	ra,0(r13)
   1186c:	5bc00015 	stw	r15,0(r11)
   11870:	4b800015 	stw	r14,0(r9)
   11874:	18c00404 	addi	r3,r3,16
   11878:	39c00404 	addi	r7,r7,16
   1187c:	42000404 	addi	r8,r8,16
   11880:	6b400404 	addi	r13,r13,16
   11884:	63000404 	addi	r12,r12,16
   11888:	5ac00404 	addi	r11,r11,16
   1188c:	52800404 	addi	r10,r10,16
   11890:	4a400404 	addi	r9,r9,16
   11894:	1c3fef1e 	bne	r3,r16,11854 <memcpy+0x5c>
   11898:	89c00044 	addi	r7,r17,1
   1189c:	380e913a 	slli	r7,r7,4
   118a0:	310003cc 	andi	r4,r6,15
   118a4:	02c000c4 	movi	r11,3
   118a8:	11c7883a 	add	r3,r2,r7
   118ac:	29cb883a 	add	r5,r5,r7
   118b0:	5900212e 	bgeu	r11,r4,11938 <memcpy+0x140>
   118b4:	1813883a 	mov	r9,r3
   118b8:	2811883a 	mov	r8,r5
   118bc:	200f883a 	mov	r7,r4
   118c0:	42800017 	ldw	r10,0(r8)
   118c4:	4a400104 	addi	r9,r9,4
   118c8:	39ffff04 	addi	r7,r7,-4
   118cc:	4abfff15 	stw	r10,-4(r9)
   118d0:	42000104 	addi	r8,r8,4
   118d4:	59fffa36 	bltu	r11,r7,118c0 <memcpy+0xc8>
   118d8:	213fff04 	addi	r4,r4,-4
   118dc:	2008d0ba 	srli	r4,r4,2
   118e0:	318000cc 	andi	r6,r6,3
   118e4:	21000044 	addi	r4,r4,1
   118e8:	2109883a 	add	r4,r4,r4
   118ec:	2109883a 	add	r4,r4,r4
   118f0:	1907883a 	add	r3,r3,r4
   118f4:	290b883a 	add	r5,r5,r4
   118f8:	30000626 	beq	r6,zero,11914 <memcpy+0x11c>
   118fc:	198d883a 	add	r6,r3,r6
   11900:	29c00003 	ldbu	r7,0(r5)
   11904:	18c00044 	addi	r3,r3,1
   11908:	29400044 	addi	r5,r5,1
   1190c:	19ffffc5 	stb	r7,-1(r3)
   11910:	19bffb1e 	bne	r3,r6,11900 <memcpy+0x108>
   11914:	dfc00217 	ldw	ra,8(sp)
   11918:	dc400117 	ldw	r17,4(sp)
   1191c:	dc000017 	ldw	r16,0(sp)
   11920:	dec00304 	addi	sp,sp,12
   11924:	f800283a 	ret
   11928:	2007883a 	mov	r3,r4
   1192c:	003ff206 	br	118f8 <memcpy+0x100>
   11930:	2007883a 	mov	r3,r4
   11934:	003ff106 	br	118fc <memcpy+0x104>
   11938:	200d883a 	mov	r6,r4
   1193c:	003fee06 	br	118f8 <memcpy+0x100>

00011940 <memmove>:
   11940:	2005883a 	mov	r2,r4
   11944:	29000b2e 	bgeu	r5,r4,11974 <memmove+0x34>
   11948:	298f883a 	add	r7,r5,r6
   1194c:	21c0092e 	bgeu	r4,r7,11974 <memmove+0x34>
   11950:	2187883a 	add	r3,r4,r6
   11954:	198bc83a 	sub	r5,r3,r6
   11958:	30004826 	beq	r6,zero,11a7c <memmove+0x13c>
   1195c:	39ffffc4 	addi	r7,r7,-1
   11960:	39000003 	ldbu	r4,0(r7)
   11964:	18ffffc4 	addi	r3,r3,-1
   11968:	19000005 	stb	r4,0(r3)
   1196c:	28fffb1e 	bne	r5,r3,1195c <memmove+0x1c>
   11970:	f800283a 	ret
   11974:	00c003c4 	movi	r3,15
   11978:	1980412e 	bgeu	r3,r6,11a80 <memmove+0x140>
   1197c:	2886b03a 	or	r3,r5,r2
   11980:	18c000cc 	andi	r3,r3,3
   11984:	1800401e 	bne	r3,zero,11a88 <memmove+0x148>
   11988:	33fffc04 	addi	r15,r6,-16
   1198c:	781ed13a 	srli	r15,r15,4
   11990:	28c00104 	addi	r3,r5,4
   11994:	13400104 	addi	r13,r2,4
   11998:	781c913a 	slli	r14,r15,4
   1199c:	2b000204 	addi	r12,r5,8
   119a0:	12c00204 	addi	r11,r2,8
   119a4:	73800504 	addi	r14,r14,20
   119a8:	2a800304 	addi	r10,r5,12
   119ac:	12400304 	addi	r9,r2,12
   119b0:	2b9d883a 	add	r14,r5,r14
   119b4:	2811883a 	mov	r8,r5
   119b8:	100f883a 	mov	r7,r2
   119bc:	41000017 	ldw	r4,0(r8)
   119c0:	39c00404 	addi	r7,r7,16
   119c4:	18c00404 	addi	r3,r3,16
   119c8:	393ffc15 	stw	r4,-16(r7)
   119cc:	193ffc17 	ldw	r4,-16(r3)
   119d0:	6b400404 	addi	r13,r13,16
   119d4:	5ac00404 	addi	r11,r11,16
   119d8:	693ffc15 	stw	r4,-16(r13)
   119dc:	61000017 	ldw	r4,0(r12)
   119e0:	4a400404 	addi	r9,r9,16
   119e4:	42000404 	addi	r8,r8,16
   119e8:	593ffc15 	stw	r4,-16(r11)
   119ec:	51000017 	ldw	r4,0(r10)
   119f0:	63000404 	addi	r12,r12,16
   119f4:	52800404 	addi	r10,r10,16
   119f8:	493ffc15 	stw	r4,-16(r9)
   119fc:	1bbfef1e 	bne	r3,r14,119bc <memmove+0x7c>
   11a00:	79000044 	addi	r4,r15,1
   11a04:	2008913a 	slli	r4,r4,4
   11a08:	328003cc 	andi	r10,r6,15
   11a0c:	02c000c4 	movi	r11,3
   11a10:	1107883a 	add	r3,r2,r4
   11a14:	290b883a 	add	r5,r5,r4
   11a18:	5a801e2e 	bgeu	r11,r10,11a94 <memmove+0x154>
   11a1c:	1813883a 	mov	r9,r3
   11a20:	2811883a 	mov	r8,r5
   11a24:	500f883a 	mov	r7,r10
   11a28:	41000017 	ldw	r4,0(r8)
   11a2c:	4a400104 	addi	r9,r9,4
   11a30:	39ffff04 	addi	r7,r7,-4
   11a34:	493fff15 	stw	r4,-4(r9)
   11a38:	42000104 	addi	r8,r8,4
   11a3c:	59fffa36 	bltu	r11,r7,11a28 <memmove+0xe8>
   11a40:	513fff04 	addi	r4,r10,-4
   11a44:	2008d0ba 	srli	r4,r4,2
   11a48:	318000cc 	andi	r6,r6,3
   11a4c:	21000044 	addi	r4,r4,1
   11a50:	2109883a 	add	r4,r4,r4
   11a54:	2109883a 	add	r4,r4,r4
   11a58:	1907883a 	add	r3,r3,r4
   11a5c:	290b883a 	add	r5,r5,r4
   11a60:	30000b26 	beq	r6,zero,11a90 <memmove+0x150>
   11a64:	198d883a 	add	r6,r3,r6
   11a68:	29c00003 	ldbu	r7,0(r5)
   11a6c:	18c00044 	addi	r3,r3,1
   11a70:	29400044 	addi	r5,r5,1
   11a74:	19ffffc5 	stb	r7,-1(r3)
   11a78:	19bffb1e 	bne	r3,r6,11a68 <memmove+0x128>
   11a7c:	f800283a 	ret
   11a80:	1007883a 	mov	r3,r2
   11a84:	003ff606 	br	11a60 <memmove+0x120>
   11a88:	1007883a 	mov	r3,r2
   11a8c:	003ff506 	br	11a64 <memmove+0x124>
   11a90:	f800283a 	ret
   11a94:	500d883a 	mov	r6,r10
   11a98:	003ff106 	br	11a60 <memmove+0x120>

00011a9c <memset>:
   11a9c:	20c000cc 	andi	r3,r4,3
   11aa0:	2005883a 	mov	r2,r4
   11aa4:	18004426 	beq	r3,zero,11bb8 <memset+0x11c>
   11aa8:	31ffffc4 	addi	r7,r6,-1
   11aac:	30004026 	beq	r6,zero,11bb0 <memset+0x114>
   11ab0:	2813883a 	mov	r9,r5
   11ab4:	200d883a 	mov	r6,r4
   11ab8:	2007883a 	mov	r3,r4
   11abc:	00000406 	br	11ad0 <memset+0x34>
   11ac0:	3a3fffc4 	addi	r8,r7,-1
   11ac4:	31800044 	addi	r6,r6,1
   11ac8:	38003926 	beq	r7,zero,11bb0 <memset+0x114>
   11acc:	400f883a 	mov	r7,r8
   11ad0:	18c00044 	addi	r3,r3,1
   11ad4:	32400005 	stb	r9,0(r6)
   11ad8:	1a0000cc 	andi	r8,r3,3
   11adc:	403ff81e 	bne	r8,zero,11ac0 <memset+0x24>
   11ae0:	010000c4 	movi	r4,3
   11ae4:	21c02d2e 	bgeu	r4,r7,11b9c <memset+0x100>
   11ae8:	29003fcc 	andi	r4,r5,255
   11aec:	200c923a 	slli	r6,r4,8
   11af0:	3108b03a 	or	r4,r6,r4
   11af4:	200c943a 	slli	r6,r4,16
   11af8:	218cb03a 	or	r6,r4,r6
   11afc:	010003c4 	movi	r4,15
   11b00:	21c0182e 	bgeu	r4,r7,11b64 <memset+0xc8>
   11b04:	3b3ffc04 	addi	r12,r7,-16
   11b08:	6018d13a 	srli	r12,r12,4
   11b0c:	1a000104 	addi	r8,r3,4
   11b10:	1ac00204 	addi	r11,r3,8
   11b14:	6008913a 	slli	r4,r12,4
   11b18:	1a800304 	addi	r10,r3,12
   11b1c:	1813883a 	mov	r9,r3
   11b20:	21000504 	addi	r4,r4,20
   11b24:	1909883a 	add	r4,r3,r4
   11b28:	49800015 	stw	r6,0(r9)
   11b2c:	41800015 	stw	r6,0(r8)
   11b30:	59800015 	stw	r6,0(r11)
   11b34:	51800015 	stw	r6,0(r10)
   11b38:	42000404 	addi	r8,r8,16
   11b3c:	4a400404 	addi	r9,r9,16
   11b40:	5ac00404 	addi	r11,r11,16
   11b44:	52800404 	addi	r10,r10,16
   11b48:	413ff71e 	bne	r8,r4,11b28 <memset+0x8c>
   11b4c:	63000044 	addi	r12,r12,1
   11b50:	6018913a 	slli	r12,r12,4
   11b54:	39c003cc 	andi	r7,r7,15
   11b58:	010000c4 	movi	r4,3
   11b5c:	1b07883a 	add	r3,r3,r12
   11b60:	21c00e2e 	bgeu	r4,r7,11b9c <memset+0x100>
   11b64:	1813883a 	mov	r9,r3
   11b68:	3811883a 	mov	r8,r7
   11b6c:	010000c4 	movi	r4,3
   11b70:	49800015 	stw	r6,0(r9)
   11b74:	423fff04 	addi	r8,r8,-4
   11b78:	4a400104 	addi	r9,r9,4
   11b7c:	223ffc36 	bltu	r4,r8,11b70 <memset+0xd4>
   11b80:	393fff04 	addi	r4,r7,-4
   11b84:	2008d0ba 	srli	r4,r4,2
   11b88:	39c000cc 	andi	r7,r7,3
   11b8c:	21000044 	addi	r4,r4,1
   11b90:	2109883a 	add	r4,r4,r4
   11b94:	2109883a 	add	r4,r4,r4
   11b98:	1907883a 	add	r3,r3,r4
   11b9c:	38000526 	beq	r7,zero,11bb4 <memset+0x118>
   11ba0:	19cf883a 	add	r7,r3,r7
   11ba4:	19400005 	stb	r5,0(r3)
   11ba8:	18c00044 	addi	r3,r3,1
   11bac:	38fffd1e 	bne	r7,r3,11ba4 <memset+0x108>
   11bb0:	f800283a 	ret
   11bb4:	f800283a 	ret
   11bb8:	2007883a 	mov	r3,r4
   11bbc:	300f883a 	mov	r7,r6
   11bc0:	003fc706 	br	11ae0 <memset+0x44>

00011bc4 <_realloc_r>:
   11bc4:	defff604 	addi	sp,sp,-40
   11bc8:	dc800215 	stw	r18,8(sp)
   11bcc:	dfc00915 	stw	ra,36(sp)
   11bd0:	df000815 	stw	fp,32(sp)
   11bd4:	ddc00715 	stw	r23,28(sp)
   11bd8:	dd800615 	stw	r22,24(sp)
   11bdc:	dd400515 	stw	r21,20(sp)
   11be0:	dd000415 	stw	r20,16(sp)
   11be4:	dcc00315 	stw	r19,12(sp)
   11be8:	dc400115 	stw	r17,4(sp)
   11bec:	dc000015 	stw	r16,0(sp)
   11bf0:	3025883a 	mov	r18,r6
   11bf4:	2800b726 	beq	r5,zero,11ed4 <_realloc_r+0x310>
   11bf8:	282b883a 	mov	r21,r5
   11bfc:	2029883a 	mov	r20,r4
   11c00:	00137440 	call	13744 <__malloc_lock>
   11c04:	a8bfff17 	ldw	r2,-4(r21)
   11c08:	043fff04 	movi	r16,-4
   11c0c:	90c002c4 	addi	r3,r18,11
   11c10:	01000584 	movi	r4,22
   11c14:	acfffe04 	addi	r19,r21,-8
   11c18:	1420703a 	and	r16,r2,r16
   11c1c:	20c0332e 	bgeu	r4,r3,11cec <_realloc_r+0x128>
   11c20:	047ffe04 	movi	r17,-8
   11c24:	1c62703a 	and	r17,r3,r17
   11c28:	8807883a 	mov	r3,r17
   11c2c:	88005816 	blt	r17,zero,11d90 <_realloc_r+0x1cc>
   11c30:	8c805736 	bltu	r17,r18,11d90 <_realloc_r+0x1cc>
   11c34:	80c0300e 	bge	r16,r3,11cf8 <_realloc_r+0x134>
   11c38:	070000b4 	movhi	fp,2
   11c3c:	e7011c04 	addi	fp,fp,1136
   11c40:	e1c00217 	ldw	r7,8(fp)
   11c44:	9c09883a 	add	r4,r19,r16
   11c48:	22000117 	ldw	r8,4(r4)
   11c4c:	21c06326 	beq	r4,r7,11ddc <_realloc_r+0x218>
   11c50:	017fff84 	movi	r5,-2
   11c54:	414a703a 	and	r5,r8,r5
   11c58:	214b883a 	add	r5,r4,r5
   11c5c:	29800117 	ldw	r6,4(r5)
   11c60:	3180004c 	andi	r6,r6,1
   11c64:	30003f26 	beq	r6,zero,11d64 <_realloc_r+0x1a0>
   11c68:	1080004c 	andi	r2,r2,1
   11c6c:	10008326 	beq	r2,zero,11e7c <_realloc_r+0x2b8>
   11c70:	900b883a 	mov	r5,r18
   11c74:	a009883a 	mov	r4,r20
   11c78:	0010f080 	call	10f08 <_malloc_r>
   11c7c:	1025883a 	mov	r18,r2
   11c80:	10011e26 	beq	r2,zero,120fc <_realloc_r+0x538>
   11c84:	a93fff17 	ldw	r4,-4(r21)
   11c88:	10fffe04 	addi	r3,r2,-8
   11c8c:	00bfff84 	movi	r2,-2
   11c90:	2084703a 	and	r2,r4,r2
   11c94:	9885883a 	add	r2,r19,r2
   11c98:	1880ee26 	beq	r3,r2,12054 <_realloc_r+0x490>
   11c9c:	81bfff04 	addi	r6,r16,-4
   11ca0:	00800904 	movi	r2,36
   11ca4:	1180b836 	bltu	r2,r6,11f88 <_realloc_r+0x3c4>
   11ca8:	00c004c4 	movi	r3,19
   11cac:	19809636 	bltu	r3,r6,11f08 <_realloc_r+0x344>
   11cb0:	9005883a 	mov	r2,r18
   11cb4:	a807883a 	mov	r3,r21
   11cb8:	19000017 	ldw	r4,0(r3)
   11cbc:	11000015 	stw	r4,0(r2)
   11cc0:	19000117 	ldw	r4,4(r3)
   11cc4:	11000115 	stw	r4,4(r2)
   11cc8:	18c00217 	ldw	r3,8(r3)
   11ccc:	10c00215 	stw	r3,8(r2)
   11cd0:	a80b883a 	mov	r5,r21
   11cd4:	a009883a 	mov	r4,r20
   11cd8:	00129900 	call	12990 <_free_r>
   11cdc:	a009883a 	mov	r4,r20
   11ce0:	00137680 	call	13768 <__malloc_unlock>
   11ce4:	9005883a 	mov	r2,r18
   11ce8:	00001206 	br	11d34 <_realloc_r+0x170>
   11cec:	00c00404 	movi	r3,16
   11cf0:	1823883a 	mov	r17,r3
   11cf4:	003fce06 	br	11c30 <_realloc_r+0x6c>
   11cf8:	a825883a 	mov	r18,r21
   11cfc:	8445c83a 	sub	r2,r16,r17
   11d00:	00c003c4 	movi	r3,15
   11d04:	18802636 	bltu	r3,r2,11da0 <_realloc_r+0x1dc>
   11d08:	99800117 	ldw	r6,4(r19)
   11d0c:	9c07883a 	add	r3,r19,r16
   11d10:	3180004c 	andi	r6,r6,1
   11d14:	3420b03a 	or	r16,r6,r16
   11d18:	9c000115 	stw	r16,4(r19)
   11d1c:	18800117 	ldw	r2,4(r3)
   11d20:	10800054 	ori	r2,r2,1
   11d24:	18800115 	stw	r2,4(r3)
   11d28:	a009883a 	mov	r4,r20
   11d2c:	00137680 	call	13768 <__malloc_unlock>
   11d30:	9005883a 	mov	r2,r18
   11d34:	dfc00917 	ldw	ra,36(sp)
   11d38:	df000817 	ldw	fp,32(sp)
   11d3c:	ddc00717 	ldw	r23,28(sp)
   11d40:	dd800617 	ldw	r22,24(sp)
   11d44:	dd400517 	ldw	r21,20(sp)
   11d48:	dd000417 	ldw	r20,16(sp)
   11d4c:	dcc00317 	ldw	r19,12(sp)
   11d50:	dc800217 	ldw	r18,8(sp)
   11d54:	dc400117 	ldw	r17,4(sp)
   11d58:	dc000017 	ldw	r16,0(sp)
   11d5c:	dec00a04 	addi	sp,sp,40
   11d60:	f800283a 	ret
   11d64:	017fff04 	movi	r5,-4
   11d68:	414a703a 	and	r5,r8,r5
   11d6c:	814d883a 	add	r6,r16,r5
   11d70:	30c01f16 	blt	r6,r3,11df0 <_realloc_r+0x22c>
   11d74:	20800317 	ldw	r2,12(r4)
   11d78:	20c00217 	ldw	r3,8(r4)
   11d7c:	a825883a 	mov	r18,r21
   11d80:	3021883a 	mov	r16,r6
   11d84:	18800315 	stw	r2,12(r3)
   11d88:	10c00215 	stw	r3,8(r2)
   11d8c:	003fdb06 	br	11cfc <_realloc_r+0x138>
   11d90:	00800304 	movi	r2,12
   11d94:	a0800015 	stw	r2,0(r20)
   11d98:	0005883a 	mov	r2,zero
   11d9c:	003fe506 	br	11d34 <_realloc_r+0x170>
   11da0:	98c00117 	ldw	r3,4(r19)
   11da4:	9c4b883a 	add	r5,r19,r17
   11da8:	11000054 	ori	r4,r2,1
   11dac:	18c0004c 	andi	r3,r3,1
   11db0:	1c62b03a 	or	r17,r3,r17
   11db4:	9c400115 	stw	r17,4(r19)
   11db8:	29000115 	stw	r4,4(r5)
   11dbc:	2885883a 	add	r2,r5,r2
   11dc0:	10c00117 	ldw	r3,4(r2)
   11dc4:	29400204 	addi	r5,r5,8
   11dc8:	a009883a 	mov	r4,r20
   11dcc:	18c00054 	ori	r3,r3,1
   11dd0:	10c00115 	stw	r3,4(r2)
   11dd4:	00129900 	call	12990 <_free_r>
   11dd8:	003fd306 	br	11d28 <_realloc_r+0x164>
   11ddc:	017fff04 	movi	r5,-4
   11de0:	414a703a 	and	r5,r8,r5
   11de4:	89800404 	addi	r6,r17,16
   11de8:	8151883a 	add	r8,r16,r5
   11dec:	4180590e 	bge	r8,r6,11f54 <_realloc_r+0x390>
   11df0:	1080004c 	andi	r2,r2,1
   11df4:	103f9e1e 	bne	r2,zero,11c70 <_realloc_r+0xac>
   11df8:	adbffe17 	ldw	r22,-8(r21)
   11dfc:	00bfff04 	movi	r2,-4
   11e00:	9dadc83a 	sub	r22,r19,r22
   11e04:	b1800117 	ldw	r6,4(r22)
   11e08:	3084703a 	and	r2,r6,r2
   11e0c:	20002026 	beq	r4,zero,11e90 <_realloc_r+0x2cc>
   11e10:	80af883a 	add	r23,r16,r2
   11e14:	b96f883a 	add	r23,r23,r5
   11e18:	21c05f26 	beq	r4,r7,11f98 <_realloc_r+0x3d4>
   11e1c:	b8c01c16 	blt	r23,r3,11e90 <_realloc_r+0x2cc>
   11e20:	20800317 	ldw	r2,12(r4)
   11e24:	20c00217 	ldw	r3,8(r4)
   11e28:	81bfff04 	addi	r6,r16,-4
   11e2c:	01000904 	movi	r4,36
   11e30:	18800315 	stw	r2,12(r3)
   11e34:	10c00215 	stw	r3,8(r2)
   11e38:	b0c00217 	ldw	r3,8(r22)
   11e3c:	b0800317 	ldw	r2,12(r22)
   11e40:	b4800204 	addi	r18,r22,8
   11e44:	18800315 	stw	r2,12(r3)
   11e48:	10c00215 	stw	r3,8(r2)
   11e4c:	21801b36 	bltu	r4,r6,11ebc <_realloc_r+0x2f8>
   11e50:	008004c4 	movi	r2,19
   11e54:	1180352e 	bgeu	r2,r6,11f2c <_realloc_r+0x368>
   11e58:	a8800017 	ldw	r2,0(r21)
   11e5c:	b0800215 	stw	r2,8(r22)
   11e60:	a8800117 	ldw	r2,4(r21)
   11e64:	b0800315 	stw	r2,12(r22)
   11e68:	008006c4 	movi	r2,27
   11e6c:	11807f36 	bltu	r2,r6,1206c <_realloc_r+0x4a8>
   11e70:	b0800404 	addi	r2,r22,16
   11e74:	ad400204 	addi	r21,r21,8
   11e78:	00002d06 	br	11f30 <_realloc_r+0x36c>
   11e7c:	adbffe17 	ldw	r22,-8(r21)
   11e80:	00bfff04 	movi	r2,-4
   11e84:	9dadc83a 	sub	r22,r19,r22
   11e88:	b1000117 	ldw	r4,4(r22)
   11e8c:	2084703a 	and	r2,r4,r2
   11e90:	b03f7726 	beq	r22,zero,11c70 <_realloc_r+0xac>
   11e94:	80af883a 	add	r23,r16,r2
   11e98:	b8ff7516 	blt	r23,r3,11c70 <_realloc_r+0xac>
   11e9c:	b0800317 	ldw	r2,12(r22)
   11ea0:	b0c00217 	ldw	r3,8(r22)
   11ea4:	81bfff04 	addi	r6,r16,-4
   11ea8:	01000904 	movi	r4,36
   11eac:	18800315 	stw	r2,12(r3)
   11eb0:	10c00215 	stw	r3,8(r2)
   11eb4:	b4800204 	addi	r18,r22,8
   11eb8:	21bfe52e 	bgeu	r4,r6,11e50 <_realloc_r+0x28c>
   11ebc:	a80b883a 	mov	r5,r21
   11ec0:	9009883a 	mov	r4,r18
   11ec4:	00119400 	call	11940 <memmove>
   11ec8:	b821883a 	mov	r16,r23
   11ecc:	b027883a 	mov	r19,r22
   11ed0:	003f8a06 	br	11cfc <_realloc_r+0x138>
   11ed4:	300b883a 	mov	r5,r6
   11ed8:	dfc00917 	ldw	ra,36(sp)
   11edc:	df000817 	ldw	fp,32(sp)
   11ee0:	ddc00717 	ldw	r23,28(sp)
   11ee4:	dd800617 	ldw	r22,24(sp)
   11ee8:	dd400517 	ldw	r21,20(sp)
   11eec:	dd000417 	ldw	r20,16(sp)
   11ef0:	dcc00317 	ldw	r19,12(sp)
   11ef4:	dc800217 	ldw	r18,8(sp)
   11ef8:	dc400117 	ldw	r17,4(sp)
   11efc:	dc000017 	ldw	r16,0(sp)
   11f00:	dec00a04 	addi	sp,sp,40
   11f04:	0010f081 	jmpi	10f08 <_malloc_r>
   11f08:	a8c00017 	ldw	r3,0(r21)
   11f0c:	90c00015 	stw	r3,0(r18)
   11f10:	a8c00117 	ldw	r3,4(r21)
   11f14:	90c00115 	stw	r3,4(r18)
   11f18:	00c006c4 	movi	r3,27
   11f1c:	19804536 	bltu	r3,r6,12034 <_realloc_r+0x470>
   11f20:	90800204 	addi	r2,r18,8
   11f24:	a8c00204 	addi	r3,r21,8
   11f28:	003f6306 	br	11cb8 <_realloc_r+0xf4>
   11f2c:	9005883a 	mov	r2,r18
   11f30:	a8c00017 	ldw	r3,0(r21)
   11f34:	b821883a 	mov	r16,r23
   11f38:	b027883a 	mov	r19,r22
   11f3c:	10c00015 	stw	r3,0(r2)
   11f40:	a8c00117 	ldw	r3,4(r21)
   11f44:	10c00115 	stw	r3,4(r2)
   11f48:	a8c00217 	ldw	r3,8(r21)
   11f4c:	10c00215 	stw	r3,8(r2)
   11f50:	003f6a06 	br	11cfc <_realloc_r+0x138>
   11f54:	9c67883a 	add	r19,r19,r17
   11f58:	4445c83a 	sub	r2,r8,r17
   11f5c:	e4c00215 	stw	r19,8(fp)
   11f60:	10800054 	ori	r2,r2,1
   11f64:	98800115 	stw	r2,4(r19)
   11f68:	a8bfff17 	ldw	r2,-4(r21)
   11f6c:	a009883a 	mov	r4,r20
   11f70:	1080004c 	andi	r2,r2,1
   11f74:	1462b03a 	or	r17,r2,r17
   11f78:	ac7fff15 	stw	r17,-4(r21)
   11f7c:	00137680 	call	13768 <__malloc_unlock>
   11f80:	a805883a 	mov	r2,r21
   11f84:	003f6b06 	br	11d34 <_realloc_r+0x170>
   11f88:	a80b883a 	mov	r5,r21
   11f8c:	9009883a 	mov	r4,r18
   11f90:	00119400 	call	11940 <memmove>
   11f94:	003f4e06 	br	11cd0 <_realloc_r+0x10c>
   11f98:	89000404 	addi	r4,r17,16
   11f9c:	b93fbc16 	blt	r23,r4,11e90 <_realloc_r+0x2cc>
   11fa0:	b0800317 	ldw	r2,12(r22)
   11fa4:	b0c00217 	ldw	r3,8(r22)
   11fa8:	81bfff04 	addi	r6,r16,-4
   11fac:	01000904 	movi	r4,36
   11fb0:	18800315 	stw	r2,12(r3)
   11fb4:	10c00215 	stw	r3,8(r2)
   11fb8:	b4800204 	addi	r18,r22,8
   11fbc:	21804336 	bltu	r4,r6,120cc <_realloc_r+0x508>
   11fc0:	008004c4 	movi	r2,19
   11fc4:	11803f2e 	bgeu	r2,r6,120c4 <_realloc_r+0x500>
   11fc8:	a8800017 	ldw	r2,0(r21)
   11fcc:	b0800215 	stw	r2,8(r22)
   11fd0:	a8800117 	ldw	r2,4(r21)
   11fd4:	b0800315 	stw	r2,12(r22)
   11fd8:	008006c4 	movi	r2,27
   11fdc:	11803f36 	bltu	r2,r6,120dc <_realloc_r+0x518>
   11fe0:	b0800404 	addi	r2,r22,16
   11fe4:	ad400204 	addi	r21,r21,8
   11fe8:	a8c00017 	ldw	r3,0(r21)
   11fec:	10c00015 	stw	r3,0(r2)
   11ff0:	a8c00117 	ldw	r3,4(r21)
   11ff4:	10c00115 	stw	r3,4(r2)
   11ff8:	a8c00217 	ldw	r3,8(r21)
   11ffc:	10c00215 	stw	r3,8(r2)
   12000:	b447883a 	add	r3,r22,r17
   12004:	bc45c83a 	sub	r2,r23,r17
   12008:	e0c00215 	stw	r3,8(fp)
   1200c:	10800054 	ori	r2,r2,1
   12010:	18800115 	stw	r2,4(r3)
   12014:	b0800117 	ldw	r2,4(r22)
   12018:	a009883a 	mov	r4,r20
   1201c:	1080004c 	andi	r2,r2,1
   12020:	1462b03a 	or	r17,r2,r17
   12024:	b4400115 	stw	r17,4(r22)
   12028:	00137680 	call	13768 <__malloc_unlock>
   1202c:	9005883a 	mov	r2,r18
   12030:	003f4006 	br	11d34 <_realloc_r+0x170>
   12034:	a8c00217 	ldw	r3,8(r21)
   12038:	90c00215 	stw	r3,8(r18)
   1203c:	a8c00317 	ldw	r3,12(r21)
   12040:	90c00315 	stw	r3,12(r18)
   12044:	30801126 	beq	r6,r2,1208c <_realloc_r+0x4c8>
   12048:	90800404 	addi	r2,r18,16
   1204c:	a8c00404 	addi	r3,r21,16
   12050:	003f1906 	br	11cb8 <_realloc_r+0xf4>
   12054:	90ffff17 	ldw	r3,-4(r18)
   12058:	00bfff04 	movi	r2,-4
   1205c:	a825883a 	mov	r18,r21
   12060:	1884703a 	and	r2,r3,r2
   12064:	80a1883a 	add	r16,r16,r2
   12068:	003f2406 	br	11cfc <_realloc_r+0x138>
   1206c:	a8800217 	ldw	r2,8(r21)
   12070:	b0800415 	stw	r2,16(r22)
   12074:	a8800317 	ldw	r2,12(r21)
   12078:	b0800515 	stw	r2,20(r22)
   1207c:	31000a26 	beq	r6,r4,120a8 <_realloc_r+0x4e4>
   12080:	b0800604 	addi	r2,r22,24
   12084:	ad400404 	addi	r21,r21,16
   12088:	003fa906 	br	11f30 <_realloc_r+0x36c>
   1208c:	a9000417 	ldw	r4,16(r21)
   12090:	90800604 	addi	r2,r18,24
   12094:	a8c00604 	addi	r3,r21,24
   12098:	91000415 	stw	r4,16(r18)
   1209c:	a9000517 	ldw	r4,20(r21)
   120a0:	91000515 	stw	r4,20(r18)
   120a4:	003f0406 	br	11cb8 <_realloc_r+0xf4>
   120a8:	a8c00417 	ldw	r3,16(r21)
   120ac:	ad400604 	addi	r21,r21,24
   120b0:	b0800804 	addi	r2,r22,32
   120b4:	b0c00615 	stw	r3,24(r22)
   120b8:	a8ffff17 	ldw	r3,-4(r21)
   120bc:	b0c00715 	stw	r3,28(r22)
   120c0:	003f9b06 	br	11f30 <_realloc_r+0x36c>
   120c4:	9005883a 	mov	r2,r18
   120c8:	003fc706 	br	11fe8 <_realloc_r+0x424>
   120cc:	a80b883a 	mov	r5,r21
   120d0:	9009883a 	mov	r4,r18
   120d4:	00119400 	call	11940 <memmove>
   120d8:	003fc906 	br	12000 <_realloc_r+0x43c>
   120dc:	a8800217 	ldw	r2,8(r21)
   120e0:	b0800415 	stw	r2,16(r22)
   120e4:	a8800317 	ldw	r2,12(r21)
   120e8:	b0800515 	stw	r2,20(r22)
   120ec:	31000726 	beq	r6,r4,1210c <_realloc_r+0x548>
   120f0:	b0800604 	addi	r2,r22,24
   120f4:	ad400404 	addi	r21,r21,16
   120f8:	003fbb06 	br	11fe8 <_realloc_r+0x424>
   120fc:	a009883a 	mov	r4,r20
   12100:	00137680 	call	13768 <__malloc_unlock>
   12104:	0005883a 	mov	r2,zero
   12108:	003f0a06 	br	11d34 <_realloc_r+0x170>
   1210c:	a8c00417 	ldw	r3,16(r21)
   12110:	ad400604 	addi	r21,r21,24
   12114:	b0800804 	addi	r2,r22,32
   12118:	b0c00615 	stw	r3,24(r22)
   1211c:	a8ffff17 	ldw	r3,-4(r21)
   12120:	b0c00715 	stw	r3,28(r22)
   12124:	003fb006 	br	11fe8 <_realloc_r+0x424>

00012128 <_sbrk_r>:
   12128:	defffd04 	addi	sp,sp,-12
   1212c:	dc000015 	stw	r16,0(sp)
   12130:	040000b4 	movhi	r16,2
   12134:	dc400115 	stw	r17,4(sp)
   12138:	8406b104 	addi	r16,r16,6852
   1213c:	2023883a 	mov	r17,r4
   12140:	2809883a 	mov	r4,r5
   12144:	dfc00215 	stw	ra,8(sp)
   12148:	80000015 	stw	zero,0(r16)
   1214c:	00139500 	call	13950 <sbrk>
   12150:	00ffffc4 	movi	r3,-1
   12154:	10c00526 	beq	r2,r3,1216c <_sbrk_r+0x44>
   12158:	dfc00217 	ldw	ra,8(sp)
   1215c:	dc400117 	ldw	r17,4(sp)
   12160:	dc000017 	ldw	r16,0(sp)
   12164:	dec00304 	addi	sp,sp,12
   12168:	f800283a 	ret
   1216c:	80c00017 	ldw	r3,0(r16)
   12170:	183ff926 	beq	r3,zero,12158 <_sbrk_r+0x30>
   12174:	88c00015 	stw	r3,0(r17)
   12178:	003ff706 	br	12158 <_sbrk_r+0x30>

0001217c <__sread>:
   1217c:	defffe04 	addi	sp,sp,-8
   12180:	dc000015 	stw	r16,0(sp)
   12184:	2821883a 	mov	r16,r5
   12188:	2940038f 	ldh	r5,14(r5)
   1218c:	dfc00115 	stw	ra,4(sp)
   12190:	0012ebc0 	call	12ebc <_read_r>
   12194:	10000716 	blt	r2,zero,121b4 <__sread+0x38>
   12198:	80c01417 	ldw	r3,80(r16)
   1219c:	1887883a 	add	r3,r3,r2
   121a0:	80c01415 	stw	r3,80(r16)
   121a4:	dfc00117 	ldw	ra,4(sp)
   121a8:	dc000017 	ldw	r16,0(sp)
   121ac:	dec00204 	addi	sp,sp,8
   121b0:	f800283a 	ret
   121b4:	80c0030b 	ldhu	r3,12(r16)
   121b8:	18fbffcc 	andi	r3,r3,61439
   121bc:	80c0030d 	sth	r3,12(r16)
   121c0:	dfc00117 	ldw	ra,4(sp)
   121c4:	dc000017 	ldw	r16,0(sp)
   121c8:	dec00204 	addi	sp,sp,8
   121cc:	f800283a 	ret

000121d0 <__seofread>:
   121d0:	0005883a 	mov	r2,zero
   121d4:	f800283a 	ret

000121d8 <__swrite>:
   121d8:	2880030b 	ldhu	r2,12(r5)
   121dc:	defffb04 	addi	sp,sp,-20
   121e0:	dcc00315 	stw	r19,12(sp)
   121e4:	dc800215 	stw	r18,8(sp)
   121e8:	dc400115 	stw	r17,4(sp)
   121ec:	dc000015 	stw	r16,0(sp)
   121f0:	dfc00415 	stw	ra,16(sp)
   121f4:	10c0400c 	andi	r3,r2,256
   121f8:	2821883a 	mov	r16,r5
   121fc:	2023883a 	mov	r17,r4
   12200:	3025883a 	mov	r18,r6
   12204:	3827883a 	mov	r19,r7
   12208:	18000526 	beq	r3,zero,12220 <__swrite+0x48>
   1220c:	2940038f 	ldh	r5,14(r5)
   12210:	01c00084 	movi	r7,2
   12214:	000d883a 	mov	r6,zero
   12218:	0012ca00 	call	12ca0 <_lseek_r>
   1221c:	8080030b 	ldhu	r2,12(r16)
   12220:	8140038f 	ldh	r5,14(r16)
   12224:	10bbffcc 	andi	r2,r2,61439
   12228:	980f883a 	mov	r7,r19
   1222c:	900d883a 	mov	r6,r18
   12230:	8809883a 	mov	r4,r17
   12234:	8080030d 	sth	r2,12(r16)
   12238:	dfc00417 	ldw	ra,16(sp)
   1223c:	dcc00317 	ldw	r19,12(sp)
   12240:	dc800217 	ldw	r18,8(sp)
   12244:	dc400117 	ldw	r17,4(sp)
   12248:	dc000017 	ldw	r16,0(sp)
   1224c:	dec00504 	addi	sp,sp,20
   12250:	00122b81 	jmpi	122b8 <_write_r>

00012254 <__sseek>:
   12254:	defffe04 	addi	sp,sp,-8
   12258:	dc000015 	stw	r16,0(sp)
   1225c:	2821883a 	mov	r16,r5
   12260:	2940038f 	ldh	r5,14(r5)
   12264:	dfc00115 	stw	ra,4(sp)
   12268:	0012ca00 	call	12ca0 <_lseek_r>
   1226c:	00ffffc4 	movi	r3,-1
   12270:	10c00826 	beq	r2,r3,12294 <__sseek+0x40>
   12274:	80c0030b 	ldhu	r3,12(r16)
   12278:	80801415 	stw	r2,80(r16)
   1227c:	18c40014 	ori	r3,r3,4096
   12280:	80c0030d 	sth	r3,12(r16)
   12284:	dfc00117 	ldw	ra,4(sp)
   12288:	dc000017 	ldw	r16,0(sp)
   1228c:	dec00204 	addi	sp,sp,8
   12290:	f800283a 	ret
   12294:	80c0030b 	ldhu	r3,12(r16)
   12298:	18fbffcc 	andi	r3,r3,61439
   1229c:	80c0030d 	sth	r3,12(r16)
   122a0:	dfc00117 	ldw	ra,4(sp)
   122a4:	dc000017 	ldw	r16,0(sp)
   122a8:	dec00204 	addi	sp,sp,8
   122ac:	f800283a 	ret

000122b0 <__sclose>:
   122b0:	2940038f 	ldh	r5,14(r5)
   122b4:	001246c1 	jmpi	1246c <_close_r>

000122b8 <_write_r>:
   122b8:	defffd04 	addi	sp,sp,-12
   122bc:	2805883a 	mov	r2,r5
   122c0:	dc000015 	stw	r16,0(sp)
   122c4:	040000b4 	movhi	r16,2
   122c8:	dc400115 	stw	r17,4(sp)
   122cc:	300b883a 	mov	r5,r6
   122d0:	8406b104 	addi	r16,r16,6852
   122d4:	2023883a 	mov	r17,r4
   122d8:	380d883a 	mov	r6,r7
   122dc:	1009883a 	mov	r4,r2
   122e0:	dfc00215 	stw	ra,8(sp)
   122e4:	80000015 	stw	zero,0(r16)
   122e8:	0013a6c0 	call	13a6c <write>
   122ec:	00ffffc4 	movi	r3,-1
   122f0:	10c00526 	beq	r2,r3,12308 <_write_r+0x50>
   122f4:	dfc00217 	ldw	ra,8(sp)
   122f8:	dc400117 	ldw	r17,4(sp)
   122fc:	dc000017 	ldw	r16,0(sp)
   12300:	dec00304 	addi	sp,sp,12
   12304:	f800283a 	ret
   12308:	80c00017 	ldw	r3,0(r16)
   1230c:	183ff926 	beq	r3,zero,122f4 <_write_r+0x3c>
   12310:	88c00015 	stw	r3,0(r17)
   12314:	003ff706 	br	122f4 <_write_r+0x3c>

00012318 <__swsetup_r>:
   12318:	008000b4 	movhi	r2,2
   1231c:	defffd04 	addi	sp,sp,-12
   12320:	1086a104 	addi	r2,r2,6788
   12324:	dc400115 	stw	r17,4(sp)
   12328:	2023883a 	mov	r17,r4
   1232c:	11000017 	ldw	r4,0(r2)
   12330:	dc000015 	stw	r16,0(sp)
   12334:	dfc00215 	stw	ra,8(sp)
   12338:	2821883a 	mov	r16,r5
   1233c:	20000226 	beq	r4,zero,12348 <__swsetup_r+0x30>
   12340:	20800e17 	ldw	r2,56(r4)
   12344:	10003126 	beq	r2,zero,1240c <__swsetup_r+0xf4>
   12348:	8080030b 	ldhu	r2,12(r16)
   1234c:	10c0020c 	andi	r3,r2,8
   12350:	1009883a 	mov	r4,r2
   12354:	18000f26 	beq	r3,zero,12394 <__swsetup_r+0x7c>
   12358:	80c00417 	ldw	r3,16(r16)
   1235c:	18001526 	beq	r3,zero,123b4 <__swsetup_r+0x9c>
   12360:	1100004c 	andi	r4,r2,1
   12364:	20001c1e 	bne	r4,zero,123d8 <__swsetup_r+0xc0>
   12368:	1080008c 	andi	r2,r2,2
   1236c:	1000291e 	bne	r2,zero,12414 <__swsetup_r+0xfc>
   12370:	80800517 	ldw	r2,20(r16)
   12374:	80800215 	stw	r2,8(r16)
   12378:	18001c26 	beq	r3,zero,123ec <__swsetup_r+0xd4>
   1237c:	0005883a 	mov	r2,zero
   12380:	dfc00217 	ldw	ra,8(sp)
   12384:	dc400117 	ldw	r17,4(sp)
   12388:	dc000017 	ldw	r16,0(sp)
   1238c:	dec00304 	addi	sp,sp,12
   12390:	f800283a 	ret
   12394:	2080040c 	andi	r2,r4,16
   12398:	10002e26 	beq	r2,zero,12454 <__swsetup_r+0x13c>
   1239c:	2080010c 	andi	r2,r4,4
   123a0:	10001e1e 	bne	r2,zero,1241c <__swsetup_r+0x104>
   123a4:	80c00417 	ldw	r3,16(r16)
   123a8:	20800214 	ori	r2,r4,8
   123ac:	8080030d 	sth	r2,12(r16)
   123b0:	183feb1e 	bne	r3,zero,12360 <__swsetup_r+0x48>
   123b4:	1100a00c 	andi	r4,r2,640
   123b8:	01408004 	movi	r5,512
   123bc:	217fe826 	beq	r4,r5,12360 <__swsetup_r+0x48>
   123c0:	800b883a 	mov	r5,r16
   123c4:	8809883a 	mov	r4,r17
   123c8:	0012d000 	call	12d00 <__smakebuf_r>
   123cc:	8080030b 	ldhu	r2,12(r16)
   123d0:	80c00417 	ldw	r3,16(r16)
   123d4:	003fe206 	br	12360 <__swsetup_r+0x48>
   123d8:	80800517 	ldw	r2,20(r16)
   123dc:	80000215 	stw	zero,8(r16)
   123e0:	0085c83a 	sub	r2,zero,r2
   123e4:	80800615 	stw	r2,24(r16)
   123e8:	183fe41e 	bne	r3,zero,1237c <__swsetup_r+0x64>
   123ec:	80c0030b 	ldhu	r3,12(r16)
   123f0:	0005883a 	mov	r2,zero
   123f4:	1900200c 	andi	r4,r3,128
   123f8:	203fe126 	beq	r4,zero,12380 <__swsetup_r+0x68>
   123fc:	18c01014 	ori	r3,r3,64
   12400:	80c0030d 	sth	r3,12(r16)
   12404:	00bfffc4 	movi	r2,-1
   12408:	003fdd06 	br	12380 <__swsetup_r+0x68>
   1240c:	00108680 	call	10868 <__sinit>
   12410:	003fcd06 	br	12348 <__swsetup_r+0x30>
   12414:	0005883a 	mov	r2,zero
   12418:	003fd606 	br	12374 <__swsetup_r+0x5c>
   1241c:	81400c17 	ldw	r5,48(r16)
   12420:	28000626 	beq	r5,zero,1243c <__swsetup_r+0x124>
   12424:	80801004 	addi	r2,r16,64
   12428:	28800326 	beq	r5,r2,12438 <__swsetup_r+0x120>
   1242c:	8809883a 	mov	r4,r17
   12430:	00129900 	call	12990 <_free_r>
   12434:	8100030b 	ldhu	r4,12(r16)
   12438:	80000c15 	stw	zero,48(r16)
   1243c:	80c00417 	ldw	r3,16(r16)
   12440:	00bff6c4 	movi	r2,-37
   12444:	1108703a 	and	r4,r2,r4
   12448:	80000115 	stw	zero,4(r16)
   1244c:	80c00015 	stw	r3,0(r16)
   12450:	003fd506 	br	123a8 <__swsetup_r+0x90>
   12454:	00800244 	movi	r2,9
   12458:	88800015 	stw	r2,0(r17)
   1245c:	20801014 	ori	r2,r4,64
   12460:	8080030d 	sth	r2,12(r16)
   12464:	00bfffc4 	movi	r2,-1
   12468:	003fc506 	br	12380 <__swsetup_r+0x68>

0001246c <_close_r>:
   1246c:	defffd04 	addi	sp,sp,-12
   12470:	dc000015 	stw	r16,0(sp)
   12474:	040000b4 	movhi	r16,2
   12478:	dc400115 	stw	r17,4(sp)
   1247c:	8406b104 	addi	r16,r16,6852
   12480:	2023883a 	mov	r17,r4
   12484:	2809883a 	mov	r4,r5
   12488:	dfc00215 	stw	ra,8(sp)
   1248c:	80000015 	stw	zero,0(r16)
   12490:	00131e40 	call	131e4 <close>
   12494:	00ffffc4 	movi	r3,-1
   12498:	10c00526 	beq	r2,r3,124b0 <_close_r+0x44>
   1249c:	dfc00217 	ldw	ra,8(sp)
   124a0:	dc400117 	ldw	r17,4(sp)
   124a4:	dc000017 	ldw	r16,0(sp)
   124a8:	dec00304 	addi	sp,sp,12
   124ac:	f800283a 	ret
   124b0:	80c00017 	ldw	r3,0(r16)
   124b4:	183ff926 	beq	r3,zero,1249c <_close_r+0x30>
   124b8:	88c00015 	stw	r3,0(r17)
   124bc:	003ff706 	br	1249c <_close_r+0x30>

000124c0 <_fclose_r>:
   124c0:	28003926 	beq	r5,zero,125a8 <_fclose_r+0xe8>
   124c4:	defffc04 	addi	sp,sp,-16
   124c8:	dc400115 	stw	r17,4(sp)
   124cc:	dc000015 	stw	r16,0(sp)
   124d0:	dfc00315 	stw	ra,12(sp)
   124d4:	dc800215 	stw	r18,8(sp)
   124d8:	2023883a 	mov	r17,r4
   124dc:	2821883a 	mov	r16,r5
   124e0:	20000226 	beq	r4,zero,124ec <_fclose_r+0x2c>
   124e4:	20800e17 	ldw	r2,56(r4)
   124e8:	10002726 	beq	r2,zero,12588 <_fclose_r+0xc8>
   124ec:	8080030f 	ldh	r2,12(r16)
   124f0:	1000071e 	bne	r2,zero,12510 <_fclose_r+0x50>
   124f4:	0005883a 	mov	r2,zero
   124f8:	dfc00317 	ldw	ra,12(sp)
   124fc:	dc800217 	ldw	r18,8(sp)
   12500:	dc400117 	ldw	r17,4(sp)
   12504:	dc000017 	ldw	r16,0(sp)
   12508:	dec00404 	addi	sp,sp,16
   1250c:	f800283a 	ret
   12510:	800b883a 	mov	r5,r16
   12514:	8809883a 	mov	r4,r17
   12518:	00125c40 	call	125c4 <__sflush_r>
   1251c:	1025883a 	mov	r18,r2
   12520:	80800b17 	ldw	r2,44(r16)
   12524:	10000426 	beq	r2,zero,12538 <_fclose_r+0x78>
   12528:	81400717 	ldw	r5,28(r16)
   1252c:	8809883a 	mov	r4,r17
   12530:	103ee83a 	callr	r2
   12534:	10001616 	blt	r2,zero,12590 <_fclose_r+0xd0>
   12538:	8080030b 	ldhu	r2,12(r16)
   1253c:	1080200c 	andi	r2,r2,128
   12540:	1000151e 	bne	r2,zero,12598 <_fclose_r+0xd8>
   12544:	81400c17 	ldw	r5,48(r16)
   12548:	28000526 	beq	r5,zero,12560 <_fclose_r+0xa0>
   1254c:	80801004 	addi	r2,r16,64
   12550:	28800226 	beq	r5,r2,1255c <_fclose_r+0x9c>
   12554:	8809883a 	mov	r4,r17
   12558:	00129900 	call	12990 <_free_r>
   1255c:	80000c15 	stw	zero,48(r16)
   12560:	81401117 	ldw	r5,68(r16)
   12564:	28000326 	beq	r5,zero,12574 <_fclose_r+0xb4>
   12568:	8809883a 	mov	r4,r17
   1256c:	00129900 	call	12990 <_free_r>
   12570:	80001115 	stw	zero,68(r16)
   12574:	00108780 	call	10878 <__sfp_lock_acquire>
   12578:	8000030d 	sth	zero,12(r16)
   1257c:	001087c0 	call	1087c <__sfp_lock_release>
   12580:	9005883a 	mov	r2,r18
   12584:	003fdc06 	br	124f8 <_fclose_r+0x38>
   12588:	00108680 	call	10868 <__sinit>
   1258c:	003fd706 	br	124ec <_fclose_r+0x2c>
   12590:	04bfffc4 	movi	r18,-1
   12594:	003fe806 	br	12538 <_fclose_r+0x78>
   12598:	81400417 	ldw	r5,16(r16)
   1259c:	8809883a 	mov	r4,r17
   125a0:	00129900 	call	12990 <_free_r>
   125a4:	003fe706 	br	12544 <_fclose_r+0x84>
   125a8:	0005883a 	mov	r2,zero
   125ac:	f800283a 	ret

000125b0 <fclose>:
   125b0:	008000b4 	movhi	r2,2
   125b4:	1086a104 	addi	r2,r2,6788
   125b8:	200b883a 	mov	r5,r4
   125bc:	11000017 	ldw	r4,0(r2)
   125c0:	00124c01 	jmpi	124c0 <_fclose_r>

000125c4 <__sflush_r>:
   125c4:	2880030b 	ldhu	r2,12(r5)
   125c8:	defffb04 	addi	sp,sp,-20
   125cc:	dcc00315 	stw	r19,12(sp)
   125d0:	dc400115 	stw	r17,4(sp)
   125d4:	dfc00415 	stw	ra,16(sp)
   125d8:	dc800215 	stw	r18,8(sp)
   125dc:	dc000015 	stw	r16,0(sp)
   125e0:	10c0020c 	andi	r3,r2,8
   125e4:	2823883a 	mov	r17,r5
   125e8:	2027883a 	mov	r19,r4
   125ec:	1800311e 	bne	r3,zero,126b4 <__sflush_r+0xf0>
   125f0:	28c00117 	ldw	r3,4(r5)
   125f4:	10820014 	ori	r2,r2,2048
   125f8:	2880030d 	sth	r2,12(r5)
   125fc:	00c04b0e 	bge	zero,r3,1272c <__sflush_r+0x168>
   12600:	8a000a17 	ldw	r8,40(r17)
   12604:	40002326 	beq	r8,zero,12694 <__sflush_r+0xd0>
   12608:	9c000017 	ldw	r16,0(r19)
   1260c:	10c4000c 	andi	r3,r2,4096
   12610:	98000015 	stw	zero,0(r19)
   12614:	18004826 	beq	r3,zero,12738 <__sflush_r+0x174>
   12618:	89801417 	ldw	r6,80(r17)
   1261c:	10c0010c 	andi	r3,r2,4
   12620:	18000626 	beq	r3,zero,1263c <__sflush_r+0x78>
   12624:	88c00117 	ldw	r3,4(r17)
   12628:	88800c17 	ldw	r2,48(r17)
   1262c:	30cdc83a 	sub	r6,r6,r3
   12630:	10000226 	beq	r2,zero,1263c <__sflush_r+0x78>
   12634:	88800f17 	ldw	r2,60(r17)
   12638:	308dc83a 	sub	r6,r6,r2
   1263c:	89400717 	ldw	r5,28(r17)
   12640:	000f883a 	mov	r7,zero
   12644:	9809883a 	mov	r4,r19
   12648:	403ee83a 	callr	r8
   1264c:	00ffffc4 	movi	r3,-1
   12650:	10c04426 	beq	r2,r3,12764 <__sflush_r+0x1a0>
   12654:	88c0030b 	ldhu	r3,12(r17)
   12658:	89000417 	ldw	r4,16(r17)
   1265c:	88000115 	stw	zero,4(r17)
   12660:	197dffcc 	andi	r5,r3,63487
   12664:	8940030d 	sth	r5,12(r17)
   12668:	89000015 	stw	r4,0(r17)
   1266c:	18c4000c 	andi	r3,r3,4096
   12670:	18002c1e 	bne	r3,zero,12724 <__sflush_r+0x160>
   12674:	89400c17 	ldw	r5,48(r17)
   12678:	9c000015 	stw	r16,0(r19)
   1267c:	28000526 	beq	r5,zero,12694 <__sflush_r+0xd0>
   12680:	88801004 	addi	r2,r17,64
   12684:	28800226 	beq	r5,r2,12690 <__sflush_r+0xcc>
   12688:	9809883a 	mov	r4,r19
   1268c:	00129900 	call	12990 <_free_r>
   12690:	88000c15 	stw	zero,48(r17)
   12694:	0005883a 	mov	r2,zero
   12698:	dfc00417 	ldw	ra,16(sp)
   1269c:	dcc00317 	ldw	r19,12(sp)
   126a0:	dc800217 	ldw	r18,8(sp)
   126a4:	dc400117 	ldw	r17,4(sp)
   126a8:	dc000017 	ldw	r16,0(sp)
   126ac:	dec00504 	addi	sp,sp,20
   126b0:	f800283a 	ret
   126b4:	2c800417 	ldw	r18,16(r5)
   126b8:	903ff626 	beq	r18,zero,12694 <__sflush_r+0xd0>
   126bc:	2c000017 	ldw	r16,0(r5)
   126c0:	108000cc 	andi	r2,r2,3
   126c4:	2c800015 	stw	r18,0(r5)
   126c8:	84a1c83a 	sub	r16,r16,r18
   126cc:	1000131e 	bne	r2,zero,1271c <__sflush_r+0x158>
   126d0:	28800517 	ldw	r2,20(r5)
   126d4:	88800215 	stw	r2,8(r17)
   126d8:	04000316 	blt	zero,r16,126e8 <__sflush_r+0x124>
   126dc:	003fed06 	br	12694 <__sflush_r+0xd0>
   126e0:	90a5883a 	add	r18,r18,r2
   126e4:	043feb0e 	bge	zero,r16,12694 <__sflush_r+0xd0>
   126e8:	88800917 	ldw	r2,36(r17)
   126ec:	89400717 	ldw	r5,28(r17)
   126f0:	800f883a 	mov	r7,r16
   126f4:	900d883a 	mov	r6,r18
   126f8:	9809883a 	mov	r4,r19
   126fc:	103ee83a 	callr	r2
   12700:	80a1c83a 	sub	r16,r16,r2
   12704:	00bff616 	blt	zero,r2,126e0 <__sflush_r+0x11c>
   12708:	88c0030b 	ldhu	r3,12(r17)
   1270c:	00bfffc4 	movi	r2,-1
   12710:	18c01014 	ori	r3,r3,64
   12714:	88c0030d 	sth	r3,12(r17)
   12718:	003fdf06 	br	12698 <__sflush_r+0xd4>
   1271c:	0005883a 	mov	r2,zero
   12720:	003fec06 	br	126d4 <__sflush_r+0x110>
   12724:	88801415 	stw	r2,80(r17)
   12728:	003fd206 	br	12674 <__sflush_r+0xb0>
   1272c:	28c00f17 	ldw	r3,60(r5)
   12730:	00ffb316 	blt	zero,r3,12600 <__sflush_r+0x3c>
   12734:	003fd706 	br	12694 <__sflush_r+0xd0>
   12738:	89400717 	ldw	r5,28(r17)
   1273c:	000d883a 	mov	r6,zero
   12740:	01c00044 	movi	r7,1
   12744:	9809883a 	mov	r4,r19
   12748:	403ee83a 	callr	r8
   1274c:	100d883a 	mov	r6,r2
   12750:	00bfffc4 	movi	r2,-1
   12754:	30801426 	beq	r6,r2,127a8 <__sflush_r+0x1e4>
   12758:	8880030b 	ldhu	r2,12(r17)
   1275c:	8a000a17 	ldw	r8,40(r17)
   12760:	003fae06 	br	1261c <__sflush_r+0x58>
   12764:	98c00017 	ldw	r3,0(r19)
   12768:	183fba26 	beq	r3,zero,12654 <__sflush_r+0x90>
   1276c:	01000744 	movi	r4,29
   12770:	19000626 	beq	r3,r4,1278c <__sflush_r+0x1c8>
   12774:	01000584 	movi	r4,22
   12778:	19000426 	beq	r3,r4,1278c <__sflush_r+0x1c8>
   1277c:	88c0030b 	ldhu	r3,12(r17)
   12780:	18c01014 	ori	r3,r3,64
   12784:	88c0030d 	sth	r3,12(r17)
   12788:	003fc306 	br	12698 <__sflush_r+0xd4>
   1278c:	8880030b 	ldhu	r2,12(r17)
   12790:	88c00417 	ldw	r3,16(r17)
   12794:	88000115 	stw	zero,4(r17)
   12798:	10bdffcc 	andi	r2,r2,63487
   1279c:	8880030d 	sth	r2,12(r17)
   127a0:	88c00015 	stw	r3,0(r17)
   127a4:	003fb306 	br	12674 <__sflush_r+0xb0>
   127a8:	98800017 	ldw	r2,0(r19)
   127ac:	103fea26 	beq	r2,zero,12758 <__sflush_r+0x194>
   127b0:	00c00744 	movi	r3,29
   127b4:	10c00226 	beq	r2,r3,127c0 <__sflush_r+0x1fc>
   127b8:	00c00584 	movi	r3,22
   127bc:	10c0031e 	bne	r2,r3,127cc <__sflush_r+0x208>
   127c0:	9c000015 	stw	r16,0(r19)
   127c4:	0005883a 	mov	r2,zero
   127c8:	003fb306 	br	12698 <__sflush_r+0xd4>
   127cc:	88c0030b 	ldhu	r3,12(r17)
   127d0:	3005883a 	mov	r2,r6
   127d4:	18c01014 	ori	r3,r3,64
   127d8:	88c0030d 	sth	r3,12(r17)
   127dc:	003fae06 	br	12698 <__sflush_r+0xd4>

000127e0 <_fflush_r>:
   127e0:	defffd04 	addi	sp,sp,-12
   127e4:	dc000115 	stw	r16,4(sp)
   127e8:	dfc00215 	stw	ra,8(sp)
   127ec:	2021883a 	mov	r16,r4
   127f0:	20000226 	beq	r4,zero,127fc <_fflush_r+0x1c>
   127f4:	20800e17 	ldw	r2,56(r4)
   127f8:	10000c26 	beq	r2,zero,1282c <_fflush_r+0x4c>
   127fc:	2880030f 	ldh	r2,12(r5)
   12800:	1000051e 	bne	r2,zero,12818 <_fflush_r+0x38>
   12804:	0005883a 	mov	r2,zero
   12808:	dfc00217 	ldw	ra,8(sp)
   1280c:	dc000117 	ldw	r16,4(sp)
   12810:	dec00304 	addi	sp,sp,12
   12814:	f800283a 	ret
   12818:	8009883a 	mov	r4,r16
   1281c:	dfc00217 	ldw	ra,8(sp)
   12820:	dc000117 	ldw	r16,4(sp)
   12824:	dec00304 	addi	sp,sp,12
   12828:	00125c41 	jmpi	125c4 <__sflush_r>
   1282c:	d9400015 	stw	r5,0(sp)
   12830:	00108680 	call	10868 <__sinit>
   12834:	d9400017 	ldw	r5,0(sp)
   12838:	003ff006 	br	127fc <_fflush_r+0x1c>

0001283c <fflush>:
   1283c:	20000526 	beq	r4,zero,12854 <fflush+0x18>
   12840:	008000b4 	movhi	r2,2
   12844:	1086a104 	addi	r2,r2,6788
   12848:	200b883a 	mov	r5,r4
   1284c:	11000017 	ldw	r4,0(r2)
   12850:	00127e01 	jmpi	127e0 <_fflush_r>
   12854:	008000b4 	movhi	r2,2
   12858:	1086a004 	addi	r2,r2,6784
   1285c:	11000017 	ldw	r4,0(r2)
   12860:	01400074 	movhi	r5,1
   12864:	2949f804 	addi	r5,r5,10208
   12868:	0010e441 	jmpi	10e44 <_fwalk_reent>

0001286c <_malloc_trim_r>:
   1286c:	defffb04 	addi	sp,sp,-20
   12870:	dcc00315 	stw	r19,12(sp)
   12874:	04c000b4 	movhi	r19,2
   12878:	dc800215 	stw	r18,8(sp)
   1287c:	dc400115 	stw	r17,4(sp)
   12880:	dc000015 	stw	r16,0(sp)
   12884:	dfc00415 	stw	ra,16(sp)
   12888:	2821883a 	mov	r16,r5
   1288c:	9cc11c04 	addi	r19,r19,1136
   12890:	2025883a 	mov	r18,r4
   12894:	00137440 	call	13744 <__malloc_lock>
   12898:	98800217 	ldw	r2,8(r19)
   1289c:	14400117 	ldw	r17,4(r2)
   128a0:	00bfff04 	movi	r2,-4
   128a4:	88a2703a 	and	r17,r17,r2
   128a8:	8c21c83a 	sub	r16,r17,r16
   128ac:	8403fbc4 	addi	r16,r16,4079
   128b0:	8020d33a 	srli	r16,r16,12
   128b4:	0083ffc4 	movi	r2,4095
   128b8:	843fffc4 	addi	r16,r16,-1
   128bc:	8020933a 	slli	r16,r16,12
   128c0:	1400060e 	bge	r2,r16,128dc <_malloc_trim_r+0x70>
   128c4:	000b883a 	mov	r5,zero
   128c8:	9009883a 	mov	r4,r18
   128cc:	00121280 	call	12128 <_sbrk_r>
   128d0:	98c00217 	ldw	r3,8(r19)
   128d4:	1c47883a 	add	r3,r3,r17
   128d8:	10c00a26 	beq	r2,r3,12904 <_malloc_trim_r+0x98>
   128dc:	9009883a 	mov	r4,r18
   128e0:	00137680 	call	13768 <__malloc_unlock>
   128e4:	0005883a 	mov	r2,zero
   128e8:	dfc00417 	ldw	ra,16(sp)
   128ec:	dcc00317 	ldw	r19,12(sp)
   128f0:	dc800217 	ldw	r18,8(sp)
   128f4:	dc400117 	ldw	r17,4(sp)
   128f8:	dc000017 	ldw	r16,0(sp)
   128fc:	dec00504 	addi	sp,sp,20
   12900:	f800283a 	ret
   12904:	040bc83a 	sub	r5,zero,r16
   12908:	9009883a 	mov	r4,r18
   1290c:	00121280 	call	12128 <_sbrk_r>
   12910:	00ffffc4 	movi	r3,-1
   12914:	10c00d26 	beq	r2,r3,1294c <_malloc_trim_r+0xe0>
   12918:	00c000b4 	movhi	r3,2
   1291c:	18c6b904 	addi	r3,r3,6884
   12920:	18800017 	ldw	r2,0(r3)
   12924:	99000217 	ldw	r4,8(r19)
   12928:	8c23c83a 	sub	r17,r17,r16
   1292c:	8c400054 	ori	r17,r17,1
   12930:	1421c83a 	sub	r16,r2,r16
   12934:	24400115 	stw	r17,4(r4)
   12938:	9009883a 	mov	r4,r18
   1293c:	1c000015 	stw	r16,0(r3)
   12940:	00137680 	call	13768 <__malloc_unlock>
   12944:	00800044 	movi	r2,1
   12948:	003fe706 	br	128e8 <_malloc_trim_r+0x7c>
   1294c:	000b883a 	mov	r5,zero
   12950:	9009883a 	mov	r4,r18
   12954:	00121280 	call	12128 <_sbrk_r>
   12958:	99000217 	ldw	r4,8(r19)
   1295c:	014003c4 	movi	r5,15
   12960:	1107c83a 	sub	r3,r2,r4
   12964:	28ffdd0e 	bge	r5,r3,128dc <_malloc_trim_r+0x70>
   12968:	014000b4 	movhi	r5,2
   1296c:	2946a204 	addi	r5,r5,6792
   12970:	29400017 	ldw	r5,0(r5)
   12974:	18c00054 	ori	r3,r3,1
   12978:	20c00115 	stw	r3,4(r4)
   1297c:	00c000b4 	movhi	r3,2
   12980:	1145c83a 	sub	r2,r2,r5
   12984:	18c6b904 	addi	r3,r3,6884
   12988:	18800015 	stw	r2,0(r3)
   1298c:	003fd306 	br	128dc <_malloc_trim_r+0x70>

00012990 <_free_r>:
   12990:	28004126 	beq	r5,zero,12a98 <_free_r+0x108>
   12994:	defffd04 	addi	sp,sp,-12
   12998:	dc400115 	stw	r17,4(sp)
   1299c:	dc000015 	stw	r16,0(sp)
   129a0:	2023883a 	mov	r17,r4
   129a4:	2821883a 	mov	r16,r5
   129a8:	dfc00215 	stw	ra,8(sp)
   129ac:	00137440 	call	13744 <__malloc_lock>
   129b0:	81ffff17 	ldw	r7,-4(r16)
   129b4:	00bfff84 	movi	r2,-2
   129b8:	010000b4 	movhi	r4,2
   129bc:	81bffe04 	addi	r6,r16,-8
   129c0:	3884703a 	and	r2,r7,r2
   129c4:	21011c04 	addi	r4,r4,1136
   129c8:	308b883a 	add	r5,r6,r2
   129cc:	2a400117 	ldw	r9,4(r5)
   129d0:	22000217 	ldw	r8,8(r4)
   129d4:	00ffff04 	movi	r3,-4
   129d8:	48c6703a 	and	r3,r9,r3
   129dc:	2a005726 	beq	r5,r8,12b3c <_free_r+0x1ac>
   129e0:	28c00115 	stw	r3,4(r5)
   129e4:	39c0004c 	andi	r7,r7,1
   129e8:	3800091e 	bne	r7,zero,12a10 <_free_r+0x80>
   129ec:	823ffe17 	ldw	r8,-8(r16)
   129f0:	22400204 	addi	r9,r4,8
   129f4:	320dc83a 	sub	r6,r6,r8
   129f8:	31c00217 	ldw	r7,8(r6)
   129fc:	1205883a 	add	r2,r2,r8
   12a00:	3a406526 	beq	r7,r9,12b98 <_free_r+0x208>
   12a04:	32000317 	ldw	r8,12(r6)
   12a08:	3a000315 	stw	r8,12(r7)
   12a0c:	41c00215 	stw	r7,8(r8)
   12a10:	28cf883a 	add	r7,r5,r3
   12a14:	39c00117 	ldw	r7,4(r7)
   12a18:	39c0004c 	andi	r7,r7,1
   12a1c:	38003a26 	beq	r7,zero,12b08 <_free_r+0x178>
   12a20:	10c00054 	ori	r3,r2,1
   12a24:	30c00115 	stw	r3,4(r6)
   12a28:	3087883a 	add	r3,r6,r2
   12a2c:	18800015 	stw	r2,0(r3)
   12a30:	00c07fc4 	movi	r3,511
   12a34:	18801936 	bltu	r3,r2,12a9c <_free_r+0x10c>
   12a38:	1004d0fa 	srli	r2,r2,3
   12a3c:	01c00044 	movi	r7,1
   12a40:	21400117 	ldw	r5,4(r4)
   12a44:	10c00044 	addi	r3,r2,1
   12a48:	18c7883a 	add	r3,r3,r3
   12a4c:	1005d0ba 	srai	r2,r2,2
   12a50:	18c7883a 	add	r3,r3,r3
   12a54:	18c7883a 	add	r3,r3,r3
   12a58:	1907883a 	add	r3,r3,r4
   12a5c:	3884983a 	sll	r2,r7,r2
   12a60:	19c00017 	ldw	r7,0(r3)
   12a64:	1a3ffe04 	addi	r8,r3,-8
   12a68:	1144b03a 	or	r2,r2,r5
   12a6c:	32000315 	stw	r8,12(r6)
   12a70:	31c00215 	stw	r7,8(r6)
   12a74:	20800115 	stw	r2,4(r4)
   12a78:	19800015 	stw	r6,0(r3)
   12a7c:	39800315 	stw	r6,12(r7)
   12a80:	8809883a 	mov	r4,r17
   12a84:	dfc00217 	ldw	ra,8(sp)
   12a88:	dc400117 	ldw	r17,4(sp)
   12a8c:	dc000017 	ldw	r16,0(sp)
   12a90:	dec00304 	addi	sp,sp,12
   12a94:	00137681 	jmpi	13768 <__malloc_unlock>
   12a98:	f800283a 	ret
   12a9c:	100ad27a 	srli	r5,r2,9
   12aa0:	00c00104 	movi	r3,4
   12aa4:	19404a36 	bltu	r3,r5,12bd0 <_free_r+0x240>
   12aa8:	100ad1ba 	srli	r5,r2,6
   12aac:	28c00e44 	addi	r3,r5,57
   12ab0:	18c7883a 	add	r3,r3,r3
   12ab4:	29400e04 	addi	r5,r5,56
   12ab8:	18c7883a 	add	r3,r3,r3
   12abc:	18c7883a 	add	r3,r3,r3
   12ac0:	1909883a 	add	r4,r3,r4
   12ac4:	20c00017 	ldw	r3,0(r4)
   12ac8:	01c000b4 	movhi	r7,2
   12acc:	213ffe04 	addi	r4,r4,-8
   12ad0:	39c11c04 	addi	r7,r7,1136
   12ad4:	20c04426 	beq	r4,r3,12be8 <_free_r+0x258>
   12ad8:	01ffff04 	movi	r7,-4
   12adc:	19400117 	ldw	r5,4(r3)
   12ae0:	29ca703a 	and	r5,r5,r7
   12ae4:	1140022e 	bgeu	r2,r5,12af0 <_free_r+0x160>
   12ae8:	18c00217 	ldw	r3,8(r3)
   12aec:	20fffb1e 	bne	r4,r3,12adc <_free_r+0x14c>
   12af0:	19000317 	ldw	r4,12(r3)
   12af4:	31000315 	stw	r4,12(r6)
   12af8:	30c00215 	stw	r3,8(r6)
   12afc:	21800215 	stw	r6,8(r4)
   12b00:	19800315 	stw	r6,12(r3)
   12b04:	003fde06 	br	12a80 <_free_r+0xf0>
   12b08:	29c00217 	ldw	r7,8(r5)
   12b0c:	10c5883a 	add	r2,r2,r3
   12b10:	00c000b4 	movhi	r3,2
   12b14:	18c11e04 	addi	r3,r3,1144
   12b18:	38c03b26 	beq	r7,r3,12c08 <_free_r+0x278>
   12b1c:	2a000317 	ldw	r8,12(r5)
   12b20:	11400054 	ori	r5,r2,1
   12b24:	3087883a 	add	r3,r6,r2
   12b28:	3a000315 	stw	r8,12(r7)
   12b2c:	41c00215 	stw	r7,8(r8)
   12b30:	31400115 	stw	r5,4(r6)
   12b34:	18800015 	stw	r2,0(r3)
   12b38:	003fbd06 	br	12a30 <_free_r+0xa0>
   12b3c:	39c0004c 	andi	r7,r7,1
   12b40:	10c5883a 	add	r2,r2,r3
   12b44:	3800071e 	bne	r7,zero,12b64 <_free_r+0x1d4>
   12b48:	81fffe17 	ldw	r7,-8(r16)
   12b4c:	31cdc83a 	sub	r6,r6,r7
   12b50:	30c00317 	ldw	r3,12(r6)
   12b54:	31400217 	ldw	r5,8(r6)
   12b58:	11c5883a 	add	r2,r2,r7
   12b5c:	28c00315 	stw	r3,12(r5)
   12b60:	19400215 	stw	r5,8(r3)
   12b64:	10c00054 	ori	r3,r2,1
   12b68:	30c00115 	stw	r3,4(r6)
   12b6c:	00c000b4 	movhi	r3,2
   12b70:	18c6a304 	addi	r3,r3,6796
   12b74:	18c00017 	ldw	r3,0(r3)
   12b78:	21800215 	stw	r6,8(r4)
   12b7c:	10ffc036 	bltu	r2,r3,12a80 <_free_r+0xf0>
   12b80:	008000b4 	movhi	r2,2
   12b84:	1086b004 	addi	r2,r2,6848
   12b88:	11400017 	ldw	r5,0(r2)
   12b8c:	8809883a 	mov	r4,r17
   12b90:	001286c0 	call	1286c <_malloc_trim_r>
   12b94:	003fba06 	br	12a80 <_free_r+0xf0>
   12b98:	28c9883a 	add	r4,r5,r3
   12b9c:	21000117 	ldw	r4,4(r4)
   12ba0:	2100004c 	andi	r4,r4,1
   12ba4:	2000391e 	bne	r4,zero,12c8c <_free_r+0x2fc>
   12ba8:	29c00217 	ldw	r7,8(r5)
   12bac:	29000317 	ldw	r4,12(r5)
   12bb0:	1885883a 	add	r2,r3,r2
   12bb4:	10c00054 	ori	r3,r2,1
   12bb8:	39000315 	stw	r4,12(r7)
   12bbc:	21c00215 	stw	r7,8(r4)
   12bc0:	30c00115 	stw	r3,4(r6)
   12bc4:	308d883a 	add	r6,r6,r2
   12bc8:	30800015 	stw	r2,0(r6)
   12bcc:	003fac06 	br	12a80 <_free_r+0xf0>
   12bd0:	00c00504 	movi	r3,20
   12bd4:	19401536 	bltu	r3,r5,12c2c <_free_r+0x29c>
   12bd8:	28c01704 	addi	r3,r5,92
   12bdc:	18c7883a 	add	r3,r3,r3
   12be0:	294016c4 	addi	r5,r5,91
   12be4:	003fb406 	br	12ab8 <_free_r+0x128>
   12be8:	280bd0ba 	srai	r5,r5,2
   12bec:	00c00044 	movi	r3,1
   12bf0:	38800117 	ldw	r2,4(r7)
   12bf4:	194a983a 	sll	r5,r3,r5
   12bf8:	2007883a 	mov	r3,r4
   12bfc:	2884b03a 	or	r2,r5,r2
   12c00:	38800115 	stw	r2,4(r7)
   12c04:	003fbb06 	br	12af4 <_free_r+0x164>
   12c08:	21800515 	stw	r6,20(r4)
   12c0c:	21800415 	stw	r6,16(r4)
   12c10:	10c00054 	ori	r3,r2,1
   12c14:	31c00315 	stw	r7,12(r6)
   12c18:	31c00215 	stw	r7,8(r6)
   12c1c:	30c00115 	stw	r3,4(r6)
   12c20:	308d883a 	add	r6,r6,r2
   12c24:	30800015 	stw	r2,0(r6)
   12c28:	003f9506 	br	12a80 <_free_r+0xf0>
   12c2c:	00c01504 	movi	r3,84
   12c30:	19400536 	bltu	r3,r5,12c48 <_free_r+0x2b8>
   12c34:	100ad33a 	srli	r5,r2,12
   12c38:	28c01bc4 	addi	r3,r5,111
   12c3c:	18c7883a 	add	r3,r3,r3
   12c40:	29401b84 	addi	r5,r5,110
   12c44:	003f9c06 	br	12ab8 <_free_r+0x128>
   12c48:	00c05504 	movi	r3,340
   12c4c:	19400536 	bltu	r3,r5,12c64 <_free_r+0x2d4>
   12c50:	100ad3fa 	srli	r5,r2,15
   12c54:	28c01e04 	addi	r3,r5,120
   12c58:	18c7883a 	add	r3,r3,r3
   12c5c:	29401dc4 	addi	r5,r5,119
   12c60:	003f9506 	br	12ab8 <_free_r+0x128>
   12c64:	00c15504 	movi	r3,1364
   12c68:	19400536 	bltu	r3,r5,12c80 <_free_r+0x2f0>
   12c6c:	100ad4ba 	srli	r5,r2,18
   12c70:	28c01f44 	addi	r3,r5,125
   12c74:	18c7883a 	add	r3,r3,r3
   12c78:	29401f04 	addi	r5,r5,124
   12c7c:	003f8e06 	br	12ab8 <_free_r+0x128>
   12c80:	00c03f84 	movi	r3,254
   12c84:	01401f84 	movi	r5,126
   12c88:	003f8b06 	br	12ab8 <_free_r+0x128>
   12c8c:	10c00054 	ori	r3,r2,1
   12c90:	30c00115 	stw	r3,4(r6)
   12c94:	308d883a 	add	r6,r6,r2
   12c98:	30800015 	stw	r2,0(r6)
   12c9c:	003f7806 	br	12a80 <_free_r+0xf0>

00012ca0 <_lseek_r>:
   12ca0:	defffd04 	addi	sp,sp,-12
   12ca4:	2805883a 	mov	r2,r5
   12ca8:	dc000015 	stw	r16,0(sp)
   12cac:	040000b4 	movhi	r16,2
   12cb0:	dc400115 	stw	r17,4(sp)
   12cb4:	300b883a 	mov	r5,r6
   12cb8:	8406b104 	addi	r16,r16,6852
   12cbc:	2023883a 	mov	r17,r4
   12cc0:	380d883a 	mov	r6,r7
   12cc4:	1009883a 	mov	r4,r2
   12cc8:	dfc00215 	stw	ra,8(sp)
   12ccc:	80000015 	stw	zero,0(r16)
   12cd0:	00135ec0 	call	135ec <lseek>
   12cd4:	00ffffc4 	movi	r3,-1
   12cd8:	10c00526 	beq	r2,r3,12cf0 <_lseek_r+0x50>
   12cdc:	dfc00217 	ldw	ra,8(sp)
   12ce0:	dc400117 	ldw	r17,4(sp)
   12ce4:	dc000017 	ldw	r16,0(sp)
   12ce8:	dec00304 	addi	sp,sp,12
   12cec:	f800283a 	ret
   12cf0:	80c00017 	ldw	r3,0(r16)
   12cf4:	183ff926 	beq	r3,zero,12cdc <_lseek_r+0x3c>
   12cf8:	88c00015 	stw	r3,0(r17)
   12cfc:	003ff706 	br	12cdc <_lseek_r+0x3c>

00012d00 <__smakebuf_r>:
   12d00:	2880030b 	ldhu	r2,12(r5)
   12d04:	10c0008c 	andi	r3,r2,2
   12d08:	1800411e 	bne	r3,zero,12e10 <__smakebuf_r+0x110>
   12d0c:	deffec04 	addi	sp,sp,-80
   12d10:	dc000f15 	stw	r16,60(sp)
   12d14:	2821883a 	mov	r16,r5
   12d18:	2940038f 	ldh	r5,14(r5)
   12d1c:	dc401015 	stw	r17,64(sp)
   12d20:	dfc01315 	stw	ra,76(sp)
   12d24:	dcc01215 	stw	r19,72(sp)
   12d28:	dc801115 	stw	r18,68(sp)
   12d2c:	2023883a 	mov	r17,r4
   12d30:	28001c16 	blt	r5,zero,12da4 <__smakebuf_r+0xa4>
   12d34:	d80d883a 	mov	r6,sp
   12d38:	0012f1c0 	call	12f1c <_fstat_r>
   12d3c:	10001816 	blt	r2,zero,12da0 <__smakebuf_r+0xa0>
   12d40:	d8800117 	ldw	r2,4(sp)
   12d44:	00e00014 	movui	r3,32768
   12d48:	10bc000c 	andi	r2,r2,61440
   12d4c:	14c80020 	cmpeqi	r19,r2,8192
   12d50:	10c03726 	beq	r2,r3,12e30 <__smakebuf_r+0x130>
   12d54:	80c0030b 	ldhu	r3,12(r16)
   12d58:	18c20014 	ori	r3,r3,2048
   12d5c:	80c0030d 	sth	r3,12(r16)
   12d60:	00c80004 	movi	r3,8192
   12d64:	10c0521e 	bne	r2,r3,12eb0 <__smakebuf_r+0x1b0>
   12d68:	8140038f 	ldh	r5,14(r16)
   12d6c:	8809883a 	mov	r4,r17
   12d70:	0012f780 	call	12f78 <_isatty_r>
   12d74:	10004c26 	beq	r2,zero,12ea8 <__smakebuf_r+0x1a8>
   12d78:	8080030b 	ldhu	r2,12(r16)
   12d7c:	80c010c4 	addi	r3,r16,67
   12d80:	80c00015 	stw	r3,0(r16)
   12d84:	10800054 	ori	r2,r2,1
   12d88:	8080030d 	sth	r2,12(r16)
   12d8c:	00800044 	movi	r2,1
   12d90:	80c00415 	stw	r3,16(r16)
   12d94:	80800515 	stw	r2,20(r16)
   12d98:	04810004 	movi	r18,1024
   12d9c:	00000706 	br	12dbc <__smakebuf_r+0xbc>
   12da0:	8080030b 	ldhu	r2,12(r16)
   12da4:	10c0200c 	andi	r3,r2,128
   12da8:	18001f1e 	bne	r3,zero,12e28 <__smakebuf_r+0x128>
   12dac:	04810004 	movi	r18,1024
   12db0:	10820014 	ori	r2,r2,2048
   12db4:	8080030d 	sth	r2,12(r16)
   12db8:	0027883a 	mov	r19,zero
   12dbc:	900b883a 	mov	r5,r18
   12dc0:	8809883a 	mov	r4,r17
   12dc4:	0010f080 	call	10f08 <_malloc_r>
   12dc8:	10002c26 	beq	r2,zero,12e7c <__smakebuf_r+0x17c>
   12dcc:	80c0030b 	ldhu	r3,12(r16)
   12dd0:	01000074 	movhi	r4,1
   12dd4:	21014404 	addi	r4,r4,1296
   12dd8:	89000f15 	stw	r4,60(r17)
   12ddc:	18c02014 	ori	r3,r3,128
   12de0:	80c0030d 	sth	r3,12(r16)
   12de4:	80800015 	stw	r2,0(r16)
   12de8:	80800415 	stw	r2,16(r16)
   12dec:	84800515 	stw	r18,20(r16)
   12df0:	98001a1e 	bne	r19,zero,12e5c <__smakebuf_r+0x15c>
   12df4:	dfc01317 	ldw	ra,76(sp)
   12df8:	dcc01217 	ldw	r19,72(sp)
   12dfc:	dc801117 	ldw	r18,68(sp)
   12e00:	dc401017 	ldw	r17,64(sp)
   12e04:	dc000f17 	ldw	r16,60(sp)
   12e08:	dec01404 	addi	sp,sp,80
   12e0c:	f800283a 	ret
   12e10:	288010c4 	addi	r2,r5,67
   12e14:	28800015 	stw	r2,0(r5)
   12e18:	28800415 	stw	r2,16(r5)
   12e1c:	00800044 	movi	r2,1
   12e20:	28800515 	stw	r2,20(r5)
   12e24:	f800283a 	ret
   12e28:	04801004 	movi	r18,64
   12e2c:	003fe006 	br	12db0 <__smakebuf_r+0xb0>
   12e30:	81000a17 	ldw	r4,40(r16)
   12e34:	00c00074 	movhi	r3,1
   12e38:	18c89504 	addi	r3,r3,8788
   12e3c:	20ffc51e 	bne	r4,r3,12d54 <__smakebuf_r+0x54>
   12e40:	8080030b 	ldhu	r2,12(r16)
   12e44:	04810004 	movi	r18,1024
   12e48:	84801315 	stw	r18,76(r16)
   12e4c:	1484b03a 	or	r2,r2,r18
   12e50:	8080030d 	sth	r2,12(r16)
   12e54:	0027883a 	mov	r19,zero
   12e58:	003fd806 	br	12dbc <__smakebuf_r+0xbc>
   12e5c:	8140038f 	ldh	r5,14(r16)
   12e60:	8809883a 	mov	r4,r17
   12e64:	0012f780 	call	12f78 <_isatty_r>
   12e68:	103fe226 	beq	r2,zero,12df4 <__smakebuf_r+0xf4>
   12e6c:	8080030b 	ldhu	r2,12(r16)
   12e70:	10800054 	ori	r2,r2,1
   12e74:	8080030d 	sth	r2,12(r16)
   12e78:	003fde06 	br	12df4 <__smakebuf_r+0xf4>
   12e7c:	8080030b 	ldhu	r2,12(r16)
   12e80:	10c0800c 	andi	r3,r2,512
   12e84:	183fdb1e 	bne	r3,zero,12df4 <__smakebuf_r+0xf4>
   12e88:	10800094 	ori	r2,r2,2
   12e8c:	80c010c4 	addi	r3,r16,67
   12e90:	8080030d 	sth	r2,12(r16)
   12e94:	00800044 	movi	r2,1
   12e98:	80c00015 	stw	r3,0(r16)
   12e9c:	80c00415 	stw	r3,16(r16)
   12ea0:	80800515 	stw	r2,20(r16)
   12ea4:	003fd306 	br	12df4 <__smakebuf_r+0xf4>
   12ea8:	04810004 	movi	r18,1024
   12eac:	003fc306 	br	12dbc <__smakebuf_r+0xbc>
   12eb0:	0027883a 	mov	r19,zero
   12eb4:	04810004 	movi	r18,1024
   12eb8:	003fc006 	br	12dbc <__smakebuf_r+0xbc>

00012ebc <_read_r>:
   12ebc:	defffd04 	addi	sp,sp,-12
   12ec0:	2805883a 	mov	r2,r5
   12ec4:	dc000015 	stw	r16,0(sp)
   12ec8:	040000b4 	movhi	r16,2
   12ecc:	dc400115 	stw	r17,4(sp)
   12ed0:	300b883a 	mov	r5,r6
   12ed4:	8406b104 	addi	r16,r16,6852
   12ed8:	2023883a 	mov	r17,r4
   12edc:	380d883a 	mov	r6,r7
   12ee0:	1009883a 	mov	r4,r2
   12ee4:	dfc00215 	stw	ra,8(sp)
   12ee8:	80000015 	stw	zero,0(r16)
   12eec:	00137c80 	call	137c8 <read>
   12ef0:	00ffffc4 	movi	r3,-1
   12ef4:	10c00526 	beq	r2,r3,12f0c <_read_r+0x50>
   12ef8:	dfc00217 	ldw	ra,8(sp)
   12efc:	dc400117 	ldw	r17,4(sp)
   12f00:	dc000017 	ldw	r16,0(sp)
   12f04:	dec00304 	addi	sp,sp,12
   12f08:	f800283a 	ret
   12f0c:	80c00017 	ldw	r3,0(r16)
   12f10:	183ff926 	beq	r3,zero,12ef8 <_read_r+0x3c>
   12f14:	88c00015 	stw	r3,0(r17)
   12f18:	003ff706 	br	12ef8 <_read_r+0x3c>

00012f1c <_fstat_r>:
   12f1c:	defffd04 	addi	sp,sp,-12
   12f20:	2805883a 	mov	r2,r5
   12f24:	dc000015 	stw	r16,0(sp)
   12f28:	040000b4 	movhi	r16,2
   12f2c:	dc400115 	stw	r17,4(sp)
   12f30:	8406b104 	addi	r16,r16,6852
   12f34:	2023883a 	mov	r17,r4
   12f38:	300b883a 	mov	r5,r6
   12f3c:	1009883a 	mov	r4,r2
   12f40:	dfc00215 	stw	ra,8(sp)
   12f44:	80000015 	stw	zero,0(r16)
   12f48:	00133240 	call	13324 <fstat>
   12f4c:	00ffffc4 	movi	r3,-1
   12f50:	10c00526 	beq	r2,r3,12f68 <_fstat_r+0x4c>
   12f54:	dfc00217 	ldw	ra,8(sp)
   12f58:	dc400117 	ldw	r17,4(sp)
   12f5c:	dc000017 	ldw	r16,0(sp)
   12f60:	dec00304 	addi	sp,sp,12
   12f64:	f800283a 	ret
   12f68:	80c00017 	ldw	r3,0(r16)
   12f6c:	183ff926 	beq	r3,zero,12f54 <_fstat_r+0x38>
   12f70:	88c00015 	stw	r3,0(r17)
   12f74:	003ff706 	br	12f54 <_fstat_r+0x38>

00012f78 <_isatty_r>:
   12f78:	defffd04 	addi	sp,sp,-12
   12f7c:	dc000015 	stw	r16,0(sp)
   12f80:	040000b4 	movhi	r16,2
   12f84:	dc400115 	stw	r17,4(sp)
   12f88:	8406b104 	addi	r16,r16,6852
   12f8c:	2023883a 	mov	r17,r4
   12f90:	2809883a 	mov	r4,r5
   12f94:	dfc00215 	stw	ra,8(sp)
   12f98:	80000015 	stw	zero,0(r16)
   12f9c:	00134180 	call	13418 <isatty>
   12fa0:	00ffffc4 	movi	r3,-1
   12fa4:	10c00526 	beq	r2,r3,12fbc <_isatty_r+0x44>
   12fa8:	dfc00217 	ldw	ra,8(sp)
   12fac:	dc400117 	ldw	r17,4(sp)
   12fb0:	dc000017 	ldw	r16,0(sp)
   12fb4:	dec00304 	addi	sp,sp,12
   12fb8:	f800283a 	ret
   12fbc:	80c00017 	ldw	r3,0(r16)
   12fc0:	183ff926 	beq	r3,zero,12fa8 <_isatty_r+0x30>
   12fc4:	88c00015 	stw	r3,0(r17)
   12fc8:	003ff706 	br	12fa8 <_isatty_r+0x30>

00012fcc <__divsi3>:
   12fcc:	20001b16 	blt	r4,zero,1303c <__divsi3+0x70>
   12fd0:	000f883a 	mov	r7,zero
   12fd4:	28001616 	blt	r5,zero,13030 <__divsi3+0x64>
   12fd8:	200d883a 	mov	r6,r4
   12fdc:	29001a2e 	bgeu	r5,r4,13048 <__divsi3+0x7c>
   12fe0:	00800804 	movi	r2,32
   12fe4:	00c00044 	movi	r3,1
   12fe8:	00000106 	br	12ff0 <__divsi3+0x24>
   12fec:	10000d26 	beq	r2,zero,13024 <__divsi3+0x58>
   12ff0:	294b883a 	add	r5,r5,r5
   12ff4:	10bfffc4 	addi	r2,r2,-1
   12ff8:	18c7883a 	add	r3,r3,r3
   12ffc:	293ffb36 	bltu	r5,r4,12fec <__divsi3+0x20>
   13000:	0005883a 	mov	r2,zero
   13004:	18000726 	beq	r3,zero,13024 <__divsi3+0x58>
   13008:	0005883a 	mov	r2,zero
   1300c:	31400236 	bltu	r6,r5,13018 <__divsi3+0x4c>
   13010:	314dc83a 	sub	r6,r6,r5
   13014:	10c4b03a 	or	r2,r2,r3
   13018:	1806d07a 	srli	r3,r3,1
   1301c:	280ad07a 	srli	r5,r5,1
   13020:	183ffa1e 	bne	r3,zero,1300c <__divsi3+0x40>
   13024:	38000126 	beq	r7,zero,1302c <__divsi3+0x60>
   13028:	0085c83a 	sub	r2,zero,r2
   1302c:	f800283a 	ret
   13030:	014bc83a 	sub	r5,zero,r5
   13034:	39c0005c 	xori	r7,r7,1
   13038:	003fe706 	br	12fd8 <__divsi3+0xc>
   1303c:	0109c83a 	sub	r4,zero,r4
   13040:	01c00044 	movi	r7,1
   13044:	003fe306 	br	12fd4 <__divsi3+0x8>
   13048:	00c00044 	movi	r3,1
   1304c:	003fee06 	br	13008 <__divsi3+0x3c>

00013050 <__modsi3>:
   13050:	20001716 	blt	r4,zero,130b0 <__modsi3+0x60>
   13054:	000f883a 	mov	r7,zero
   13058:	2005883a 	mov	r2,r4
   1305c:	28001216 	blt	r5,zero,130a8 <__modsi3+0x58>
   13060:	2900162e 	bgeu	r5,r4,130bc <__modsi3+0x6c>
   13064:	01800804 	movi	r6,32
   13068:	00c00044 	movi	r3,1
   1306c:	00000106 	br	13074 <__modsi3+0x24>
   13070:	30000a26 	beq	r6,zero,1309c <__modsi3+0x4c>
   13074:	294b883a 	add	r5,r5,r5
   13078:	31bfffc4 	addi	r6,r6,-1
   1307c:	18c7883a 	add	r3,r3,r3
   13080:	293ffb36 	bltu	r5,r4,13070 <__modsi3+0x20>
   13084:	18000526 	beq	r3,zero,1309c <__modsi3+0x4c>
   13088:	1806d07a 	srli	r3,r3,1
   1308c:	11400136 	bltu	r2,r5,13094 <__modsi3+0x44>
   13090:	1145c83a 	sub	r2,r2,r5
   13094:	280ad07a 	srli	r5,r5,1
   13098:	183ffb1e 	bne	r3,zero,13088 <__modsi3+0x38>
   1309c:	38000126 	beq	r7,zero,130a4 <__modsi3+0x54>
   130a0:	0085c83a 	sub	r2,zero,r2
   130a4:	f800283a 	ret
   130a8:	014bc83a 	sub	r5,zero,r5
   130ac:	003fec06 	br	13060 <__modsi3+0x10>
   130b0:	0109c83a 	sub	r4,zero,r4
   130b4:	01c00044 	movi	r7,1
   130b8:	003fe706 	br	13058 <__modsi3+0x8>
   130bc:	00c00044 	movi	r3,1
   130c0:	003ff106 	br	13088 <__modsi3+0x38>

000130c4 <__udivsi3>:
   130c4:	200d883a 	mov	r6,r4
   130c8:	2900152e 	bgeu	r5,r4,13120 <__udivsi3+0x5c>
   130cc:	28001416 	blt	r5,zero,13120 <__udivsi3+0x5c>
   130d0:	00800804 	movi	r2,32
   130d4:	00c00044 	movi	r3,1
   130d8:	00000206 	br	130e4 <__udivsi3+0x20>
   130dc:	10000e26 	beq	r2,zero,13118 <__udivsi3+0x54>
   130e0:	28000516 	blt	r5,zero,130f8 <__udivsi3+0x34>
   130e4:	294b883a 	add	r5,r5,r5
   130e8:	10bfffc4 	addi	r2,r2,-1
   130ec:	18c7883a 	add	r3,r3,r3
   130f0:	293ffa36 	bltu	r5,r4,130dc <__udivsi3+0x18>
   130f4:	18000826 	beq	r3,zero,13118 <__udivsi3+0x54>
   130f8:	0005883a 	mov	r2,zero
   130fc:	31400236 	bltu	r6,r5,13108 <__udivsi3+0x44>
   13100:	314dc83a 	sub	r6,r6,r5
   13104:	10c4b03a 	or	r2,r2,r3
   13108:	1806d07a 	srli	r3,r3,1
   1310c:	280ad07a 	srli	r5,r5,1
   13110:	183ffa1e 	bne	r3,zero,130fc <__udivsi3+0x38>
   13114:	f800283a 	ret
   13118:	0005883a 	mov	r2,zero
   1311c:	f800283a 	ret
   13120:	00c00044 	movi	r3,1
   13124:	003ff406 	br	130f8 <__udivsi3+0x34>

00013128 <__umodsi3>:
   13128:	2005883a 	mov	r2,r4
   1312c:	2900122e 	bgeu	r5,r4,13178 <__umodsi3+0x50>
   13130:	28001116 	blt	r5,zero,13178 <__umodsi3+0x50>
   13134:	01800804 	movi	r6,32
   13138:	00c00044 	movi	r3,1
   1313c:	00000206 	br	13148 <__umodsi3+0x20>
   13140:	30000c26 	beq	r6,zero,13174 <__umodsi3+0x4c>
   13144:	28000516 	blt	r5,zero,1315c <__umodsi3+0x34>
   13148:	294b883a 	add	r5,r5,r5
   1314c:	31bfffc4 	addi	r6,r6,-1
   13150:	18c7883a 	add	r3,r3,r3
   13154:	293ffa36 	bltu	r5,r4,13140 <__umodsi3+0x18>
   13158:	18000626 	beq	r3,zero,13174 <__umodsi3+0x4c>
   1315c:	1806d07a 	srli	r3,r3,1
   13160:	11400136 	bltu	r2,r5,13168 <__umodsi3+0x40>
   13164:	1145c83a 	sub	r2,r2,r5
   13168:	280ad07a 	srli	r5,r5,1
   1316c:	183ffb1e 	bne	r3,zero,1315c <__umodsi3+0x34>
   13170:	f800283a 	ret
   13174:	f800283a 	ret
   13178:	00c00044 	movi	r3,1
   1317c:	003ff706 	br	1315c <__umodsi3+0x34>

00013180 <__mulsi3>:
   13180:	0005883a 	mov	r2,zero
   13184:	20000726 	beq	r4,zero,131a4 <__mulsi3+0x24>
   13188:	20c0004c 	andi	r3,r4,1
   1318c:	2008d07a 	srli	r4,r4,1
   13190:	18000126 	beq	r3,zero,13198 <__mulsi3+0x18>
   13194:	1145883a 	add	r2,r2,r5
   13198:	294b883a 	add	r5,r5,r5
   1319c:	203ffa1e 	bne	r4,zero,13188 <__mulsi3+0x8>
   131a0:	f800283a 	ret
   131a4:	f800283a 	ret

000131a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   131a8:	defffe04 	addi	sp,sp,-8
   131ac:	dfc00115 	stw	ra,4(sp)
   131b0:	df000015 	stw	fp,0(sp)
   131b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   131b8:	d0a00917 	ldw	r2,-32732(gp)
   131bc:	10000326 	beq	r2,zero,131cc <alt_get_errno+0x24>
   131c0:	d0a00917 	ldw	r2,-32732(gp)
   131c4:	103ee83a 	callr	r2
   131c8:	00000106 	br	131d0 <alt_get_errno+0x28>
   131cc:	d0a01104 	addi	r2,gp,-32700
}
   131d0:	e037883a 	mov	sp,fp
   131d4:	dfc00117 	ldw	ra,4(sp)
   131d8:	df000017 	ldw	fp,0(sp)
   131dc:	dec00204 	addi	sp,sp,8
   131e0:	f800283a 	ret

000131e4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   131e4:	defffb04 	addi	sp,sp,-20
   131e8:	dfc00415 	stw	ra,16(sp)
   131ec:	df000315 	stw	fp,12(sp)
   131f0:	df000304 	addi	fp,sp,12
   131f4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   131f8:	e0bfff17 	ldw	r2,-4(fp)
   131fc:	10000816 	blt	r2,zero,13220 <close+0x3c>
   13200:	01400304 	movi	r5,12
   13204:	e13fff17 	ldw	r4,-4(fp)
   13208:	00131800 	call	13180 <__mulsi3>
   1320c:	1007883a 	mov	r3,r2
   13210:	008000b4 	movhi	r2,2
   13214:	10822804 	addi	r2,r2,2208
   13218:	1885883a 	add	r2,r3,r2
   1321c:	00000106 	br	13224 <close+0x40>
   13220:	0005883a 	mov	r2,zero
   13224:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   13228:	e0bffd17 	ldw	r2,-12(fp)
   1322c:	10001926 	beq	r2,zero,13294 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   13230:	e0bffd17 	ldw	r2,-12(fp)
   13234:	10800017 	ldw	r2,0(r2)
   13238:	10800417 	ldw	r2,16(r2)
   1323c:	10000626 	beq	r2,zero,13258 <close+0x74>
   13240:	e0bffd17 	ldw	r2,-12(fp)
   13244:	10800017 	ldw	r2,0(r2)
   13248:	10800417 	ldw	r2,16(r2)
   1324c:	e13ffd17 	ldw	r4,-12(fp)
   13250:	103ee83a 	callr	r2
   13254:	00000106 	br	1325c <close+0x78>
   13258:	0005883a 	mov	r2,zero
   1325c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   13260:	e13fff17 	ldw	r4,-4(fp)
   13264:	00138cc0 	call	138cc <alt_release_fd>
    if (rval < 0)
   13268:	e0bffe17 	ldw	r2,-8(fp)
   1326c:	1000070e 	bge	r2,zero,1328c <close+0xa8>
    {
      ALT_ERRNO = -rval;
   13270:	00131a80 	call	131a8 <alt_get_errno>
   13274:	1007883a 	mov	r3,r2
   13278:	e0bffe17 	ldw	r2,-8(fp)
   1327c:	0085c83a 	sub	r2,zero,r2
   13280:	18800015 	stw	r2,0(r3)
      return -1;
   13284:	00bfffc4 	movi	r2,-1
   13288:	00000706 	br	132a8 <close+0xc4>
    }
    return 0;
   1328c:	0005883a 	mov	r2,zero
   13290:	00000506 	br	132a8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   13294:	00131a80 	call	131a8 <alt_get_errno>
   13298:	1007883a 	mov	r3,r2
   1329c:	00801444 	movi	r2,81
   132a0:	18800015 	stw	r2,0(r3)
    return -1;
   132a4:	00bfffc4 	movi	r2,-1
  }
}
   132a8:	e037883a 	mov	sp,fp
   132ac:	dfc00117 	ldw	ra,4(sp)
   132b0:	df000017 	ldw	fp,0(sp)
   132b4:	dec00204 	addi	sp,sp,8
   132b8:	f800283a 	ret

000132bc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   132bc:	defffc04 	addi	sp,sp,-16
   132c0:	df000315 	stw	fp,12(sp)
   132c4:	df000304 	addi	fp,sp,12
   132c8:	e13ffd15 	stw	r4,-12(fp)
   132cc:	e17ffe15 	stw	r5,-8(fp)
   132d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
   132d4:	e0bfff17 	ldw	r2,-4(fp)
}
   132d8:	e037883a 	mov	sp,fp
   132dc:	df000017 	ldw	fp,0(sp)
   132e0:	dec00104 	addi	sp,sp,4
   132e4:	f800283a 	ret

000132e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   132e8:	defffe04 	addi	sp,sp,-8
   132ec:	dfc00115 	stw	ra,4(sp)
   132f0:	df000015 	stw	fp,0(sp)
   132f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   132f8:	d0a00917 	ldw	r2,-32732(gp)
   132fc:	10000326 	beq	r2,zero,1330c <alt_get_errno+0x24>
   13300:	d0a00917 	ldw	r2,-32732(gp)
   13304:	103ee83a 	callr	r2
   13308:	00000106 	br	13310 <alt_get_errno+0x28>
   1330c:	d0a01104 	addi	r2,gp,-32700
}
   13310:	e037883a 	mov	sp,fp
   13314:	dfc00117 	ldw	ra,4(sp)
   13318:	df000017 	ldw	fp,0(sp)
   1331c:	dec00204 	addi	sp,sp,8
   13320:	f800283a 	ret

00013324 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   13324:	defffb04 	addi	sp,sp,-20
   13328:	dfc00415 	stw	ra,16(sp)
   1332c:	df000315 	stw	fp,12(sp)
   13330:	df000304 	addi	fp,sp,12
   13334:	e13ffe15 	stw	r4,-8(fp)
   13338:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1333c:	e0bffe17 	ldw	r2,-8(fp)
   13340:	10000816 	blt	r2,zero,13364 <fstat+0x40>
   13344:	01400304 	movi	r5,12
   13348:	e13ffe17 	ldw	r4,-8(fp)
   1334c:	00131800 	call	13180 <__mulsi3>
   13350:	1007883a 	mov	r3,r2
   13354:	008000b4 	movhi	r2,2
   13358:	10822804 	addi	r2,r2,2208
   1335c:	1885883a 	add	r2,r3,r2
   13360:	00000106 	br	13368 <fstat+0x44>
   13364:	0005883a 	mov	r2,zero
   13368:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   1336c:	e0bffd17 	ldw	r2,-12(fp)
   13370:	10001026 	beq	r2,zero,133b4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   13374:	e0bffd17 	ldw	r2,-12(fp)
   13378:	10800017 	ldw	r2,0(r2)
   1337c:	10800817 	ldw	r2,32(r2)
   13380:	10000726 	beq	r2,zero,133a0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
   13384:	e0bffd17 	ldw	r2,-12(fp)
   13388:	10800017 	ldw	r2,0(r2)
   1338c:	10800817 	ldw	r2,32(r2)
   13390:	e17fff17 	ldw	r5,-4(fp)
   13394:	e13ffd17 	ldw	r4,-12(fp)
   13398:	103ee83a 	callr	r2
   1339c:	00000a06 	br	133c8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   133a0:	e0bfff17 	ldw	r2,-4(fp)
   133a4:	00c80004 	movi	r3,8192
   133a8:	10c00115 	stw	r3,4(r2)
      return 0;
   133ac:	0005883a 	mov	r2,zero
   133b0:	00000506 	br	133c8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   133b4:	00132e80 	call	132e8 <alt_get_errno>
   133b8:	1007883a 	mov	r3,r2
   133bc:	00801444 	movi	r2,81
   133c0:	18800015 	stw	r2,0(r3)
    return -1;
   133c4:	00bfffc4 	movi	r2,-1
  }
}
   133c8:	e037883a 	mov	sp,fp
   133cc:	dfc00117 	ldw	ra,4(sp)
   133d0:	df000017 	ldw	fp,0(sp)
   133d4:	dec00204 	addi	sp,sp,8
   133d8:	f800283a 	ret

000133dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   133dc:	defffe04 	addi	sp,sp,-8
   133e0:	dfc00115 	stw	ra,4(sp)
   133e4:	df000015 	stw	fp,0(sp)
   133e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   133ec:	d0a00917 	ldw	r2,-32732(gp)
   133f0:	10000326 	beq	r2,zero,13400 <alt_get_errno+0x24>
   133f4:	d0a00917 	ldw	r2,-32732(gp)
   133f8:	103ee83a 	callr	r2
   133fc:	00000106 	br	13404 <alt_get_errno+0x28>
   13400:	d0a01104 	addi	r2,gp,-32700
}
   13404:	e037883a 	mov	sp,fp
   13408:	dfc00117 	ldw	ra,4(sp)
   1340c:	df000017 	ldw	fp,0(sp)
   13410:	dec00204 	addi	sp,sp,8
   13414:	f800283a 	ret

00013418 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   13418:	deffed04 	addi	sp,sp,-76
   1341c:	dfc01215 	stw	ra,72(sp)
   13420:	df001115 	stw	fp,68(sp)
   13424:	df001104 	addi	fp,sp,68
   13428:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1342c:	e0bfff17 	ldw	r2,-4(fp)
   13430:	10000816 	blt	r2,zero,13454 <isatty+0x3c>
   13434:	01400304 	movi	r5,12
   13438:	e13fff17 	ldw	r4,-4(fp)
   1343c:	00131800 	call	13180 <__mulsi3>
   13440:	1007883a 	mov	r3,r2
   13444:	008000b4 	movhi	r2,2
   13448:	10822804 	addi	r2,r2,2208
   1344c:	1885883a 	add	r2,r3,r2
   13450:	00000106 	br	13458 <isatty+0x40>
   13454:	0005883a 	mov	r2,zero
   13458:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   1345c:	e0bfef17 	ldw	r2,-68(fp)
   13460:	10000e26 	beq	r2,zero,1349c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   13464:	e0bfef17 	ldw	r2,-68(fp)
   13468:	10800017 	ldw	r2,0(r2)
   1346c:	10800817 	ldw	r2,32(r2)
   13470:	1000021e 	bne	r2,zero,1347c <isatty+0x64>
    {
      return 1;
   13474:	00800044 	movi	r2,1
   13478:	00000d06 	br	134b0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   1347c:	e0bff004 	addi	r2,fp,-64
   13480:	100b883a 	mov	r5,r2
   13484:	e13fff17 	ldw	r4,-4(fp)
   13488:	00133240 	call	13324 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   1348c:	e0bff117 	ldw	r2,-60(fp)
   13490:	10880020 	cmpeqi	r2,r2,8192
   13494:	10803fcc 	andi	r2,r2,255
   13498:	00000506 	br	134b0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   1349c:	00133dc0 	call	133dc <alt_get_errno>
   134a0:	1007883a 	mov	r3,r2
   134a4:	00801444 	movi	r2,81
   134a8:	18800015 	stw	r2,0(r3)
    return 0;
   134ac:	0005883a 	mov	r2,zero
  }
}
   134b0:	e037883a 	mov	sp,fp
   134b4:	dfc00117 	ldw	ra,4(sp)
   134b8:	df000017 	ldw	fp,0(sp)
   134bc:	dec00204 	addi	sp,sp,8
   134c0:	f800283a 	ret

000134c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   134c4:	defffc04 	addi	sp,sp,-16
   134c8:	df000315 	stw	fp,12(sp)
   134cc:	df000304 	addi	fp,sp,12
   134d0:	e13ffd15 	stw	r4,-12(fp)
   134d4:	e17ffe15 	stw	r5,-8(fp)
   134d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   134dc:	e0fffe17 	ldw	r3,-8(fp)
   134e0:	e0bffd17 	ldw	r2,-12(fp)
   134e4:	18800c26 	beq	r3,r2,13518 <alt_load_section+0x54>
  {
    while( to != end )
   134e8:	00000806 	br	1350c <alt_load_section+0x48>
    {
      *to++ = *from++;
   134ec:	e0bffe17 	ldw	r2,-8(fp)
   134f0:	10c00104 	addi	r3,r2,4
   134f4:	e0fffe15 	stw	r3,-8(fp)
   134f8:	e0fffd17 	ldw	r3,-12(fp)
   134fc:	19000104 	addi	r4,r3,4
   13500:	e13ffd15 	stw	r4,-12(fp)
   13504:	18c00017 	ldw	r3,0(r3)
   13508:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   1350c:	e0fffe17 	ldw	r3,-8(fp)
   13510:	e0bfff17 	ldw	r2,-4(fp)
   13514:	18bff51e 	bne	r3,r2,134ec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   13518:	0001883a 	nop
   1351c:	e037883a 	mov	sp,fp
   13520:	df000017 	ldw	fp,0(sp)
   13524:	dec00104 	addi	sp,sp,4
   13528:	f800283a 	ret

0001352c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   1352c:	defffe04 	addi	sp,sp,-8
   13530:	dfc00115 	stw	ra,4(sp)
   13534:	df000015 	stw	fp,0(sp)
   13538:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   1353c:	018000b4 	movhi	r6,2
   13540:	3186ae04 	addi	r6,r6,6840
   13544:	014000b4 	movhi	r5,2
   13548:	29401304 	addi	r5,r5,76
   1354c:	01000074 	movhi	r4,1
   13550:	21168404 	addi	r4,r4,23056
   13554:	00134c40 	call	134c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   13558:	01800074 	movhi	r6,1
   1355c:	31808c04 	addi	r6,r6,560
   13560:	01400074 	movhi	r5,1
   13564:	29400804 	addi	r5,r5,32
   13568:	01000074 	movhi	r4,1
   1356c:	21000804 	addi	r4,r4,32
   13570:	00134c40 	call	134c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   13574:	018000b4 	movhi	r6,2
   13578:	31801304 	addi	r6,r6,76
   1357c:	014000b4 	movhi	r5,2
   13580:	29400004 	addi	r5,r5,0
   13584:	01000074 	movhi	r4,1
   13588:	21167104 	addi	r4,r4,22980
   1358c:	00134c40 	call	134c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   13590:	001490c0 	call	1490c <alt_dcache_flush_all>
  alt_icache_flush_all();
   13594:	0014acc0 	call	14acc <alt_icache_flush_all>
}
   13598:	0001883a 	nop
   1359c:	e037883a 	mov	sp,fp
   135a0:	dfc00117 	ldw	ra,4(sp)
   135a4:	df000017 	ldw	fp,0(sp)
   135a8:	dec00204 	addi	sp,sp,8
   135ac:	f800283a 	ret

000135b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   135b0:	defffe04 	addi	sp,sp,-8
   135b4:	dfc00115 	stw	ra,4(sp)
   135b8:	df000015 	stw	fp,0(sp)
   135bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   135c0:	d0a00917 	ldw	r2,-32732(gp)
   135c4:	10000326 	beq	r2,zero,135d4 <alt_get_errno+0x24>
   135c8:	d0a00917 	ldw	r2,-32732(gp)
   135cc:	103ee83a 	callr	r2
   135d0:	00000106 	br	135d8 <alt_get_errno+0x28>
   135d4:	d0a01104 	addi	r2,gp,-32700
}
   135d8:	e037883a 	mov	sp,fp
   135dc:	dfc00117 	ldw	ra,4(sp)
   135e0:	df000017 	ldw	fp,0(sp)
   135e4:	dec00204 	addi	sp,sp,8
   135e8:	f800283a 	ret

000135ec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   135ec:	defff904 	addi	sp,sp,-28
   135f0:	dfc00615 	stw	ra,24(sp)
   135f4:	df000515 	stw	fp,20(sp)
   135f8:	df000504 	addi	fp,sp,20
   135fc:	e13ffd15 	stw	r4,-12(fp)
   13600:	e17ffe15 	stw	r5,-8(fp)
   13604:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   13608:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   1360c:	e0bffd17 	ldw	r2,-12(fp)
   13610:	10000816 	blt	r2,zero,13634 <lseek+0x48>
   13614:	01400304 	movi	r5,12
   13618:	e13ffd17 	ldw	r4,-12(fp)
   1361c:	00131800 	call	13180 <__mulsi3>
   13620:	1007883a 	mov	r3,r2
   13624:	008000b4 	movhi	r2,2
   13628:	10822804 	addi	r2,r2,2208
   1362c:	1885883a 	add	r2,r3,r2
   13630:	00000106 	br	13638 <lseek+0x4c>
   13634:	0005883a 	mov	r2,zero
   13638:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   1363c:	e0bffc17 	ldw	r2,-16(fp)
   13640:	10001026 	beq	r2,zero,13684 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   13644:	e0bffc17 	ldw	r2,-16(fp)
   13648:	10800017 	ldw	r2,0(r2)
   1364c:	10800717 	ldw	r2,28(r2)
   13650:	10000926 	beq	r2,zero,13678 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   13654:	e0bffc17 	ldw	r2,-16(fp)
   13658:	10800017 	ldw	r2,0(r2)
   1365c:	10800717 	ldw	r2,28(r2)
   13660:	e1bfff17 	ldw	r6,-4(fp)
   13664:	e17ffe17 	ldw	r5,-8(fp)
   13668:	e13ffc17 	ldw	r4,-16(fp)
   1366c:	103ee83a 	callr	r2
   13670:	e0bffb15 	stw	r2,-20(fp)
   13674:	00000506 	br	1368c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   13678:	00bfde84 	movi	r2,-134
   1367c:	e0bffb15 	stw	r2,-20(fp)
   13680:	00000206 	br	1368c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
   13684:	00bfebc4 	movi	r2,-81
   13688:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   1368c:	e0bffb17 	ldw	r2,-20(fp)
   13690:	1000070e 	bge	r2,zero,136b0 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
   13694:	00135b00 	call	135b0 <alt_get_errno>
   13698:	1007883a 	mov	r3,r2
   1369c:	e0bffb17 	ldw	r2,-20(fp)
   136a0:	0085c83a 	sub	r2,zero,r2
   136a4:	18800015 	stw	r2,0(r3)
    rc = -1;
   136a8:	00bfffc4 	movi	r2,-1
   136ac:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   136b0:	e0bffb17 	ldw	r2,-20(fp)
}
   136b4:	e037883a 	mov	sp,fp
   136b8:	dfc00117 	ldw	ra,4(sp)
   136bc:	df000017 	ldw	fp,0(sp)
   136c0:	dec00204 	addi	sp,sp,8
   136c4:	f800283a 	ret

000136c8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   136c8:	defffd04 	addi	sp,sp,-12
   136cc:	dfc00215 	stw	ra,8(sp)
   136d0:	df000115 	stw	fp,4(sp)
   136d4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   136d8:	0009883a 	mov	r4,zero
   136dc:	0013ba00 	call	13ba0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   136e0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   136e4:	0013bd80 	call	13bd8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   136e8:	018000b4 	movhi	r6,2
   136ec:	31800904 	addi	r6,r6,36
   136f0:	014000b4 	movhi	r5,2
   136f4:	29400904 	addi	r5,r5,36
   136f8:	010000b4 	movhi	r4,2
   136fc:	21000904 	addi	r4,r4,36
   13700:	0014e700 	call	14e70 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   13704:	0014a0c0 	call	14a0c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   13708:	01000074 	movhi	r4,1
   1370c:	21129b04 	addi	r4,r4,19052
   13710:	00156300 	call	15630 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   13714:	d0a01217 	ldw	r2,-32696(gp)
   13718:	d0e01317 	ldw	r3,-32692(gp)
   1371c:	d1201417 	ldw	r4,-32688(gp)
   13720:	200d883a 	mov	r6,r4
   13724:	180b883a 	mov	r5,r3
   13728:	1009883a 	mov	r4,r2
   1372c:	00102d00 	call	102d0 <main>
   13730:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   13734:	01000044 	movi	r4,1
   13738:	00131e40 	call	131e4 <close>
  exit (result);
   1373c:	e13fff17 	ldw	r4,-4(fp)
   13740:	00156440 	call	15644 <exit>

00013744 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   13744:	defffe04 	addi	sp,sp,-8
   13748:	df000115 	stw	fp,4(sp)
   1374c:	df000104 	addi	fp,sp,4
   13750:	e13fff15 	stw	r4,-4(fp)
}
   13754:	0001883a 	nop
   13758:	e037883a 	mov	sp,fp
   1375c:	df000017 	ldw	fp,0(sp)
   13760:	dec00104 	addi	sp,sp,4
   13764:	f800283a 	ret

00013768 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   13768:	defffe04 	addi	sp,sp,-8
   1376c:	df000115 	stw	fp,4(sp)
   13770:	df000104 	addi	fp,sp,4
   13774:	e13fff15 	stw	r4,-4(fp)
}
   13778:	0001883a 	nop
   1377c:	e037883a 	mov	sp,fp
   13780:	df000017 	ldw	fp,0(sp)
   13784:	dec00104 	addi	sp,sp,4
   13788:	f800283a 	ret

0001378c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1378c:	defffe04 	addi	sp,sp,-8
   13790:	dfc00115 	stw	ra,4(sp)
   13794:	df000015 	stw	fp,0(sp)
   13798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1379c:	d0a00917 	ldw	r2,-32732(gp)
   137a0:	10000326 	beq	r2,zero,137b0 <alt_get_errno+0x24>
   137a4:	d0a00917 	ldw	r2,-32732(gp)
   137a8:	103ee83a 	callr	r2
   137ac:	00000106 	br	137b4 <alt_get_errno+0x28>
   137b0:	d0a01104 	addi	r2,gp,-32700
}
   137b4:	e037883a 	mov	sp,fp
   137b8:	dfc00117 	ldw	ra,4(sp)
   137bc:	df000017 	ldw	fp,0(sp)
   137c0:	dec00204 	addi	sp,sp,8
   137c4:	f800283a 	ret

000137c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   137c8:	defff904 	addi	sp,sp,-28
   137cc:	dfc00615 	stw	ra,24(sp)
   137d0:	df000515 	stw	fp,20(sp)
   137d4:	df000504 	addi	fp,sp,20
   137d8:	e13ffd15 	stw	r4,-12(fp)
   137dc:	e17ffe15 	stw	r5,-8(fp)
   137e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   137e4:	e0bffd17 	ldw	r2,-12(fp)
   137e8:	10000816 	blt	r2,zero,1380c <read+0x44>
   137ec:	01400304 	movi	r5,12
   137f0:	e13ffd17 	ldw	r4,-12(fp)
   137f4:	00131800 	call	13180 <__mulsi3>
   137f8:	1007883a 	mov	r3,r2
   137fc:	008000b4 	movhi	r2,2
   13800:	10822804 	addi	r2,r2,2208
   13804:	1885883a 	add	r2,r3,r2
   13808:	00000106 	br	13810 <read+0x48>
   1380c:	0005883a 	mov	r2,zero
   13810:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13814:	e0bffb17 	ldw	r2,-20(fp)
   13818:	10002226 	beq	r2,zero,138a4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1381c:	e0bffb17 	ldw	r2,-20(fp)
   13820:	10800217 	ldw	r2,8(r2)
   13824:	108000cc 	andi	r2,r2,3
   13828:	10800060 	cmpeqi	r2,r2,1
   1382c:	1000181e 	bne	r2,zero,13890 <read+0xc8>
        (fd->dev->read))
   13830:	e0bffb17 	ldw	r2,-20(fp)
   13834:	10800017 	ldw	r2,0(r2)
   13838:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   1383c:	10001426 	beq	r2,zero,13890 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   13840:	e0bffb17 	ldw	r2,-20(fp)
   13844:	10800017 	ldw	r2,0(r2)
   13848:	10800517 	ldw	r2,20(r2)
   1384c:	e0ffff17 	ldw	r3,-4(fp)
   13850:	180d883a 	mov	r6,r3
   13854:	e17ffe17 	ldw	r5,-8(fp)
   13858:	e13ffb17 	ldw	r4,-20(fp)
   1385c:	103ee83a 	callr	r2
   13860:	e0bffc15 	stw	r2,-16(fp)
   13864:	e0bffc17 	ldw	r2,-16(fp)
   13868:	1000070e 	bge	r2,zero,13888 <read+0xc0>
        {
          ALT_ERRNO = -rval;
   1386c:	001378c0 	call	1378c <alt_get_errno>
   13870:	1007883a 	mov	r3,r2
   13874:	e0bffc17 	ldw	r2,-16(fp)
   13878:	0085c83a 	sub	r2,zero,r2
   1387c:	18800015 	stw	r2,0(r3)
          return -1;
   13880:	00bfffc4 	movi	r2,-1
   13884:	00000c06 	br	138b8 <read+0xf0>
        }
        return rval;
   13888:	e0bffc17 	ldw	r2,-16(fp)
   1388c:	00000a06 	br	138b8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
   13890:	001378c0 	call	1378c <alt_get_errno>
   13894:	1007883a 	mov	r3,r2
   13898:	00800344 	movi	r2,13
   1389c:	18800015 	stw	r2,0(r3)
   138a0:	00000406 	br	138b4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   138a4:	001378c0 	call	1378c <alt_get_errno>
   138a8:	1007883a 	mov	r3,r2
   138ac:	00801444 	movi	r2,81
   138b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   138b4:	00bfffc4 	movi	r2,-1
}
   138b8:	e037883a 	mov	sp,fp
   138bc:	dfc00117 	ldw	ra,4(sp)
   138c0:	df000017 	ldw	fp,0(sp)
   138c4:	dec00204 	addi	sp,sp,8
   138c8:	f800283a 	ret

000138cc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   138cc:	defffc04 	addi	sp,sp,-16
   138d0:	dfc00315 	stw	ra,12(sp)
   138d4:	df000215 	stw	fp,8(sp)
   138d8:	dc000115 	stw	r16,4(sp)
   138dc:	df000204 	addi	fp,sp,8
   138e0:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
   138e4:	e0bffe17 	ldw	r2,-8(fp)
   138e8:	108000d0 	cmplti	r2,r2,3
   138ec:	1000111e 	bne	r2,zero,13934 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
   138f0:	040000b4 	movhi	r16,2
   138f4:	84022804 	addi	r16,r16,2208
   138f8:	e0bffe17 	ldw	r2,-8(fp)
   138fc:	01400304 	movi	r5,12
   13900:	1009883a 	mov	r4,r2
   13904:	00131800 	call	13180 <__mulsi3>
   13908:	8085883a 	add	r2,r16,r2
   1390c:	10800204 	addi	r2,r2,8
   13910:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   13914:	040000b4 	movhi	r16,2
   13918:	84022804 	addi	r16,r16,2208
   1391c:	e0bffe17 	ldw	r2,-8(fp)
   13920:	01400304 	movi	r5,12
   13924:	1009883a 	mov	r4,r2
   13928:	00131800 	call	13180 <__mulsi3>
   1392c:	8085883a 	add	r2,r16,r2
   13930:	10000015 	stw	zero,0(r2)
  }
}
   13934:	0001883a 	nop
   13938:	e6ffff04 	addi	sp,fp,-4
   1393c:	dfc00217 	ldw	ra,8(sp)
   13940:	df000117 	ldw	fp,4(sp)
   13944:	dc000017 	ldw	r16,0(sp)
   13948:	dec00304 	addi	sp,sp,12
   1394c:	f800283a 	ret

00013950 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   13950:	defff904 	addi	sp,sp,-28
   13954:	df000615 	stw	fp,24(sp)
   13958:	df000604 	addi	fp,sp,24
   1395c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   13960:	0005303a 	rdctl	r2,status
   13964:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   13968:	e0fffe17 	ldw	r3,-8(fp)
   1396c:	00bfff84 	movi	r2,-2
   13970:	1884703a 	and	r2,r3,r2
   13974:	1001703a 	wrctl	status,r2
  
  return context;
   13978:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   1397c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   13980:	d0a00a17 	ldw	r2,-32728(gp)
   13984:	10c000c4 	addi	r3,r2,3
   13988:	00bfff04 	movi	r2,-4
   1398c:	1884703a 	and	r2,r3,r2
   13990:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   13994:	d0e00a17 	ldw	r3,-32728(gp)
   13998:	e0bfff17 	ldw	r2,-4(fp)
   1399c:	1887883a 	add	r3,r3,r2
   139a0:	008000f4 	movhi	r2,3
   139a4:	10800004 	addi	r2,r2,0
   139a8:	10c0062e 	bgeu	r2,r3,139c4 <sbrk+0x74>
   139ac:	e0bffb17 	ldw	r2,-20(fp)
   139b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   139b4:	e0bffa17 	ldw	r2,-24(fp)
   139b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   139bc:	00bfffc4 	movi	r2,-1
   139c0:	00000b06 	br	139f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   139c4:	d0a00a17 	ldw	r2,-32728(gp)
   139c8:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   139cc:	d0e00a17 	ldw	r3,-32728(gp)
   139d0:	e0bfff17 	ldw	r2,-4(fp)
   139d4:	1885883a 	add	r2,r3,r2
   139d8:	d0a00a15 	stw	r2,-32728(gp)
   139dc:	e0bffb17 	ldw	r2,-20(fp)
   139e0:	e0bffc15 	stw	r2,-16(fp)
   139e4:	e0bffc17 	ldw	r2,-16(fp)
   139e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   139ec:	e0bffd17 	ldw	r2,-12(fp)
} 
   139f0:	e037883a 	mov	sp,fp
   139f4:	df000017 	ldw	fp,0(sp)
   139f8:	dec00104 	addi	sp,sp,4
   139fc:	f800283a 	ret

00013a00 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   13a00:	defffd04 	addi	sp,sp,-12
   13a04:	dfc00215 	stw	ra,8(sp)
   13a08:	df000115 	stw	fp,4(sp)
   13a0c:	df000104 	addi	fp,sp,4
   13a10:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   13a14:	e13fff17 	ldw	r4,-4(fp)
   13a18:	00147b40 	call	147b4 <alt_busy_sleep>
}
   13a1c:	e037883a 	mov	sp,fp
   13a20:	dfc00117 	ldw	ra,4(sp)
   13a24:	df000017 	ldw	fp,0(sp)
   13a28:	dec00204 	addi	sp,sp,8
   13a2c:	f800283a 	ret

00013a30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   13a30:	defffe04 	addi	sp,sp,-8
   13a34:	dfc00115 	stw	ra,4(sp)
   13a38:	df000015 	stw	fp,0(sp)
   13a3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   13a40:	d0a00917 	ldw	r2,-32732(gp)
   13a44:	10000326 	beq	r2,zero,13a54 <alt_get_errno+0x24>
   13a48:	d0a00917 	ldw	r2,-32732(gp)
   13a4c:	103ee83a 	callr	r2
   13a50:	00000106 	br	13a58 <alt_get_errno+0x28>
   13a54:	d0a01104 	addi	r2,gp,-32700
}
   13a58:	e037883a 	mov	sp,fp
   13a5c:	dfc00117 	ldw	ra,4(sp)
   13a60:	df000017 	ldw	fp,0(sp)
   13a64:	dec00204 	addi	sp,sp,8
   13a68:	f800283a 	ret

00013a6c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   13a6c:	defff904 	addi	sp,sp,-28
   13a70:	dfc00615 	stw	ra,24(sp)
   13a74:	df000515 	stw	fp,20(sp)
   13a78:	df000504 	addi	fp,sp,20
   13a7c:	e13ffd15 	stw	r4,-12(fp)
   13a80:	e17ffe15 	stw	r5,-8(fp)
   13a84:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   13a88:	e0bffd17 	ldw	r2,-12(fp)
   13a8c:	10000816 	blt	r2,zero,13ab0 <write+0x44>
   13a90:	01400304 	movi	r5,12
   13a94:	e13ffd17 	ldw	r4,-12(fp)
   13a98:	00131800 	call	13180 <__mulsi3>
   13a9c:	1007883a 	mov	r3,r2
   13aa0:	008000b4 	movhi	r2,2
   13aa4:	10822804 	addi	r2,r2,2208
   13aa8:	1885883a 	add	r2,r3,r2
   13aac:	00000106 	br	13ab4 <write+0x48>
   13ab0:	0005883a 	mov	r2,zero
   13ab4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   13ab8:	e0bffb17 	ldw	r2,-20(fp)
   13abc:	10002126 	beq	r2,zero,13b44 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   13ac0:	e0bffb17 	ldw	r2,-20(fp)
   13ac4:	10800217 	ldw	r2,8(r2)
   13ac8:	108000cc 	andi	r2,r2,3
   13acc:	10001826 	beq	r2,zero,13b30 <write+0xc4>
   13ad0:	e0bffb17 	ldw	r2,-20(fp)
   13ad4:	10800017 	ldw	r2,0(r2)
   13ad8:	10800617 	ldw	r2,24(r2)
   13adc:	10001426 	beq	r2,zero,13b30 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   13ae0:	e0bffb17 	ldw	r2,-20(fp)
   13ae4:	10800017 	ldw	r2,0(r2)
   13ae8:	10800617 	ldw	r2,24(r2)
   13aec:	e0ffff17 	ldw	r3,-4(fp)
   13af0:	180d883a 	mov	r6,r3
   13af4:	e17ffe17 	ldw	r5,-8(fp)
   13af8:	e13ffb17 	ldw	r4,-20(fp)
   13afc:	103ee83a 	callr	r2
   13b00:	e0bffc15 	stw	r2,-16(fp)
   13b04:	e0bffc17 	ldw	r2,-16(fp)
   13b08:	1000070e 	bge	r2,zero,13b28 <write+0xbc>
      {
        ALT_ERRNO = -rval;
   13b0c:	0013a300 	call	13a30 <alt_get_errno>
   13b10:	1007883a 	mov	r3,r2
   13b14:	e0bffc17 	ldw	r2,-16(fp)
   13b18:	0085c83a 	sub	r2,zero,r2
   13b1c:	18800015 	stw	r2,0(r3)
        return -1;
   13b20:	00bfffc4 	movi	r2,-1
   13b24:	00000c06 	br	13b58 <write+0xec>
      }
      return rval;
   13b28:	e0bffc17 	ldw	r2,-16(fp)
   13b2c:	00000a06 	br	13b58 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
   13b30:	0013a300 	call	13a30 <alt_get_errno>
   13b34:	1007883a 	mov	r3,r2
   13b38:	00800344 	movi	r2,13
   13b3c:	18800015 	stw	r2,0(r3)
   13b40:	00000406 	br	13b54 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   13b44:	0013a300 	call	13a30 <alt_get_errno>
   13b48:	1007883a 	mov	r3,r2
   13b4c:	00801444 	movi	r2,81
   13b50:	18800015 	stw	r2,0(r3)
  }
  return -1;
   13b54:	00bfffc4 	movi	r2,-1
}
   13b58:	e037883a 	mov	sp,fp
   13b5c:	dfc00117 	ldw	ra,4(sp)
   13b60:	df000017 	ldw	fp,0(sp)
   13b64:	dec00204 	addi	sp,sp,8
   13b68:	f800283a 	ret

00013b6c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   13b6c:	defffd04 	addi	sp,sp,-12
   13b70:	dfc00215 	stw	ra,8(sp)
   13b74:	df000115 	stw	fp,4(sp)
   13b78:	df000104 	addi	fp,sp,4
   13b7c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   13b80:	d1600604 	addi	r5,gp,-32744
   13b84:	e13fff17 	ldw	r4,-4(fp)
   13b88:	00149680 	call	14968 <alt_dev_llist_insert>
}
   13b8c:	e037883a 	mov	sp,fp
   13b90:	dfc00117 	ldw	ra,4(sp)
   13b94:	df000017 	ldw	fp,0(sp)
   13b98:	dec00204 	addi	sp,sp,8
   13b9c:	f800283a 	ret

00013ba0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   13ba0:	defffd04 	addi	sp,sp,-12
   13ba4:	dfc00215 	stw	ra,8(sp)
   13ba8:	df000115 	stw	fp,4(sp)
   13bac:	df000104 	addi	fp,sp,4
   13bb0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   13bb4:	00153140 	call	15314 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   13bb8:	00800044 	movi	r2,1
   13bbc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   13bc0:	0001883a 	nop
   13bc4:	e037883a 	mov	sp,fp
   13bc8:	dfc00117 	ldw	ra,4(sp)
   13bcc:	df000017 	ldw	fp,0(sp)
   13bd0:	dec00204 	addi	sp,sp,8
   13bd4:	f800283a 	ret

00013bd8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   13bd8:	defffe04 	addi	sp,sp,-8
   13bdc:	dfc00115 	stw	ra,4(sp)
   13be0:	df000015 	stw	fp,0(sp)
   13be4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   13be8:	000d883a 	mov	r6,zero
   13bec:	000b883a 	mov	r5,zero
   13bf0:	010000b4 	movhi	r4,2
   13bf4:	21029204 	addi	r4,r4,2632
   13bf8:	0013d840 	call	13d84 <altera_avalon_jtag_uart_init>
   13bfc:	010000b4 	movhi	r4,2
   13c00:	21028804 	addi	r4,r4,2592
   13c04:	0013b6c0 	call	13b6c <alt_dev_reg>
}
   13c08:	0001883a 	nop
   13c0c:	e037883a 	mov	sp,fp
   13c10:	dfc00117 	ldw	ra,4(sp)
   13c14:	df000017 	ldw	fp,0(sp)
   13c18:	dec00204 	addi	sp,sp,8
   13c1c:	f800283a 	ret

00013c20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   13c20:	defffa04 	addi	sp,sp,-24
   13c24:	dfc00515 	stw	ra,20(sp)
   13c28:	df000415 	stw	fp,16(sp)
   13c2c:	df000404 	addi	fp,sp,16
   13c30:	e13ffd15 	stw	r4,-12(fp)
   13c34:	e17ffe15 	stw	r5,-8(fp)
   13c38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13c3c:	e0bffd17 	ldw	r2,-12(fp)
   13c40:	10800017 	ldw	r2,0(r2)
   13c44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   13c48:	e0bffc17 	ldw	r2,-16(fp)
   13c4c:	10c00a04 	addi	r3,r2,40
   13c50:	e0bffd17 	ldw	r2,-12(fp)
   13c54:	10800217 	ldw	r2,8(r2)
   13c58:	100f883a 	mov	r7,r2
   13c5c:	e1bfff17 	ldw	r6,-4(fp)
   13c60:	e17ffe17 	ldw	r5,-8(fp)
   13c64:	1809883a 	mov	r4,r3
   13c68:	00142480 	call	14248 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   13c6c:	e037883a 	mov	sp,fp
   13c70:	dfc00117 	ldw	ra,4(sp)
   13c74:	df000017 	ldw	fp,0(sp)
   13c78:	dec00204 	addi	sp,sp,8
   13c7c:	f800283a 	ret

00013c80 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   13c80:	defffa04 	addi	sp,sp,-24
   13c84:	dfc00515 	stw	ra,20(sp)
   13c88:	df000415 	stw	fp,16(sp)
   13c8c:	df000404 	addi	fp,sp,16
   13c90:	e13ffd15 	stw	r4,-12(fp)
   13c94:	e17ffe15 	stw	r5,-8(fp)
   13c98:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13c9c:	e0bffd17 	ldw	r2,-12(fp)
   13ca0:	10800017 	ldw	r2,0(r2)
   13ca4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   13ca8:	e0bffc17 	ldw	r2,-16(fp)
   13cac:	10c00a04 	addi	r3,r2,40
   13cb0:	e0bffd17 	ldw	r2,-12(fp)
   13cb4:	10800217 	ldw	r2,8(r2)
   13cb8:	100f883a 	mov	r7,r2
   13cbc:	e1bfff17 	ldw	r6,-4(fp)
   13cc0:	e17ffe17 	ldw	r5,-8(fp)
   13cc4:	1809883a 	mov	r4,r3
   13cc8:	00144640 	call	14464 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   13ccc:	e037883a 	mov	sp,fp
   13cd0:	dfc00117 	ldw	ra,4(sp)
   13cd4:	df000017 	ldw	fp,0(sp)
   13cd8:	dec00204 	addi	sp,sp,8
   13cdc:	f800283a 	ret

00013ce0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   13ce0:	defffc04 	addi	sp,sp,-16
   13ce4:	dfc00315 	stw	ra,12(sp)
   13ce8:	df000215 	stw	fp,8(sp)
   13cec:	df000204 	addi	fp,sp,8
   13cf0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   13cf4:	e0bfff17 	ldw	r2,-4(fp)
   13cf8:	10800017 	ldw	r2,0(r2)
   13cfc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   13d00:	e0bffe17 	ldw	r2,-8(fp)
   13d04:	10c00a04 	addi	r3,r2,40
   13d08:	e0bfff17 	ldw	r2,-4(fp)
   13d0c:	10800217 	ldw	r2,8(r2)
   13d10:	100b883a 	mov	r5,r2
   13d14:	1809883a 	mov	r4,r3
   13d18:	00140f00 	call	140f0 <altera_avalon_jtag_uart_close>
}
   13d1c:	e037883a 	mov	sp,fp
   13d20:	dfc00117 	ldw	ra,4(sp)
   13d24:	df000017 	ldw	fp,0(sp)
   13d28:	dec00204 	addi	sp,sp,8
   13d2c:	f800283a 	ret

00013d30 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   13d30:	defffa04 	addi	sp,sp,-24
   13d34:	dfc00515 	stw	ra,20(sp)
   13d38:	df000415 	stw	fp,16(sp)
   13d3c:	df000404 	addi	fp,sp,16
   13d40:	e13ffd15 	stw	r4,-12(fp)
   13d44:	e17ffe15 	stw	r5,-8(fp)
   13d48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   13d4c:	e0bffd17 	ldw	r2,-12(fp)
   13d50:	10800017 	ldw	r2,0(r2)
   13d54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   13d58:	e0bffc17 	ldw	r2,-16(fp)
   13d5c:	10800a04 	addi	r2,r2,40
   13d60:	e1bfff17 	ldw	r6,-4(fp)
   13d64:	e17ffe17 	ldw	r5,-8(fp)
   13d68:	1009883a 	mov	r4,r2
   13d6c:	00141580 	call	14158 <altera_avalon_jtag_uart_ioctl>
}
   13d70:	e037883a 	mov	sp,fp
   13d74:	dfc00117 	ldw	ra,4(sp)
   13d78:	df000017 	ldw	fp,0(sp)
   13d7c:	dec00204 	addi	sp,sp,8
   13d80:	f800283a 	ret

00013d84 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   13d84:	defffa04 	addi	sp,sp,-24
   13d88:	dfc00515 	stw	ra,20(sp)
   13d8c:	df000415 	stw	fp,16(sp)
   13d90:	df000404 	addi	fp,sp,16
   13d94:	e13ffd15 	stw	r4,-12(fp)
   13d98:	e17ffe15 	stw	r5,-8(fp)
   13d9c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13da0:	e0bffd17 	ldw	r2,-12(fp)
   13da4:	00c00044 	movi	r3,1
   13da8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   13dac:	e0bffd17 	ldw	r2,-12(fp)
   13db0:	10800017 	ldw	r2,0(r2)
   13db4:	10800104 	addi	r2,r2,4
   13db8:	1007883a 	mov	r3,r2
   13dbc:	e0bffd17 	ldw	r2,-12(fp)
   13dc0:	10800817 	ldw	r2,32(r2)
   13dc4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   13dc8:	e0bffe17 	ldw	r2,-8(fp)
   13dcc:	e0ffff17 	ldw	r3,-4(fp)
   13dd0:	d8000015 	stw	zero,0(sp)
   13dd4:	e1fffd17 	ldw	r7,-12(fp)
   13dd8:	01800074 	movhi	r6,1
   13ddc:	318f9104 	addi	r6,r6,15940
   13de0:	180b883a 	mov	r5,r3
   13de4:	1009883a 	mov	r4,r2
   13de8:	0014aec0 	call	14aec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   13dec:	e0bffd17 	ldw	r2,-12(fp)
   13df0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   13df4:	e0bffd17 	ldw	r2,-12(fp)
   13df8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   13dfc:	d0e01617 	ldw	r3,-32680(gp)
   13e00:	e1fffd17 	ldw	r7,-12(fp)
   13e04:	01800074 	movhi	r6,1
   13e08:	31901404 	addi	r6,r6,16464
   13e0c:	180b883a 	mov	r5,r3
   13e10:	1009883a 	mov	r4,r2
   13e14:	00146880 	call	14688 <alt_alarm_start>
   13e18:	1000040e 	bge	r2,zero,13e2c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   13e1c:	e0fffd17 	ldw	r3,-12(fp)
   13e20:	00a00034 	movhi	r2,32768
   13e24:	10bfffc4 	addi	r2,r2,-1
   13e28:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   13e2c:	0001883a 	nop
   13e30:	e037883a 	mov	sp,fp
   13e34:	dfc00117 	ldw	ra,4(sp)
   13e38:	df000017 	ldw	fp,0(sp)
   13e3c:	dec00204 	addi	sp,sp,8
   13e40:	f800283a 	ret

00013e44 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   13e44:	defff804 	addi	sp,sp,-32
   13e48:	df000715 	stw	fp,28(sp)
   13e4c:	df000704 	addi	fp,sp,28
   13e50:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   13e54:	e0bfff17 	ldw	r2,-4(fp)
   13e58:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   13e5c:	e0bffb17 	ldw	r2,-20(fp)
   13e60:	10800017 	ldw	r2,0(r2)
   13e64:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13e68:	e0bffc17 	ldw	r2,-16(fp)
   13e6c:	10800104 	addi	r2,r2,4
   13e70:	10800037 	ldwio	r2,0(r2)
   13e74:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   13e78:	e0bffd17 	ldw	r2,-12(fp)
   13e7c:	1080c00c 	andi	r2,r2,768
   13e80:	10006d26 	beq	r2,zero,14038 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   13e84:	e0bffd17 	ldw	r2,-12(fp)
   13e88:	1080400c 	andi	r2,r2,256
   13e8c:	10003526 	beq	r2,zero,13f64 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   13e90:	00800074 	movhi	r2,1
   13e94:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13e98:	e0bffb17 	ldw	r2,-20(fp)
   13e9c:	10800a17 	ldw	r2,40(r2)
   13ea0:	10800044 	addi	r2,r2,1
   13ea4:	1081ffcc 	andi	r2,r2,2047
   13ea8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   13eac:	e0bffb17 	ldw	r2,-20(fp)
   13eb0:	10c00b17 	ldw	r3,44(r2)
   13eb4:	e0bffe17 	ldw	r2,-8(fp)
   13eb8:	18801526 	beq	r3,r2,13f10 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   13ebc:	e0bffc17 	ldw	r2,-16(fp)
   13ec0:	10800037 	ldwio	r2,0(r2)
   13ec4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   13ec8:	e0bff917 	ldw	r2,-28(fp)
   13ecc:	10a0000c 	andi	r2,r2,32768
   13ed0:	10001126 	beq	r2,zero,13f18 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   13ed4:	e0bffb17 	ldw	r2,-20(fp)
   13ed8:	10800a17 	ldw	r2,40(r2)
   13edc:	e0fff917 	ldw	r3,-28(fp)
   13ee0:	1809883a 	mov	r4,r3
   13ee4:	e0fffb17 	ldw	r3,-20(fp)
   13ee8:	1885883a 	add	r2,r3,r2
   13eec:	10800e04 	addi	r2,r2,56
   13ef0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13ef4:	e0bffb17 	ldw	r2,-20(fp)
   13ef8:	10800a17 	ldw	r2,40(r2)
   13efc:	10800044 	addi	r2,r2,1
   13f00:	10c1ffcc 	andi	r3,r2,2047
   13f04:	e0bffb17 	ldw	r2,-20(fp)
   13f08:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   13f0c:	003fe206 	br	13e98 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   13f10:	0001883a 	nop
   13f14:	00000106 	br	13f1c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   13f18:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   13f1c:	e0bff917 	ldw	r2,-28(fp)
   13f20:	10bfffec 	andhi	r2,r2,65535
   13f24:	10000f26 	beq	r2,zero,13f64 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   13f28:	e0bffb17 	ldw	r2,-20(fp)
   13f2c:	10c00817 	ldw	r3,32(r2)
   13f30:	00bfff84 	movi	r2,-2
   13f34:	1886703a 	and	r3,r3,r2
   13f38:	e0bffb17 	ldw	r2,-20(fp)
   13f3c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   13f40:	e0bffc17 	ldw	r2,-16(fp)
   13f44:	10800104 	addi	r2,r2,4
   13f48:	1007883a 	mov	r3,r2
   13f4c:	e0bffb17 	ldw	r2,-20(fp)
   13f50:	10800817 	ldw	r2,32(r2)
   13f54:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   13f58:	e0bffc17 	ldw	r2,-16(fp)
   13f5c:	10800104 	addi	r2,r2,4
   13f60:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   13f64:	e0bffd17 	ldw	r2,-12(fp)
   13f68:	1080800c 	andi	r2,r2,512
   13f6c:	103fbe26 	beq	r2,zero,13e68 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   13f70:	e0bffd17 	ldw	r2,-12(fp)
   13f74:	1004d43a 	srli	r2,r2,16
   13f78:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   13f7c:	00001406 	br	13fd0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   13f80:	e0bffc17 	ldw	r2,-16(fp)
   13f84:	e0fffb17 	ldw	r3,-20(fp)
   13f88:	18c00d17 	ldw	r3,52(r3)
   13f8c:	e13ffb17 	ldw	r4,-20(fp)
   13f90:	20c7883a 	add	r3,r4,r3
   13f94:	18c20e04 	addi	r3,r3,2104
   13f98:	18c00003 	ldbu	r3,0(r3)
   13f9c:	18c03fcc 	andi	r3,r3,255
   13fa0:	18c0201c 	xori	r3,r3,128
   13fa4:	18ffe004 	addi	r3,r3,-128
   13fa8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   13fac:	e0bffb17 	ldw	r2,-20(fp)
   13fb0:	10800d17 	ldw	r2,52(r2)
   13fb4:	10800044 	addi	r2,r2,1
   13fb8:	10c1ffcc 	andi	r3,r2,2047
   13fbc:	e0bffb17 	ldw	r2,-20(fp)
   13fc0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   13fc4:	e0bffa17 	ldw	r2,-24(fp)
   13fc8:	10bfffc4 	addi	r2,r2,-1
   13fcc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   13fd0:	e0bffa17 	ldw	r2,-24(fp)
   13fd4:	10000526 	beq	r2,zero,13fec <altera_avalon_jtag_uart_irq+0x1a8>
   13fd8:	e0bffb17 	ldw	r2,-20(fp)
   13fdc:	10c00d17 	ldw	r3,52(r2)
   13fe0:	e0bffb17 	ldw	r2,-20(fp)
   13fe4:	10800c17 	ldw	r2,48(r2)
   13fe8:	18bfe51e 	bne	r3,r2,13f80 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   13fec:	e0bffa17 	ldw	r2,-24(fp)
   13ff0:	103f9d26 	beq	r2,zero,13e68 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   13ff4:	e0bffb17 	ldw	r2,-20(fp)
   13ff8:	10c00817 	ldw	r3,32(r2)
   13ffc:	00bfff44 	movi	r2,-3
   14000:	1886703a 	and	r3,r3,r2
   14004:	e0bffb17 	ldw	r2,-20(fp)
   14008:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   1400c:	e0bffb17 	ldw	r2,-20(fp)
   14010:	10800017 	ldw	r2,0(r2)
   14014:	10800104 	addi	r2,r2,4
   14018:	1007883a 	mov	r3,r2
   1401c:	e0bffb17 	ldw	r2,-20(fp)
   14020:	10800817 	ldw	r2,32(r2)
   14024:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   14028:	e0bffc17 	ldw	r2,-16(fp)
   1402c:	10800104 	addi	r2,r2,4
   14030:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   14034:	003f8c06 	br	13e68 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   14038:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   1403c:	0001883a 	nop
   14040:	e037883a 	mov	sp,fp
   14044:	df000017 	ldw	fp,0(sp)
   14048:	dec00104 	addi	sp,sp,4
   1404c:	f800283a 	ret

00014050 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   14050:	defff804 	addi	sp,sp,-32
   14054:	df000715 	stw	fp,28(sp)
   14058:	df000704 	addi	fp,sp,28
   1405c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   14060:	e0bffb17 	ldw	r2,-20(fp)
   14064:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   14068:	e0bff917 	ldw	r2,-28(fp)
   1406c:	10800017 	ldw	r2,0(r2)
   14070:	10800104 	addi	r2,r2,4
   14074:	10800037 	ldwio	r2,0(r2)
   14078:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   1407c:	e0bffa17 	ldw	r2,-24(fp)
   14080:	1081000c 	andi	r2,r2,1024
   14084:	10000b26 	beq	r2,zero,140b4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   14088:	e0bff917 	ldw	r2,-28(fp)
   1408c:	10800017 	ldw	r2,0(r2)
   14090:	10800104 	addi	r2,r2,4
   14094:	1007883a 	mov	r3,r2
   14098:	e0bff917 	ldw	r2,-28(fp)
   1409c:	10800817 	ldw	r2,32(r2)
   140a0:	10810014 	ori	r2,r2,1024
   140a4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   140a8:	e0bff917 	ldw	r2,-28(fp)
   140ac:	10000915 	stw	zero,36(r2)
   140b0:	00000a06 	br	140dc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   140b4:	e0bff917 	ldw	r2,-28(fp)
   140b8:	10c00917 	ldw	r3,36(r2)
   140bc:	00a00034 	movhi	r2,32768
   140c0:	10bfff04 	addi	r2,r2,-4
   140c4:	10c00536 	bltu	r2,r3,140dc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   140c8:	e0bff917 	ldw	r2,-28(fp)
   140cc:	10800917 	ldw	r2,36(r2)
   140d0:	10c00044 	addi	r3,r2,1
   140d4:	e0bff917 	ldw	r2,-28(fp)
   140d8:	10c00915 	stw	r3,36(r2)
   140dc:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   140e0:	e037883a 	mov	sp,fp
   140e4:	df000017 	ldw	fp,0(sp)
   140e8:	dec00104 	addi	sp,sp,4
   140ec:	f800283a 	ret

000140f0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   140f0:	defffd04 	addi	sp,sp,-12
   140f4:	df000215 	stw	fp,8(sp)
   140f8:	df000204 	addi	fp,sp,8
   140fc:	e13ffe15 	stw	r4,-8(fp)
   14100:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   14104:	00000506 	br	1411c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   14108:	e0bfff17 	ldw	r2,-4(fp)
   1410c:	1090000c 	andi	r2,r2,16384
   14110:	10000226 	beq	r2,zero,1411c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   14114:	00bffd44 	movi	r2,-11
   14118:	00000b06 	br	14148 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   1411c:	e0bffe17 	ldw	r2,-8(fp)
   14120:	10c00d17 	ldw	r3,52(r2)
   14124:	e0bffe17 	ldw	r2,-8(fp)
   14128:	10800c17 	ldw	r2,48(r2)
   1412c:	18800526 	beq	r3,r2,14144 <altera_avalon_jtag_uart_close+0x54>
   14130:	e0bffe17 	ldw	r2,-8(fp)
   14134:	10c00917 	ldw	r3,36(r2)
   14138:	e0bffe17 	ldw	r2,-8(fp)
   1413c:	10800117 	ldw	r2,4(r2)
   14140:	18bff136 	bltu	r3,r2,14108 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   14144:	0005883a 	mov	r2,zero
}
   14148:	e037883a 	mov	sp,fp
   1414c:	df000017 	ldw	fp,0(sp)
   14150:	dec00104 	addi	sp,sp,4
   14154:	f800283a 	ret

00014158 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   14158:	defffa04 	addi	sp,sp,-24
   1415c:	df000515 	stw	fp,20(sp)
   14160:	df000504 	addi	fp,sp,20
   14164:	e13ffd15 	stw	r4,-12(fp)
   14168:	e17ffe15 	stw	r5,-8(fp)
   1416c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   14170:	00bff9c4 	movi	r2,-25
   14174:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   14178:	e0bffe17 	ldw	r2,-8(fp)
   1417c:	10da8060 	cmpeqi	r3,r2,27137
   14180:	1800031e 	bne	r3,zero,14190 <altera_avalon_jtag_uart_ioctl+0x38>
   14184:	109a80a0 	cmpeqi	r2,r2,27138
   14188:	1000181e 	bne	r2,zero,141ec <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   1418c:	00002906 	br	14234 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   14190:	e0bffd17 	ldw	r2,-12(fp)
   14194:	10c00117 	ldw	r3,4(r2)
   14198:	00a00034 	movhi	r2,32768
   1419c:	10bfffc4 	addi	r2,r2,-1
   141a0:	18802126 	beq	r3,r2,14228 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   141a4:	e0bfff17 	ldw	r2,-4(fp)
   141a8:	10800017 	ldw	r2,0(r2)
   141ac:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   141b0:	e0bffc17 	ldw	r2,-16(fp)
   141b4:	10800090 	cmplti	r2,r2,2
   141b8:	1000061e 	bne	r2,zero,141d4 <altera_avalon_jtag_uart_ioctl+0x7c>
   141bc:	e0fffc17 	ldw	r3,-16(fp)
   141c0:	00a00034 	movhi	r2,32768
   141c4:	10bfffc4 	addi	r2,r2,-1
   141c8:	18800226 	beq	r3,r2,141d4 <altera_avalon_jtag_uart_ioctl+0x7c>
   141cc:	e0bffc17 	ldw	r2,-16(fp)
   141d0:	00000206 	br	141dc <altera_avalon_jtag_uart_ioctl+0x84>
   141d4:	00a00034 	movhi	r2,32768
   141d8:	10bfff84 	addi	r2,r2,-2
   141dc:	e0fffd17 	ldw	r3,-12(fp)
   141e0:	18800115 	stw	r2,4(r3)
      rc = 0;
   141e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   141e8:	00000f06 	br	14228 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   141ec:	e0bffd17 	ldw	r2,-12(fp)
   141f0:	10c00117 	ldw	r3,4(r2)
   141f4:	00a00034 	movhi	r2,32768
   141f8:	10bfffc4 	addi	r2,r2,-1
   141fc:	18800c26 	beq	r3,r2,14230 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   14200:	e0bffd17 	ldw	r2,-12(fp)
   14204:	10c00917 	ldw	r3,36(r2)
   14208:	e0bffd17 	ldw	r2,-12(fp)
   1420c:	10800117 	ldw	r2,4(r2)
   14210:	1885803a 	cmpltu	r2,r3,r2
   14214:	10c03fcc 	andi	r3,r2,255
   14218:	e0bfff17 	ldw	r2,-4(fp)
   1421c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   14220:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   14224:	00000206 	br	14230 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   14228:	0001883a 	nop
   1422c:	00000106 	br	14234 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   14230:	0001883a 	nop

  default:
    break;
  }

  return rc;
   14234:	e0bffb17 	ldw	r2,-20(fp)
}
   14238:	e037883a 	mov	sp,fp
   1423c:	df000017 	ldw	fp,0(sp)
   14240:	dec00104 	addi	sp,sp,4
   14244:	f800283a 	ret

00014248 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   14248:	defff304 	addi	sp,sp,-52
   1424c:	dfc00c15 	stw	ra,48(sp)
   14250:	df000b15 	stw	fp,44(sp)
   14254:	df000b04 	addi	fp,sp,44
   14258:	e13ffc15 	stw	r4,-16(fp)
   1425c:	e17ffd15 	stw	r5,-12(fp)
   14260:	e1bffe15 	stw	r6,-8(fp)
   14264:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   14268:	e0bffd17 	ldw	r2,-12(fp)
   1426c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14270:	00004706 	br	14390 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   14274:	e0bffc17 	ldw	r2,-16(fp)
   14278:	10800a17 	ldw	r2,40(r2)
   1427c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   14280:	e0bffc17 	ldw	r2,-16(fp)
   14284:	10800b17 	ldw	r2,44(r2)
   14288:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   1428c:	e0fff717 	ldw	r3,-36(fp)
   14290:	e0bff817 	ldw	r2,-32(fp)
   14294:	18800536 	bltu	r3,r2,142ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   14298:	e0fff717 	ldw	r3,-36(fp)
   1429c:	e0bff817 	ldw	r2,-32(fp)
   142a0:	1885c83a 	sub	r2,r3,r2
   142a4:	e0bff615 	stw	r2,-40(fp)
   142a8:	00000406 	br	142bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   142ac:	00c20004 	movi	r3,2048
   142b0:	e0bff817 	ldw	r2,-32(fp)
   142b4:	1885c83a 	sub	r2,r3,r2
   142b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   142bc:	e0bff617 	ldw	r2,-40(fp)
   142c0:	10001e26 	beq	r2,zero,1433c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   142c4:	e0fffe17 	ldw	r3,-8(fp)
   142c8:	e0bff617 	ldw	r2,-40(fp)
   142cc:	1880022e 	bgeu	r3,r2,142d8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   142d0:	e0bffe17 	ldw	r2,-8(fp)
   142d4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   142d8:	e0bffc17 	ldw	r2,-16(fp)
   142dc:	10c00e04 	addi	r3,r2,56
   142e0:	e0bff817 	ldw	r2,-32(fp)
   142e4:	1885883a 	add	r2,r3,r2
   142e8:	e1bff617 	ldw	r6,-40(fp)
   142ec:	100b883a 	mov	r5,r2
   142f0:	e13ff517 	ldw	r4,-44(fp)
   142f4:	00117f80 	call	117f8 <memcpy>
      ptr   += n;
   142f8:	e0fff517 	ldw	r3,-44(fp)
   142fc:	e0bff617 	ldw	r2,-40(fp)
   14300:	1885883a 	add	r2,r3,r2
   14304:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   14308:	e0fffe17 	ldw	r3,-8(fp)
   1430c:	e0bff617 	ldw	r2,-40(fp)
   14310:	1885c83a 	sub	r2,r3,r2
   14314:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14318:	e0fff817 	ldw	r3,-32(fp)
   1431c:	e0bff617 	ldw	r2,-40(fp)
   14320:	1885883a 	add	r2,r3,r2
   14324:	10c1ffcc 	andi	r3,r2,2047
   14328:	e0bffc17 	ldw	r2,-16(fp)
   1432c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   14330:	e0bffe17 	ldw	r2,-8(fp)
   14334:	00bfcf16 	blt	zero,r2,14274 <altera_avalon_jtag_uart_read+0x2c>
   14338:	00000106 	br	14340 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   1433c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   14340:	e0fff517 	ldw	r3,-44(fp)
   14344:	e0bffd17 	ldw	r2,-12(fp)
   14348:	1880141e 	bne	r3,r2,1439c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   1434c:	e0bfff17 	ldw	r2,-4(fp)
   14350:	1090000c 	andi	r2,r2,16384
   14354:	1000131e 	bne	r2,zero,143a4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   14358:	0001883a 	nop
   1435c:	e0bffc17 	ldw	r2,-16(fp)
   14360:	10c00a17 	ldw	r3,40(r2)
   14364:	e0bff717 	ldw	r2,-36(fp)
   14368:	1880051e 	bne	r3,r2,14380 <altera_avalon_jtag_uart_read+0x138>
   1436c:	e0bffc17 	ldw	r2,-16(fp)
   14370:	10c00917 	ldw	r3,36(r2)
   14374:	e0bffc17 	ldw	r2,-16(fp)
   14378:	10800117 	ldw	r2,4(r2)
   1437c:	18bff736 	bltu	r3,r2,1435c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   14380:	e0bffc17 	ldw	r2,-16(fp)
   14384:	10c00a17 	ldw	r3,40(r2)
   14388:	e0bff717 	ldw	r2,-36(fp)
   1438c:	18800726 	beq	r3,r2,143ac <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   14390:	e0bffe17 	ldw	r2,-8(fp)
   14394:	00bfb716 	blt	zero,r2,14274 <altera_avalon_jtag_uart_read+0x2c>
   14398:	00000506 	br	143b0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   1439c:	0001883a 	nop
   143a0:	00000306 	br	143b0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   143a4:	0001883a 	nop
   143a8:	00000106 	br	143b0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   143ac:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   143b0:	e0fff517 	ldw	r3,-44(fp)
   143b4:	e0bffd17 	ldw	r2,-12(fp)
   143b8:	18801826 	beq	r3,r2,1441c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   143bc:	0005303a 	rdctl	r2,status
   143c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   143c4:	e0fffb17 	ldw	r3,-20(fp)
   143c8:	00bfff84 	movi	r2,-2
   143cc:	1884703a 	and	r2,r3,r2
   143d0:	1001703a 	wrctl	status,r2
  
  return context;
   143d4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   143d8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   143dc:	e0bffc17 	ldw	r2,-16(fp)
   143e0:	10800817 	ldw	r2,32(r2)
   143e4:	10c00054 	ori	r3,r2,1
   143e8:	e0bffc17 	ldw	r2,-16(fp)
   143ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   143f0:	e0bffc17 	ldw	r2,-16(fp)
   143f4:	10800017 	ldw	r2,0(r2)
   143f8:	10800104 	addi	r2,r2,4
   143fc:	1007883a 	mov	r3,r2
   14400:	e0bffc17 	ldw	r2,-16(fp)
   14404:	10800817 	ldw	r2,32(r2)
   14408:	18800035 	stwio	r2,0(r3)
   1440c:	e0bffa17 	ldw	r2,-24(fp)
   14410:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14414:	e0bff917 	ldw	r2,-28(fp)
   14418:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   1441c:	e0fff517 	ldw	r3,-44(fp)
   14420:	e0bffd17 	ldw	r2,-12(fp)
   14424:	18800426 	beq	r3,r2,14438 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   14428:	e0fff517 	ldw	r3,-44(fp)
   1442c:	e0bffd17 	ldw	r2,-12(fp)
   14430:	1885c83a 	sub	r2,r3,r2
   14434:	00000606 	br	14450 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   14438:	e0bfff17 	ldw	r2,-4(fp)
   1443c:	1090000c 	andi	r2,r2,16384
   14440:	10000226 	beq	r2,zero,1444c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   14444:	00bffd44 	movi	r2,-11
   14448:	00000106 	br	14450 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   1444c:	00bffec4 	movi	r2,-5
}
   14450:	e037883a 	mov	sp,fp
   14454:	dfc00117 	ldw	ra,4(sp)
   14458:	df000017 	ldw	fp,0(sp)
   1445c:	dec00204 	addi	sp,sp,8
   14460:	f800283a 	ret

00014464 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   14464:	defff304 	addi	sp,sp,-52
   14468:	dfc00c15 	stw	ra,48(sp)
   1446c:	df000b15 	stw	fp,44(sp)
   14470:	df000b04 	addi	fp,sp,44
   14474:	e13ffc15 	stw	r4,-16(fp)
   14478:	e17ffd15 	stw	r5,-12(fp)
   1447c:	e1bffe15 	stw	r6,-8(fp)
   14480:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   14484:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   14488:	e0bffd17 	ldw	r2,-12(fp)
   1448c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14490:	00003706 	br	14570 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   14494:	e0bffc17 	ldw	r2,-16(fp)
   14498:	10800c17 	ldw	r2,48(r2)
   1449c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   144a0:	e0bffc17 	ldw	r2,-16(fp)
   144a4:	10800d17 	ldw	r2,52(r2)
   144a8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   144ac:	e0fff917 	ldw	r3,-28(fp)
   144b0:	e0bff517 	ldw	r2,-44(fp)
   144b4:	1880062e 	bgeu	r3,r2,144d0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   144b8:	e0fff517 	ldw	r3,-44(fp)
   144bc:	e0bff917 	ldw	r2,-28(fp)
   144c0:	1885c83a 	sub	r2,r3,r2
   144c4:	10bfffc4 	addi	r2,r2,-1
   144c8:	e0bff615 	stw	r2,-40(fp)
   144cc:	00000b06 	br	144fc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   144d0:	e0bff517 	ldw	r2,-44(fp)
   144d4:	10000526 	beq	r2,zero,144ec <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   144d8:	00c20004 	movi	r3,2048
   144dc:	e0bff917 	ldw	r2,-28(fp)
   144e0:	1885c83a 	sub	r2,r3,r2
   144e4:	e0bff615 	stw	r2,-40(fp)
   144e8:	00000406 	br	144fc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   144ec:	00c1ffc4 	movi	r3,2047
   144f0:	e0bff917 	ldw	r2,-28(fp)
   144f4:	1885c83a 	sub	r2,r3,r2
   144f8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   144fc:	e0bff617 	ldw	r2,-40(fp)
   14500:	10001e26 	beq	r2,zero,1457c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   14504:	e0fffe17 	ldw	r3,-8(fp)
   14508:	e0bff617 	ldw	r2,-40(fp)
   1450c:	1880022e 	bgeu	r3,r2,14518 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   14510:	e0bffe17 	ldw	r2,-8(fp)
   14514:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   14518:	e0bffc17 	ldw	r2,-16(fp)
   1451c:	10c20e04 	addi	r3,r2,2104
   14520:	e0bff917 	ldw	r2,-28(fp)
   14524:	1885883a 	add	r2,r3,r2
   14528:	e1bff617 	ldw	r6,-40(fp)
   1452c:	e17ffd17 	ldw	r5,-12(fp)
   14530:	1009883a 	mov	r4,r2
   14534:	00117f80 	call	117f8 <memcpy>
      ptr   += n;
   14538:	e0fffd17 	ldw	r3,-12(fp)
   1453c:	e0bff617 	ldw	r2,-40(fp)
   14540:	1885883a 	add	r2,r3,r2
   14544:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   14548:	e0fffe17 	ldw	r3,-8(fp)
   1454c:	e0bff617 	ldw	r2,-40(fp)
   14550:	1885c83a 	sub	r2,r3,r2
   14554:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   14558:	e0fff917 	ldw	r3,-28(fp)
   1455c:	e0bff617 	ldw	r2,-40(fp)
   14560:	1885883a 	add	r2,r3,r2
   14564:	10c1ffcc 	andi	r3,r2,2047
   14568:	e0bffc17 	ldw	r2,-16(fp)
   1456c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   14570:	e0bffe17 	ldw	r2,-8(fp)
   14574:	00bfc716 	blt	zero,r2,14494 <altera_avalon_jtag_uart_write+0x30>
   14578:	00000106 	br	14580 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   1457c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14580:	0005303a 	rdctl	r2,status
   14584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14588:	e0fffb17 	ldw	r3,-20(fp)
   1458c:	00bfff84 	movi	r2,-2
   14590:	1884703a 	and	r2,r3,r2
   14594:	1001703a 	wrctl	status,r2
  
  return context;
   14598:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   1459c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   145a0:	e0bffc17 	ldw	r2,-16(fp)
   145a4:	10800817 	ldw	r2,32(r2)
   145a8:	10c00094 	ori	r3,r2,2
   145ac:	e0bffc17 	ldw	r2,-16(fp)
   145b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   145b4:	e0bffc17 	ldw	r2,-16(fp)
   145b8:	10800017 	ldw	r2,0(r2)
   145bc:	10800104 	addi	r2,r2,4
   145c0:	1007883a 	mov	r3,r2
   145c4:	e0bffc17 	ldw	r2,-16(fp)
   145c8:	10800817 	ldw	r2,32(r2)
   145cc:	18800035 	stwio	r2,0(r3)
   145d0:	e0bffa17 	ldw	r2,-24(fp)
   145d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   145d8:	e0bff817 	ldw	r2,-32(fp)
   145dc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   145e0:	e0bffe17 	ldw	r2,-8(fp)
   145e4:	0080100e 	bge	zero,r2,14628 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   145e8:	e0bfff17 	ldw	r2,-4(fp)
   145ec:	1090000c 	andi	r2,r2,16384
   145f0:	1000101e 	bne	r2,zero,14634 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   145f4:	0001883a 	nop
   145f8:	e0bffc17 	ldw	r2,-16(fp)
   145fc:	10c00d17 	ldw	r3,52(r2)
   14600:	e0bff517 	ldw	r2,-44(fp)
   14604:	1880051e 	bne	r3,r2,1461c <altera_avalon_jtag_uart_write+0x1b8>
   14608:	e0bffc17 	ldw	r2,-16(fp)
   1460c:	10c00917 	ldw	r3,36(r2)
   14610:	e0bffc17 	ldw	r2,-16(fp)
   14614:	10800117 	ldw	r2,4(r2)
   14618:	18bff736 	bltu	r3,r2,145f8 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   1461c:	e0bffc17 	ldw	r2,-16(fp)
   14620:	10800917 	ldw	r2,36(r2)
   14624:	1000051e 	bne	r2,zero,1463c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   14628:	e0bffe17 	ldw	r2,-8(fp)
   1462c:	00bfd016 	blt	zero,r2,14570 <altera_avalon_jtag_uart_write+0x10c>
   14630:	00000306 	br	14640 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   14634:	0001883a 	nop
   14638:	00000106 	br	14640 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   1463c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   14640:	e0fffd17 	ldw	r3,-12(fp)
   14644:	e0bff717 	ldw	r2,-36(fp)
   14648:	18800426 	beq	r3,r2,1465c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   1464c:	e0fffd17 	ldw	r3,-12(fp)
   14650:	e0bff717 	ldw	r2,-36(fp)
   14654:	1885c83a 	sub	r2,r3,r2
   14658:	00000606 	br	14674 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   1465c:	e0bfff17 	ldw	r2,-4(fp)
   14660:	1090000c 	andi	r2,r2,16384
   14664:	10000226 	beq	r2,zero,14670 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   14668:	00bffd44 	movi	r2,-11
   1466c:	00000106 	br	14674 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   14670:	00bffec4 	movi	r2,-5
}
   14674:	e037883a 	mov	sp,fp
   14678:	dfc00117 	ldw	ra,4(sp)
   1467c:	df000017 	ldw	fp,0(sp)
   14680:	dec00204 	addi	sp,sp,8
   14684:	f800283a 	ret

00014688 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   14688:	defff504 	addi	sp,sp,-44
   1468c:	df000a15 	stw	fp,40(sp)
   14690:	df000a04 	addi	fp,sp,40
   14694:	e13ffc15 	stw	r4,-16(fp)
   14698:	e17ffd15 	stw	r5,-12(fp)
   1469c:	e1bffe15 	stw	r6,-8(fp)
   146a0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   146a4:	e03ff615 	stw	zero,-40(fp)
   146a8:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
   146ac:	10003c26 	beq	r2,zero,147a0 <alt_alarm_start+0x118>
  {
    if (alarm)
   146b0:	e0bffc17 	ldw	r2,-16(fp)
   146b4:	10003826 	beq	r2,zero,14798 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   146b8:	e0bffc17 	ldw	r2,-16(fp)
   146bc:	e0fffe17 	ldw	r3,-8(fp)
   146c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   146c4:	e0bffc17 	ldw	r2,-16(fp)
   146c8:	e0ffff17 	ldw	r3,-4(fp)
   146cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   146d0:	0005303a 	rdctl	r2,status
   146d4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   146d8:	e0fff917 	ldw	r3,-28(fp)
   146dc:	00bfff84 	movi	r2,-2
   146e0:	1884703a 	and	r2,r3,r2
   146e4:	1001703a 	wrctl	status,r2
  
  return context;
   146e8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   146ec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   146f0:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
   146f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   146f8:	e0fffd17 	ldw	r3,-12(fp)
   146fc:	e0bff617 	ldw	r2,-40(fp)
   14700:	1885883a 	add	r2,r3,r2
   14704:	10c00044 	addi	r3,r2,1
   14708:	e0bffc17 	ldw	r2,-16(fp)
   1470c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   14710:	e0bffc17 	ldw	r2,-16(fp)
   14714:	10c00217 	ldw	r3,8(r2)
   14718:	e0bff617 	ldw	r2,-40(fp)
   1471c:	1880042e 	bgeu	r3,r2,14730 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   14720:	e0bffc17 	ldw	r2,-16(fp)
   14724:	00c00044 	movi	r3,1
   14728:	10c00405 	stb	r3,16(r2)
   1472c:	00000206 	br	14738 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   14730:	e0bffc17 	ldw	r2,-16(fp)
   14734:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   14738:	e0bffc17 	ldw	r2,-16(fp)
   1473c:	d0e00c04 	addi	r3,gp,-32720
   14740:	e0fffa15 	stw	r3,-24(fp)
   14744:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   14748:	e0bffb17 	ldw	r2,-20(fp)
   1474c:	e0fffa17 	ldw	r3,-24(fp)
   14750:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   14754:	e0bffa17 	ldw	r2,-24(fp)
   14758:	10c00017 	ldw	r3,0(r2)
   1475c:	e0bffb17 	ldw	r2,-20(fp)
   14760:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   14764:	e0bffa17 	ldw	r2,-24(fp)
   14768:	10800017 	ldw	r2,0(r2)
   1476c:	e0fffb17 	ldw	r3,-20(fp)
   14770:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   14774:	e0bffa17 	ldw	r2,-24(fp)
   14778:	e0fffb17 	ldw	r3,-20(fp)
   1477c:	10c00015 	stw	r3,0(r2)
   14780:	e0bff817 	ldw	r2,-32(fp)
   14784:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14788:	e0bff717 	ldw	r2,-36(fp)
   1478c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   14790:	0005883a 	mov	r2,zero
   14794:	00000306 	br	147a4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   14798:	00bffa84 	movi	r2,-22
   1479c:	00000106 	br	147a4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   147a0:	00bfde84 	movi	r2,-134
  }
}
   147a4:	e037883a 	mov	sp,fp
   147a8:	df000017 	ldw	fp,0(sp)
   147ac:	dec00104 	addi	sp,sp,4
   147b0:	f800283a 	ret

000147b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   147b4:	defffa04 	addi	sp,sp,-24
   147b8:	dfc00515 	stw	ra,20(sp)
   147bc:	df000415 	stw	fp,16(sp)
   147c0:	df000404 	addi	fp,sp,16
   147c4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   147c8:	00800244 	movi	r2,9
   147cc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   147d0:	014003f4 	movhi	r5,15
   147d4:	29509004 	addi	r5,r5,16960
   147d8:	e13ffd17 	ldw	r4,-12(fp)
   147dc:	00131800 	call	13180 <__mulsi3>
   147e0:	100b883a 	mov	r5,r2
   147e4:	0100bef4 	movhi	r4,763
   147e8:	213c2004 	addi	r4,r4,-3968
   147ec:	00130c40 	call	130c4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   147f0:	100b883a 	mov	r5,r2
   147f4:	01200034 	movhi	r4,32768
   147f8:	213fffc4 	addi	r4,r4,-1
   147fc:	00130c40 	call	130c4 <__udivsi3>
   14800:	100b883a 	mov	r5,r2
   14804:	e13fff17 	ldw	r4,-4(fp)
   14808:	00130c40 	call	130c4 <__udivsi3>
   1480c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   14810:	e0bffe17 	ldw	r2,-8(fp)
   14814:	10002a26 	beq	r2,zero,148c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   14818:	e03ffc15 	stw	zero,-16(fp)
   1481c:	00001706 	br	1487c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   14820:	00a00034 	movhi	r2,32768
   14824:	10bfffc4 	addi	r2,r2,-1
   14828:	10bfffc4 	addi	r2,r2,-1
   1482c:	103ffe1e 	bne	r2,zero,14828 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   14830:	014003f4 	movhi	r5,15
   14834:	29509004 	addi	r5,r5,16960
   14838:	e13ffd17 	ldw	r4,-12(fp)
   1483c:	00131800 	call	13180 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   14840:	100b883a 	mov	r5,r2
   14844:	0100bef4 	movhi	r4,763
   14848:	213c2004 	addi	r4,r4,-3968
   1484c:	00130c40 	call	130c4 <__udivsi3>
   14850:	100b883a 	mov	r5,r2
   14854:	01200034 	movhi	r4,32768
   14858:	213fffc4 	addi	r4,r4,-1
   1485c:	00130c40 	call	130c4 <__udivsi3>
   14860:	1007883a 	mov	r3,r2
   14864:	e0bfff17 	ldw	r2,-4(fp)
   14868:	10c5c83a 	sub	r2,r2,r3
   1486c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   14870:	e0bffc17 	ldw	r2,-16(fp)
   14874:	10800044 	addi	r2,r2,1
   14878:	e0bffc15 	stw	r2,-16(fp)
   1487c:	e0fffc17 	ldw	r3,-16(fp)
   14880:	e0bffe17 	ldw	r2,-8(fp)
   14884:	18bfe616 	blt	r3,r2,14820 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   14888:	014003f4 	movhi	r5,15
   1488c:	29509004 	addi	r5,r5,16960
   14890:	e13ffd17 	ldw	r4,-12(fp)
   14894:	00131800 	call	13180 <__mulsi3>
   14898:	100b883a 	mov	r5,r2
   1489c:	0100bef4 	movhi	r4,763
   148a0:	213c2004 	addi	r4,r4,-3968
   148a4:	00130c40 	call	130c4 <__udivsi3>
   148a8:	e17fff17 	ldw	r5,-4(fp)
   148ac:	1009883a 	mov	r4,r2
   148b0:	00131800 	call	13180 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   148b4:	10bfffc4 	addi	r2,r2,-1
   148b8:	103ffe1e 	bne	r2,zero,148b4 <alt_busy_sleep+0x100>
   148bc:	00000d06 	br	148f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   148c0:	014003f4 	movhi	r5,15
   148c4:	29509004 	addi	r5,r5,16960
   148c8:	e13ffd17 	ldw	r4,-12(fp)
   148cc:	00131800 	call	13180 <__mulsi3>
   148d0:	100b883a 	mov	r5,r2
   148d4:	0100bef4 	movhi	r4,763
   148d8:	213c2004 	addi	r4,r4,-3968
   148dc:	00130c40 	call	130c4 <__udivsi3>
   148e0:	e17fff17 	ldw	r5,-4(fp)
   148e4:	1009883a 	mov	r4,r2
   148e8:	00131800 	call	13180 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   148ec:	10bfffc4 	addi	r2,r2,-1
   148f0:	00bffe16 	blt	zero,r2,148ec <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   148f4:	0005883a 	mov	r2,zero
}
   148f8:	e037883a 	mov	sp,fp
   148fc:	dfc00117 	ldw	ra,4(sp)
   14900:	df000017 	ldw	fp,0(sp)
   14904:	dec00204 	addi	sp,sp,8
   14908:	f800283a 	ret

0001490c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   1490c:	deffff04 	addi	sp,sp,-4
   14910:	df000015 	stw	fp,0(sp)
   14914:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   14918:	0001883a 	nop
   1491c:	e037883a 	mov	sp,fp
   14920:	df000017 	ldw	fp,0(sp)
   14924:	dec00104 	addi	sp,sp,4
   14928:	f800283a 	ret

0001492c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   1492c:	defffe04 	addi	sp,sp,-8
   14930:	dfc00115 	stw	ra,4(sp)
   14934:	df000015 	stw	fp,0(sp)
   14938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   1493c:	d0a00917 	ldw	r2,-32732(gp)
   14940:	10000326 	beq	r2,zero,14950 <alt_get_errno+0x24>
   14944:	d0a00917 	ldw	r2,-32732(gp)
   14948:	103ee83a 	callr	r2
   1494c:	00000106 	br	14954 <alt_get_errno+0x28>
   14950:	d0a01104 	addi	r2,gp,-32700
}
   14954:	e037883a 	mov	sp,fp
   14958:	dfc00117 	ldw	ra,4(sp)
   1495c:	df000017 	ldw	fp,0(sp)
   14960:	dec00204 	addi	sp,sp,8
   14964:	f800283a 	ret

00014968 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   14968:	defffa04 	addi	sp,sp,-24
   1496c:	dfc00515 	stw	ra,20(sp)
   14970:	df000415 	stw	fp,16(sp)
   14974:	df000404 	addi	fp,sp,16
   14978:	e13ffe15 	stw	r4,-8(fp)
   1497c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   14980:	e0bffe17 	ldw	r2,-8(fp)
   14984:	10000326 	beq	r2,zero,14994 <alt_dev_llist_insert+0x2c>
   14988:	e0bffe17 	ldw	r2,-8(fp)
   1498c:	10800217 	ldw	r2,8(r2)
   14990:	1000061e 	bne	r2,zero,149ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   14994:	001492c0 	call	1492c <alt_get_errno>
   14998:	1007883a 	mov	r3,r2
   1499c:	00800584 	movi	r2,22
   149a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   149a4:	00bffa84 	movi	r2,-22
   149a8:	00001306 	br	149f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   149ac:	e0bffe17 	ldw	r2,-8(fp)
   149b0:	e0ffff17 	ldw	r3,-4(fp)
   149b4:	e0fffc15 	stw	r3,-16(fp)
   149b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   149bc:	e0bffd17 	ldw	r2,-12(fp)
   149c0:	e0fffc17 	ldw	r3,-16(fp)
   149c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   149c8:	e0bffc17 	ldw	r2,-16(fp)
   149cc:	10c00017 	ldw	r3,0(r2)
   149d0:	e0bffd17 	ldw	r2,-12(fp)
   149d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   149d8:	e0bffc17 	ldw	r2,-16(fp)
   149dc:	10800017 	ldw	r2,0(r2)
   149e0:	e0fffd17 	ldw	r3,-12(fp)
   149e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   149e8:	e0bffc17 	ldw	r2,-16(fp)
   149ec:	e0fffd17 	ldw	r3,-12(fp)
   149f0:	10c00015 	stw	r3,0(r2)

  return 0;  
   149f4:	0005883a 	mov	r2,zero
}
   149f8:	e037883a 	mov	sp,fp
   149fc:	dfc00117 	ldw	ra,4(sp)
   14a00:	df000017 	ldw	fp,0(sp)
   14a04:	dec00204 	addi	sp,sp,8
   14a08:	f800283a 	ret

00014a0c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   14a0c:	defffd04 	addi	sp,sp,-12
   14a10:	dfc00215 	stw	ra,8(sp)
   14a14:	df000115 	stw	fp,4(sp)
   14a18:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14a1c:	00800074 	movhi	r2,1
   14a20:	10967004 	addi	r2,r2,22976
   14a24:	e0bfff15 	stw	r2,-4(fp)
   14a28:	00000606 	br	14a44 <_do_ctors+0x38>
        (*ctor) (); 
   14a2c:	e0bfff17 	ldw	r2,-4(fp)
   14a30:	10800017 	ldw	r2,0(r2)
   14a34:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   14a38:	e0bfff17 	ldw	r2,-4(fp)
   14a3c:	10bfff04 	addi	r2,r2,-4
   14a40:	e0bfff15 	stw	r2,-4(fp)
   14a44:	e0ffff17 	ldw	r3,-4(fp)
   14a48:	00800074 	movhi	r2,1
   14a4c:	10967104 	addi	r2,r2,22980
   14a50:	18bff62e 	bgeu	r3,r2,14a2c <_do_ctors+0x20>
        (*ctor) (); 
}
   14a54:	0001883a 	nop
   14a58:	e037883a 	mov	sp,fp
   14a5c:	dfc00117 	ldw	ra,4(sp)
   14a60:	df000017 	ldw	fp,0(sp)
   14a64:	dec00204 	addi	sp,sp,8
   14a68:	f800283a 	ret

00014a6c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   14a6c:	defffd04 	addi	sp,sp,-12
   14a70:	dfc00215 	stw	ra,8(sp)
   14a74:	df000115 	stw	fp,4(sp)
   14a78:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14a7c:	00800074 	movhi	r2,1
   14a80:	10967004 	addi	r2,r2,22976
   14a84:	e0bfff15 	stw	r2,-4(fp)
   14a88:	00000606 	br	14aa4 <_do_dtors+0x38>
        (*dtor) (); 
   14a8c:	e0bfff17 	ldw	r2,-4(fp)
   14a90:	10800017 	ldw	r2,0(r2)
   14a94:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   14a98:	e0bfff17 	ldw	r2,-4(fp)
   14a9c:	10bfff04 	addi	r2,r2,-4
   14aa0:	e0bfff15 	stw	r2,-4(fp)
   14aa4:	e0ffff17 	ldw	r3,-4(fp)
   14aa8:	00800074 	movhi	r2,1
   14aac:	10967104 	addi	r2,r2,22980
   14ab0:	18bff62e 	bgeu	r3,r2,14a8c <_do_dtors+0x20>
        (*dtor) (); 
}
   14ab4:	0001883a 	nop
   14ab8:	e037883a 	mov	sp,fp
   14abc:	dfc00117 	ldw	ra,4(sp)
   14ac0:	df000017 	ldw	fp,0(sp)
   14ac4:	dec00204 	addi	sp,sp,8
   14ac8:	f800283a 	ret

00014acc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   14acc:	deffff04 	addi	sp,sp,-4
   14ad0:	df000015 	stw	fp,0(sp)
   14ad4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   14ad8:	0001883a 	nop
   14adc:	e037883a 	mov	sp,fp
   14ae0:	df000017 	ldw	fp,0(sp)
   14ae4:	dec00104 	addi	sp,sp,4
   14ae8:	f800283a 	ret

00014aec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14aec:	defff904 	addi	sp,sp,-28
   14af0:	dfc00615 	stw	ra,24(sp)
   14af4:	df000515 	stw	fp,20(sp)
   14af8:	df000504 	addi	fp,sp,20
   14afc:	e13ffc15 	stw	r4,-16(fp)
   14b00:	e17ffd15 	stw	r5,-12(fp)
   14b04:	e1bffe15 	stw	r6,-8(fp)
   14b08:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   14b0c:	e0800217 	ldw	r2,8(fp)
   14b10:	d8800015 	stw	r2,0(sp)
   14b14:	e1ffff17 	ldw	r7,-4(fp)
   14b18:	e1bffe17 	ldw	r6,-8(fp)
   14b1c:	e17ffd17 	ldw	r5,-12(fp)
   14b20:	e13ffc17 	ldw	r4,-16(fp)
   14b24:	0014c9c0 	call	14c9c <alt_iic_isr_register>
}  
   14b28:	e037883a 	mov	sp,fp
   14b2c:	dfc00117 	ldw	ra,4(sp)
   14b30:	df000017 	ldw	fp,0(sp)
   14b34:	dec00204 	addi	sp,sp,8
   14b38:	f800283a 	ret

00014b3c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   14b3c:	defff904 	addi	sp,sp,-28
   14b40:	df000615 	stw	fp,24(sp)
   14b44:	df000604 	addi	fp,sp,24
   14b48:	e13ffe15 	stw	r4,-8(fp)
   14b4c:	e17fff15 	stw	r5,-4(fp)
   14b50:	e0bfff17 	ldw	r2,-4(fp)
   14b54:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14b58:	0005303a 	rdctl	r2,status
   14b5c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14b60:	e0fffb17 	ldw	r3,-20(fp)
   14b64:	00bfff84 	movi	r2,-2
   14b68:	1884703a 	and	r2,r3,r2
   14b6c:	1001703a 	wrctl	status,r2
  
  return context;
   14b70:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14b74:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   14b78:	00c00044 	movi	r3,1
   14b7c:	e0bffa17 	ldw	r2,-24(fp)
   14b80:	1884983a 	sll	r2,r3,r2
   14b84:	1007883a 	mov	r3,r2
   14b88:	d0a01517 	ldw	r2,-32684(gp)
   14b8c:	1884b03a 	or	r2,r3,r2
   14b90:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14b94:	d0a01517 	ldw	r2,-32684(gp)
   14b98:	100170fa 	wrctl	ienable,r2
   14b9c:	e0bffc17 	ldw	r2,-16(fp)
   14ba0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14ba4:	e0bffd17 	ldw	r2,-12(fp)
   14ba8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14bac:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   14bb0:	0001883a 	nop
}
   14bb4:	e037883a 	mov	sp,fp
   14bb8:	df000017 	ldw	fp,0(sp)
   14bbc:	dec00104 	addi	sp,sp,4
   14bc0:	f800283a 	ret

00014bc4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   14bc4:	defff904 	addi	sp,sp,-28
   14bc8:	df000615 	stw	fp,24(sp)
   14bcc:	df000604 	addi	fp,sp,24
   14bd0:	e13ffe15 	stw	r4,-8(fp)
   14bd4:	e17fff15 	stw	r5,-4(fp)
   14bd8:	e0bfff17 	ldw	r2,-4(fp)
   14bdc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14be0:	0005303a 	rdctl	r2,status
   14be4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14be8:	e0fffb17 	ldw	r3,-20(fp)
   14bec:	00bfff84 	movi	r2,-2
   14bf0:	1884703a 	and	r2,r3,r2
   14bf4:	1001703a 	wrctl	status,r2
  
  return context;
   14bf8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   14bfc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   14c00:	00c00044 	movi	r3,1
   14c04:	e0bffa17 	ldw	r2,-24(fp)
   14c08:	1884983a 	sll	r2,r3,r2
   14c0c:	0084303a 	nor	r2,zero,r2
   14c10:	1007883a 	mov	r3,r2
   14c14:	d0a01517 	ldw	r2,-32684(gp)
   14c18:	1884703a 	and	r2,r3,r2
   14c1c:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   14c20:	d0a01517 	ldw	r2,-32684(gp)
   14c24:	100170fa 	wrctl	ienable,r2
   14c28:	e0bffc17 	ldw	r2,-16(fp)
   14c2c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14c30:	e0bffd17 	ldw	r2,-12(fp)
   14c34:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   14c38:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   14c3c:	0001883a 	nop
}
   14c40:	e037883a 	mov	sp,fp
   14c44:	df000017 	ldw	fp,0(sp)
   14c48:	dec00104 	addi	sp,sp,4
   14c4c:	f800283a 	ret

00014c50 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   14c50:	defffc04 	addi	sp,sp,-16
   14c54:	df000315 	stw	fp,12(sp)
   14c58:	df000304 	addi	fp,sp,12
   14c5c:	e13ffe15 	stw	r4,-8(fp)
   14c60:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   14c64:	000530fa 	rdctl	r2,ienable
   14c68:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   14c6c:	00c00044 	movi	r3,1
   14c70:	e0bfff17 	ldw	r2,-4(fp)
   14c74:	1884983a 	sll	r2,r3,r2
   14c78:	1007883a 	mov	r3,r2
   14c7c:	e0bffd17 	ldw	r2,-12(fp)
   14c80:	1884703a 	and	r2,r3,r2
   14c84:	1004c03a 	cmpne	r2,r2,zero
   14c88:	10803fcc 	andi	r2,r2,255
}
   14c8c:	e037883a 	mov	sp,fp
   14c90:	df000017 	ldw	fp,0(sp)
   14c94:	dec00104 	addi	sp,sp,4
   14c98:	f800283a 	ret

00014c9c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   14c9c:	defff504 	addi	sp,sp,-44
   14ca0:	dfc00a15 	stw	ra,40(sp)
   14ca4:	df000915 	stw	fp,36(sp)
   14ca8:	df000904 	addi	fp,sp,36
   14cac:	e13ffc15 	stw	r4,-16(fp)
   14cb0:	e17ffd15 	stw	r5,-12(fp)
   14cb4:	e1bffe15 	stw	r6,-8(fp)
   14cb8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   14cbc:	00bffa84 	movi	r2,-22
   14cc0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   14cc4:	e0bffd17 	ldw	r2,-12(fp)
   14cc8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   14ccc:	e0bff817 	ldw	r2,-32(fp)
   14cd0:	10800808 	cmpgei	r2,r2,32
   14cd4:	1000271e 	bne	r2,zero,14d74 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   14cd8:	0005303a 	rdctl	r2,status
   14cdc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   14ce0:	e0fffb17 	ldw	r3,-20(fp)
   14ce4:	00bfff84 	movi	r2,-2
   14ce8:	1884703a 	and	r2,r3,r2
   14cec:	1001703a 	wrctl	status,r2
  
  return context;
   14cf0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   14cf4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   14cf8:	008000b4 	movhi	r2,2
   14cfc:	1086c304 	addi	r2,r2,6924
   14d00:	e0fff817 	ldw	r3,-32(fp)
   14d04:	180690fa 	slli	r3,r3,3
   14d08:	10c5883a 	add	r2,r2,r3
   14d0c:	e0fffe17 	ldw	r3,-8(fp)
   14d10:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   14d14:	008000b4 	movhi	r2,2
   14d18:	1086c304 	addi	r2,r2,6924
   14d1c:	e0fff817 	ldw	r3,-32(fp)
   14d20:	180690fa 	slli	r3,r3,3
   14d24:	10c5883a 	add	r2,r2,r3
   14d28:	10800104 	addi	r2,r2,4
   14d2c:	e0ffff17 	ldw	r3,-4(fp)
   14d30:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   14d34:	e0bffe17 	ldw	r2,-8(fp)
   14d38:	10000526 	beq	r2,zero,14d50 <alt_iic_isr_register+0xb4>
   14d3c:	e0bff817 	ldw	r2,-32(fp)
   14d40:	100b883a 	mov	r5,r2
   14d44:	e13ffc17 	ldw	r4,-16(fp)
   14d48:	0014b3c0 	call	14b3c <alt_ic_irq_enable>
   14d4c:	00000406 	br	14d60 <alt_iic_isr_register+0xc4>
   14d50:	e0bff817 	ldw	r2,-32(fp)
   14d54:	100b883a 	mov	r5,r2
   14d58:	e13ffc17 	ldw	r4,-16(fp)
   14d5c:	0014bc40 	call	14bc4 <alt_ic_irq_disable>
   14d60:	e0bff715 	stw	r2,-36(fp)
   14d64:	e0bffa17 	ldw	r2,-24(fp)
   14d68:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   14d6c:	e0bff917 	ldw	r2,-28(fp)
   14d70:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   14d74:	e0bff717 	ldw	r2,-36(fp)
}
   14d78:	e037883a 	mov	sp,fp
   14d7c:	dfc00117 	ldw	ra,4(sp)
   14d80:	df000017 	ldw	fp,0(sp)
   14d84:	dec00204 	addi	sp,sp,8
   14d88:	f800283a 	ret

00014d8c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   14d8c:	defff804 	addi	sp,sp,-32
   14d90:	dfc00715 	stw	ra,28(sp)
   14d94:	df000615 	stw	fp,24(sp)
   14d98:	dc000515 	stw	r16,20(sp)
   14d9c:	df000604 	addi	fp,sp,24
   14da0:	e13ffb15 	stw	r4,-20(fp)
   14da4:	e17ffc15 	stw	r5,-16(fp)
   14da8:	e1bffd15 	stw	r6,-12(fp)
   14dac:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
   14db0:	e1bffe17 	ldw	r6,-8(fp)
   14db4:	e17ffd17 	ldw	r5,-12(fp)
   14db8:	e13ffc17 	ldw	r4,-16(fp)
   14dbc:	00150140 	call	15014 <open>
   14dc0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
   14dc4:	e0bffa17 	ldw	r2,-24(fp)
   14dc8:	10002216 	blt	r2,zero,14e54 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
   14dcc:	040000b4 	movhi	r16,2
   14dd0:	84022804 	addi	r16,r16,2208
   14dd4:	e0bffa17 	ldw	r2,-24(fp)
   14dd8:	01400304 	movi	r5,12
   14ddc:	1009883a 	mov	r4,r2
   14de0:	00131800 	call	13180 <__mulsi3>
   14de4:	8085883a 	add	r2,r16,r2
   14de8:	10c00017 	ldw	r3,0(r2)
   14dec:	e0bffb17 	ldw	r2,-20(fp)
   14df0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   14df4:	040000b4 	movhi	r16,2
   14df8:	84022804 	addi	r16,r16,2208
   14dfc:	e0bffa17 	ldw	r2,-24(fp)
   14e00:	01400304 	movi	r5,12
   14e04:	1009883a 	mov	r4,r2
   14e08:	00131800 	call	13180 <__mulsi3>
   14e0c:	8085883a 	add	r2,r16,r2
   14e10:	10800104 	addi	r2,r2,4
   14e14:	10c00017 	ldw	r3,0(r2)
   14e18:	e0bffb17 	ldw	r2,-20(fp)
   14e1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   14e20:	040000b4 	movhi	r16,2
   14e24:	84022804 	addi	r16,r16,2208
   14e28:	e0bffa17 	ldw	r2,-24(fp)
   14e2c:	01400304 	movi	r5,12
   14e30:	1009883a 	mov	r4,r2
   14e34:	00131800 	call	13180 <__mulsi3>
   14e38:	8085883a 	add	r2,r16,r2
   14e3c:	10800204 	addi	r2,r2,8
   14e40:	10c00017 	ldw	r3,0(r2)
   14e44:	e0bffb17 	ldw	r2,-20(fp)
   14e48:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   14e4c:	e13ffa17 	ldw	r4,-24(fp)
   14e50:	00138cc0 	call	138cc <alt_release_fd>
  }
} 
   14e54:	0001883a 	nop
   14e58:	e6ffff04 	addi	sp,fp,-4
   14e5c:	dfc00217 	ldw	ra,8(sp)
   14e60:	df000117 	ldw	fp,4(sp)
   14e64:	dc000017 	ldw	r16,0(sp)
   14e68:	dec00304 	addi	sp,sp,12
   14e6c:	f800283a 	ret

00014e70 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   14e70:	defffb04 	addi	sp,sp,-20
   14e74:	dfc00415 	stw	ra,16(sp)
   14e78:	df000315 	stw	fp,12(sp)
   14e7c:	df000304 	addi	fp,sp,12
   14e80:	e13ffd15 	stw	r4,-12(fp)
   14e84:	e17ffe15 	stw	r5,-8(fp)
   14e88:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   14e8c:	01c07fc4 	movi	r7,511
   14e90:	01800044 	movi	r6,1
   14e94:	e17ffd17 	ldw	r5,-12(fp)
   14e98:	010000b4 	movhi	r4,2
   14e9c:	21022b04 	addi	r4,r4,2220
   14ea0:	0014d8c0 	call	14d8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   14ea4:	01c07fc4 	movi	r7,511
   14ea8:	000d883a 	mov	r6,zero
   14eac:	e17ffe17 	ldw	r5,-8(fp)
   14eb0:	010000b4 	movhi	r4,2
   14eb4:	21022804 	addi	r4,r4,2208
   14eb8:	0014d8c0 	call	14d8c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   14ebc:	01c07fc4 	movi	r7,511
   14ec0:	01800044 	movi	r6,1
   14ec4:	e17fff17 	ldw	r5,-4(fp)
   14ec8:	010000b4 	movhi	r4,2
   14ecc:	21022e04 	addi	r4,r4,2232
   14ed0:	0014d8c0 	call	14d8c <alt_open_fd>
}  
   14ed4:	0001883a 	nop
   14ed8:	e037883a 	mov	sp,fp
   14edc:	dfc00117 	ldw	ra,4(sp)
   14ee0:	df000017 	ldw	fp,0(sp)
   14ee4:	dec00204 	addi	sp,sp,8
   14ee8:	f800283a 	ret

00014eec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   14eec:	defffe04 	addi	sp,sp,-8
   14ef0:	dfc00115 	stw	ra,4(sp)
   14ef4:	df000015 	stw	fp,0(sp)
   14ef8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   14efc:	d0a00917 	ldw	r2,-32732(gp)
   14f00:	10000326 	beq	r2,zero,14f10 <alt_get_errno+0x24>
   14f04:	d0a00917 	ldw	r2,-32732(gp)
   14f08:	103ee83a 	callr	r2
   14f0c:	00000106 	br	14f14 <alt_get_errno+0x28>
   14f10:	d0a01104 	addi	r2,gp,-32700
}
   14f14:	e037883a 	mov	sp,fp
   14f18:	dfc00117 	ldw	ra,4(sp)
   14f1c:	df000017 	ldw	fp,0(sp)
   14f20:	dec00204 	addi	sp,sp,8
   14f24:	f800283a 	ret

00014f28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   14f28:	defffb04 	addi	sp,sp,-20
   14f2c:	dfc00415 	stw	ra,16(sp)
   14f30:	df000315 	stw	fp,12(sp)
   14f34:	dc000215 	stw	r16,8(sp)
   14f38:	df000304 	addi	fp,sp,12
   14f3c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   14f40:	e0bffe17 	ldw	r2,-8(fp)
   14f44:	10800217 	ldw	r2,8(r2)
   14f48:	10d00034 	orhi	r3,r2,16384
   14f4c:	e0bffe17 	ldw	r2,-8(fp)
   14f50:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14f54:	e03ffd15 	stw	zero,-12(fp)
   14f58:	00002306 	br	14fe8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14f5c:	040000b4 	movhi	r16,2
   14f60:	84022804 	addi	r16,r16,2208
   14f64:	e0bffd17 	ldw	r2,-12(fp)
   14f68:	01400304 	movi	r5,12
   14f6c:	1009883a 	mov	r4,r2
   14f70:	00131800 	call	13180 <__mulsi3>
   14f74:	8085883a 	add	r2,r16,r2
   14f78:	10c00017 	ldw	r3,0(r2)
   14f7c:	e0bffe17 	ldw	r2,-8(fp)
   14f80:	10800017 	ldw	r2,0(r2)
   14f84:	1880151e 	bne	r3,r2,14fdc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14f88:	040000b4 	movhi	r16,2
   14f8c:	84022804 	addi	r16,r16,2208
   14f90:	e0bffd17 	ldw	r2,-12(fp)
   14f94:	01400304 	movi	r5,12
   14f98:	1009883a 	mov	r4,r2
   14f9c:	00131800 	call	13180 <__mulsi3>
   14fa0:	8085883a 	add	r2,r16,r2
   14fa4:	10800204 	addi	r2,r2,8
   14fa8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   14fac:	10000b0e 	bge	r2,zero,14fdc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   14fb0:	01400304 	movi	r5,12
   14fb4:	e13ffd17 	ldw	r4,-12(fp)
   14fb8:	00131800 	call	13180 <__mulsi3>
   14fbc:	1007883a 	mov	r3,r2
   14fc0:	008000b4 	movhi	r2,2
   14fc4:	10822804 	addi	r2,r2,2208
   14fc8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   14fcc:	e0bffe17 	ldw	r2,-8(fp)
   14fd0:	18800226 	beq	r3,r2,14fdc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   14fd4:	00bffcc4 	movi	r2,-13
   14fd8:	00000806 	br	14ffc <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   14fdc:	e0bffd17 	ldw	r2,-12(fp)
   14fe0:	10800044 	addi	r2,r2,1
   14fe4:	e0bffd15 	stw	r2,-12(fp)
   14fe8:	d0a00817 	ldw	r2,-32736(gp)
   14fec:	1007883a 	mov	r3,r2
   14ff0:	e0bffd17 	ldw	r2,-12(fp)
   14ff4:	18bfd92e 	bgeu	r3,r2,14f5c <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   14ff8:	0005883a 	mov	r2,zero
}
   14ffc:	e6ffff04 	addi	sp,fp,-4
   15000:	dfc00217 	ldw	ra,8(sp)
   15004:	df000117 	ldw	fp,4(sp)
   15008:	dc000017 	ldw	r16,0(sp)
   1500c:	dec00304 	addi	sp,sp,12
   15010:	f800283a 	ret

00015014 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   15014:	defff604 	addi	sp,sp,-40
   15018:	dfc00915 	stw	ra,36(sp)
   1501c:	df000815 	stw	fp,32(sp)
   15020:	df000804 	addi	fp,sp,32
   15024:	e13ffd15 	stw	r4,-12(fp)
   15028:	e17ffe15 	stw	r5,-8(fp)
   1502c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   15030:	00bfffc4 	movi	r2,-1
   15034:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   15038:	00bffb44 	movi	r2,-19
   1503c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   15040:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   15044:	d1600604 	addi	r5,gp,-32744
   15048:	e13ffd17 	ldw	r4,-12(fp)
   1504c:	00153380 	call	15338 <alt_find_dev>
   15050:	e0bff815 	stw	r2,-32(fp)
   15054:	e0bff817 	ldw	r2,-32(fp)
   15058:	1000051e 	bne	r2,zero,15070 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   1505c:	e13ffd17 	ldw	r4,-12(fp)
   15060:	00153c80 	call	153c8 <alt_find_file>
   15064:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   15068:	00800044 	movi	r2,1
   1506c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   15070:	e0bff817 	ldw	r2,-32(fp)
   15074:	10002b26 	beq	r2,zero,15124 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
   15078:	e13ff817 	ldw	r4,-32(fp)
   1507c:	00154d00 	call	154d0 <alt_get_fd>
   15080:	e0bff915 	stw	r2,-28(fp)
   15084:	e0bff917 	ldw	r2,-28(fp)
   15088:	1000030e 	bge	r2,zero,15098 <open+0x84>
    {
      status = index;
   1508c:	e0bff917 	ldw	r2,-28(fp)
   15090:	e0bffa15 	stw	r2,-24(fp)
   15094:	00002506 	br	1512c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
   15098:	01400304 	movi	r5,12
   1509c:	e13ff917 	ldw	r4,-28(fp)
   150a0:	00131800 	call	13180 <__mulsi3>
   150a4:	1007883a 	mov	r3,r2
   150a8:	008000b4 	movhi	r2,2
   150ac:	10822804 	addi	r2,r2,2208
   150b0:	1885883a 	add	r2,r3,r2
   150b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   150b8:	e0fffe17 	ldw	r3,-8(fp)
   150bc:	00900034 	movhi	r2,16384
   150c0:	10bfffc4 	addi	r2,r2,-1
   150c4:	1886703a 	and	r3,r3,r2
   150c8:	e0bffc17 	ldw	r2,-16(fp)
   150cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   150d0:	e0bffb17 	ldw	r2,-20(fp)
   150d4:	1000051e 	bne	r2,zero,150ec <open+0xd8>
   150d8:	e13ffc17 	ldw	r4,-16(fp)
   150dc:	0014f280 	call	14f28 <alt_file_locked>
   150e0:	e0bffa15 	stw	r2,-24(fp)
   150e4:	e0bffa17 	ldw	r2,-24(fp)
   150e8:	10001016 	blt	r2,zero,1512c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   150ec:	e0bff817 	ldw	r2,-32(fp)
   150f0:	10800317 	ldw	r2,12(r2)
   150f4:	10000826 	beq	r2,zero,15118 <open+0x104>
   150f8:	e0bff817 	ldw	r2,-32(fp)
   150fc:	10800317 	ldw	r2,12(r2)
   15100:	e1ffff17 	ldw	r7,-4(fp)
   15104:	e1bffe17 	ldw	r6,-8(fp)
   15108:	e17ffd17 	ldw	r5,-12(fp)
   1510c:	e13ffc17 	ldw	r4,-16(fp)
   15110:	103ee83a 	callr	r2
   15114:	00000106 	br	1511c <open+0x108>
   15118:	0005883a 	mov	r2,zero
   1511c:	e0bffa15 	stw	r2,-24(fp)
   15120:	00000206 	br	1512c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
   15124:	00bffb44 	movi	r2,-19
   15128:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   1512c:	e0bffa17 	ldw	r2,-24(fp)
   15130:	1000090e 	bge	r2,zero,15158 <open+0x144>
  {
    alt_release_fd (index);  
   15134:	e13ff917 	ldw	r4,-28(fp)
   15138:	00138cc0 	call	138cc <alt_release_fd>
    ALT_ERRNO = -status;
   1513c:	0014eec0 	call	14eec <alt_get_errno>
   15140:	1007883a 	mov	r3,r2
   15144:	e0bffa17 	ldw	r2,-24(fp)
   15148:	0085c83a 	sub	r2,zero,r2
   1514c:	18800015 	stw	r2,0(r3)
    return -1;
   15150:	00bfffc4 	movi	r2,-1
   15154:	00000106 	br	1515c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
   15158:	e0bff917 	ldw	r2,-28(fp)
}
   1515c:	e037883a 	mov	sp,fp
   15160:	dfc00117 	ldw	ra,4(sp)
   15164:	df000017 	ldw	fp,0(sp)
   15168:	dec00204 	addi	sp,sp,8
   1516c:	f800283a 	ret

00015170 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   15170:	defffa04 	addi	sp,sp,-24
   15174:	df000515 	stw	fp,20(sp)
   15178:	df000504 	addi	fp,sp,20
   1517c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   15180:	0005303a 	rdctl	r2,status
   15184:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   15188:	e0fffc17 	ldw	r3,-16(fp)
   1518c:	00bfff84 	movi	r2,-2
   15190:	1884703a 	and	r2,r3,r2
   15194:	1001703a 	wrctl	status,r2
  
  return context;
   15198:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   1519c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   151a0:	e0bfff17 	ldw	r2,-4(fp)
   151a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   151a8:	e0bffd17 	ldw	r2,-12(fp)
   151ac:	10800017 	ldw	r2,0(r2)
   151b0:	e0fffd17 	ldw	r3,-12(fp)
   151b4:	18c00117 	ldw	r3,4(r3)
   151b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   151bc:	e0bffd17 	ldw	r2,-12(fp)
   151c0:	10800117 	ldw	r2,4(r2)
   151c4:	e0fffd17 	ldw	r3,-12(fp)
   151c8:	18c00017 	ldw	r3,0(r3)
   151cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   151d0:	e0bffd17 	ldw	r2,-12(fp)
   151d4:	e0fffd17 	ldw	r3,-12(fp)
   151d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   151dc:	e0bffd17 	ldw	r2,-12(fp)
   151e0:	e0fffd17 	ldw	r3,-12(fp)
   151e4:	10c00015 	stw	r3,0(r2)
   151e8:	e0bffb17 	ldw	r2,-20(fp)
   151ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   151f0:	e0bffe17 	ldw	r2,-8(fp)
   151f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   151f8:	0001883a 	nop
   151fc:	e037883a 	mov	sp,fp
   15200:	df000017 	ldw	fp,0(sp)
   15204:	dec00104 	addi	sp,sp,4
   15208:	f800283a 	ret

0001520c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   1520c:	defffb04 	addi	sp,sp,-20
   15210:	dfc00415 	stw	ra,16(sp)
   15214:	df000315 	stw	fp,12(sp)
   15218:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   1521c:	d0a00c17 	ldw	r2,-32720(gp)
   15220:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   15224:	d0a01717 	ldw	r2,-32676(gp)
   15228:	10800044 	addi	r2,r2,1
   1522c:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   15230:	00002e06 	br	152ec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   15234:	e0bffd17 	ldw	r2,-12(fp)
   15238:	10800017 	ldw	r2,0(r2)
   1523c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   15240:	e0bffd17 	ldw	r2,-12(fp)
   15244:	10800403 	ldbu	r2,16(r2)
   15248:	10803fcc 	andi	r2,r2,255
   1524c:	10000426 	beq	r2,zero,15260 <alt_tick+0x54>
   15250:	d0a01717 	ldw	r2,-32676(gp)
   15254:	1000021e 	bne	r2,zero,15260 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   15258:	e0bffd17 	ldw	r2,-12(fp)
   1525c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   15260:	e0bffd17 	ldw	r2,-12(fp)
   15264:	10800217 	ldw	r2,8(r2)
   15268:	d0e01717 	ldw	r3,-32676(gp)
   1526c:	18801d36 	bltu	r3,r2,152e4 <alt_tick+0xd8>
   15270:	e0bffd17 	ldw	r2,-12(fp)
   15274:	10800403 	ldbu	r2,16(r2)
   15278:	10803fcc 	andi	r2,r2,255
   1527c:	1000191e 	bne	r2,zero,152e4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   15280:	e0bffd17 	ldw	r2,-12(fp)
   15284:	10800317 	ldw	r2,12(r2)
   15288:	e0fffd17 	ldw	r3,-12(fp)
   1528c:	18c00517 	ldw	r3,20(r3)
   15290:	1809883a 	mov	r4,r3
   15294:	103ee83a 	callr	r2
   15298:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   1529c:	e0bfff17 	ldw	r2,-4(fp)
   152a0:	1000031e 	bne	r2,zero,152b0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   152a4:	e13ffd17 	ldw	r4,-12(fp)
   152a8:	00151700 	call	15170 <alt_alarm_stop>
   152ac:	00000d06 	br	152e4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   152b0:	e0bffd17 	ldw	r2,-12(fp)
   152b4:	10c00217 	ldw	r3,8(r2)
   152b8:	e0bfff17 	ldw	r2,-4(fp)
   152bc:	1887883a 	add	r3,r3,r2
   152c0:	e0bffd17 	ldw	r2,-12(fp)
   152c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   152c8:	e0bffd17 	ldw	r2,-12(fp)
   152cc:	10c00217 	ldw	r3,8(r2)
   152d0:	d0a01717 	ldw	r2,-32676(gp)
   152d4:	1880032e 	bgeu	r3,r2,152e4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   152d8:	e0bffd17 	ldw	r2,-12(fp)
   152dc:	00c00044 	movi	r3,1
   152e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   152e4:	e0bffe17 	ldw	r2,-8(fp)
   152e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   152ec:	e0fffd17 	ldw	r3,-12(fp)
   152f0:	d0a00c04 	addi	r2,gp,-32720
   152f4:	18bfcf1e 	bne	r3,r2,15234 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   152f8:	0001883a 	nop
}
   152fc:	0001883a 	nop
   15300:	e037883a 	mov	sp,fp
   15304:	dfc00117 	ldw	ra,4(sp)
   15308:	df000017 	ldw	fp,0(sp)
   1530c:	dec00204 	addi	sp,sp,8
   15310:	f800283a 	ret

00015314 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   15314:	deffff04 	addi	sp,sp,-4
   15318:	df000015 	stw	fp,0(sp)
   1531c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   15320:	000170fa 	wrctl	ienable,zero
}
   15324:	0001883a 	nop
   15328:	e037883a 	mov	sp,fp
   1532c:	df000017 	ldw	fp,0(sp)
   15330:	dec00104 	addi	sp,sp,4
   15334:	f800283a 	ret

00015338 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   15338:	defffa04 	addi	sp,sp,-24
   1533c:	dfc00515 	stw	ra,20(sp)
   15340:	df000415 	stw	fp,16(sp)
   15344:	df000404 	addi	fp,sp,16
   15348:	e13ffe15 	stw	r4,-8(fp)
   1534c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   15350:	e0bfff17 	ldw	r2,-4(fp)
   15354:	10800017 	ldw	r2,0(r2)
   15358:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   1535c:	e13ffe17 	ldw	r4,-8(fp)
   15360:	00104700 	call	10470 <strlen>
   15364:	10800044 	addi	r2,r2,1
   15368:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   1536c:	00000d06 	br	153a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   15370:	e0bffc17 	ldw	r2,-16(fp)
   15374:	10800217 	ldw	r2,8(r2)
   15378:	e0fffd17 	ldw	r3,-12(fp)
   1537c:	180d883a 	mov	r6,r3
   15380:	e17ffe17 	ldw	r5,-8(fp)
   15384:	1009883a 	mov	r4,r2
   15388:	001567c0 	call	1567c <memcmp>
   1538c:	1000021e 	bne	r2,zero,15398 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   15390:	e0bffc17 	ldw	r2,-16(fp)
   15394:	00000706 	br	153b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   15398:	e0bffc17 	ldw	r2,-16(fp)
   1539c:	10800017 	ldw	r2,0(r2)
   153a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   153a4:	e0fffc17 	ldw	r3,-16(fp)
   153a8:	e0bfff17 	ldw	r2,-4(fp)
   153ac:	18bff01e 	bne	r3,r2,15370 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   153b0:	0005883a 	mov	r2,zero
}
   153b4:	e037883a 	mov	sp,fp
   153b8:	dfc00117 	ldw	ra,4(sp)
   153bc:	df000017 	ldw	fp,0(sp)
   153c0:	dec00204 	addi	sp,sp,8
   153c4:	f800283a 	ret

000153c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   153c8:	defffb04 	addi	sp,sp,-20
   153cc:	dfc00415 	stw	ra,16(sp)
   153d0:	df000315 	stw	fp,12(sp)
   153d4:	df000304 	addi	fp,sp,12
   153d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   153dc:	d0a00417 	ldw	r2,-32752(gp)
   153e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   153e4:	00003106 	br	154ac <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   153e8:	e0bffd17 	ldw	r2,-12(fp)
   153ec:	10800217 	ldw	r2,8(r2)
   153f0:	1009883a 	mov	r4,r2
   153f4:	00104700 	call	10470 <strlen>
   153f8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   153fc:	e0bffd17 	ldw	r2,-12(fp)
   15400:	10c00217 	ldw	r3,8(r2)
   15404:	e0bffe17 	ldw	r2,-8(fp)
   15408:	10bfffc4 	addi	r2,r2,-1
   1540c:	1885883a 	add	r2,r3,r2
   15410:	10800003 	ldbu	r2,0(r2)
   15414:	10803fcc 	andi	r2,r2,255
   15418:	1080201c 	xori	r2,r2,128
   1541c:	10bfe004 	addi	r2,r2,-128
   15420:	10800bd8 	cmpnei	r2,r2,47
   15424:	1000031e 	bne	r2,zero,15434 <alt_find_file+0x6c>
    {
      len -= 1;
   15428:	e0bffe17 	ldw	r2,-8(fp)
   1542c:	10bfffc4 	addi	r2,r2,-1
   15430:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15434:	e0bffe17 	ldw	r2,-8(fp)
   15438:	e0ffff17 	ldw	r3,-4(fp)
   1543c:	1885883a 	add	r2,r3,r2
   15440:	10800003 	ldbu	r2,0(r2)
   15444:	10803fcc 	andi	r2,r2,255
   15448:	1080201c 	xori	r2,r2,128
   1544c:	10bfe004 	addi	r2,r2,-128
   15450:	10800be0 	cmpeqi	r2,r2,47
   15454:	1000081e 	bne	r2,zero,15478 <alt_find_file+0xb0>
   15458:	e0bffe17 	ldw	r2,-8(fp)
   1545c:	e0ffff17 	ldw	r3,-4(fp)
   15460:	1885883a 	add	r2,r3,r2
   15464:	10800003 	ldbu	r2,0(r2)
   15468:	10803fcc 	andi	r2,r2,255
   1546c:	1080201c 	xori	r2,r2,128
   15470:	10bfe004 	addi	r2,r2,-128
   15474:	10000a1e 	bne	r2,zero,154a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   15478:	e0bffd17 	ldw	r2,-12(fp)
   1547c:	10800217 	ldw	r2,8(r2)
   15480:	e0fffe17 	ldw	r3,-8(fp)
   15484:	180d883a 	mov	r6,r3
   15488:	e17fff17 	ldw	r5,-4(fp)
   1548c:	1009883a 	mov	r4,r2
   15490:	001567c0 	call	1567c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   15494:	1000021e 	bne	r2,zero,154a0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   15498:	e0bffd17 	ldw	r2,-12(fp)
   1549c:	00000706 	br	154bc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   154a0:	e0bffd17 	ldw	r2,-12(fp)
   154a4:	10800017 	ldw	r2,0(r2)
   154a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   154ac:	e0fffd17 	ldw	r3,-12(fp)
   154b0:	d0a00404 	addi	r2,gp,-32752
   154b4:	18bfcc1e 	bne	r3,r2,153e8 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   154b8:	0005883a 	mov	r2,zero
}
   154bc:	e037883a 	mov	sp,fp
   154c0:	dfc00117 	ldw	ra,4(sp)
   154c4:	df000017 	ldw	fp,0(sp)
   154c8:	dec00204 	addi	sp,sp,8
   154cc:	f800283a 	ret

000154d0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   154d0:	defffa04 	addi	sp,sp,-24
   154d4:	dfc00515 	stw	ra,20(sp)
   154d8:	df000415 	stw	fp,16(sp)
   154dc:	dc000315 	stw	r16,12(sp)
   154e0:	df000404 	addi	fp,sp,16
   154e4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
   154e8:	00bffa04 	movi	r2,-24
   154ec:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   154f0:	e03ffc15 	stw	zero,-16(fp)
   154f4:	00001d06 	br	1556c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
   154f8:	040000b4 	movhi	r16,2
   154fc:	84022804 	addi	r16,r16,2208
   15500:	e0bffc17 	ldw	r2,-16(fp)
   15504:	01400304 	movi	r5,12
   15508:	1009883a 	mov	r4,r2
   1550c:	00131800 	call	13180 <__mulsi3>
   15510:	8085883a 	add	r2,r16,r2
   15514:	10800017 	ldw	r2,0(r2)
   15518:	1000111e 	bne	r2,zero,15560 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
   1551c:	040000b4 	movhi	r16,2
   15520:	84022804 	addi	r16,r16,2208
   15524:	e0bffc17 	ldw	r2,-16(fp)
   15528:	01400304 	movi	r5,12
   1552c:	1009883a 	mov	r4,r2
   15530:	00131800 	call	13180 <__mulsi3>
   15534:	8085883a 	add	r2,r16,r2
   15538:	e0fffe17 	ldw	r3,-8(fp)
   1553c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   15540:	d0e00817 	ldw	r3,-32736(gp)
   15544:	e0bffc17 	ldw	r2,-16(fp)
   15548:	1880020e 	bge	r3,r2,15554 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
   1554c:	e0bffc17 	ldw	r2,-16(fp)
   15550:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   15554:	e0bffc17 	ldw	r2,-16(fp)
   15558:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
   1555c:	00000606 	br	15578 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   15560:	e0bffc17 	ldw	r2,-16(fp)
   15564:	10800044 	addi	r2,r2,1
   15568:	e0bffc15 	stw	r2,-16(fp)
   1556c:	e0bffc17 	ldw	r2,-16(fp)
   15570:	10800810 	cmplti	r2,r2,32
   15574:	103fe01e 	bne	r2,zero,154f8 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   15578:	e0bffd17 	ldw	r2,-12(fp)
}
   1557c:	e6ffff04 	addi	sp,fp,-4
   15580:	dfc00217 	ldw	ra,8(sp)
   15584:	df000117 	ldw	fp,4(sp)
   15588:	dc000017 	ldw	r16,0(sp)
   1558c:	dec00304 	addi	sp,sp,12
   15590:	f800283a 	ret

00015594 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   15594:	defffe04 	addi	sp,sp,-8
   15598:	df000115 	stw	fp,4(sp)
   1559c:	df000104 	addi	fp,sp,4
   155a0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   155a4:	e0bfff17 	ldw	r2,-4(fp)
   155a8:	10bffe84 	addi	r2,r2,-6
   155ac:	10c00428 	cmpgeui	r3,r2,16
   155b0:	18001a1e 	bne	r3,zero,1561c <alt_exception_cause_generated_bad_addr+0x88>
   155b4:	100690ba 	slli	r3,r2,2
   155b8:	00800074 	movhi	r2,1
   155bc:	10957304 	addi	r2,r2,21964
   155c0:	1885883a 	add	r2,r3,r2
   155c4:	10800017 	ldw	r2,0(r2)
   155c8:	1000683a 	jmp	r2
   155cc:	0001560c 	andi	zero,zero,1368
   155d0:	0001560c 	andi	zero,zero,1368
   155d4:	0001561c 	xori	zero,zero,1368
   155d8:	0001561c 	xori	zero,zero,1368
   155dc:	0001561c 	xori	zero,zero,1368
   155e0:	0001560c 	andi	zero,zero,1368
   155e4:	00015614 	movui	zero,1368
   155e8:	0001561c 	xori	zero,zero,1368
   155ec:	0001560c 	andi	zero,zero,1368
   155f0:	0001560c 	andi	zero,zero,1368
   155f4:	0001561c 	xori	zero,zero,1368
   155f8:	0001560c 	andi	zero,zero,1368
   155fc:	00015614 	movui	zero,1368
   15600:	0001561c 	xori	zero,zero,1368
   15604:	0001561c 	xori	zero,zero,1368
   15608:	0001560c 	andi	zero,zero,1368
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   1560c:	00800044 	movi	r2,1
   15610:	00000306 	br	15620 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   15614:	0005883a 	mov	r2,zero
   15618:	00000106 	br	15620 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   1561c:	0005883a 	mov	r2,zero
  }
}
   15620:	e037883a 	mov	sp,fp
   15624:	df000017 	ldw	fp,0(sp)
   15628:	dec00104 	addi	sp,sp,4
   1562c:	f800283a 	ret

00015630 <atexit>:
   15630:	200b883a 	mov	r5,r4
   15634:	000f883a 	mov	r7,zero
   15638:	000d883a 	mov	r6,zero
   1563c:	0009883a 	mov	r4,zero
   15640:	00156f81 	jmpi	156f8 <__register_exitproc>

00015644 <exit>:
   15644:	defffe04 	addi	sp,sp,-8
   15648:	000b883a 	mov	r5,zero
   1564c:	dc000015 	stw	r16,0(sp)
   15650:	dfc00115 	stw	ra,4(sp)
   15654:	2021883a 	mov	r16,r4
   15658:	00158100 	call	15810 <__call_exitprocs>
   1565c:	008000b4 	movhi	r2,2
   15660:	1086a004 	addi	r2,r2,6784
   15664:	11000017 	ldw	r4,0(r2)
   15668:	20800f17 	ldw	r2,60(r4)
   1566c:	10000126 	beq	r2,zero,15674 <exit+0x30>
   15670:	103ee83a 	callr	r2
   15674:	8009883a 	mov	r4,r16
   15678:	00159900 	call	15990 <_exit>

0001567c <memcmp>:
   1567c:	01c000c4 	movi	r7,3
   15680:	3980192e 	bgeu	r7,r6,156e8 <memcmp+0x6c>
   15684:	2144b03a 	or	r2,r4,r5
   15688:	11c4703a 	and	r2,r2,r7
   1568c:	10000f26 	beq	r2,zero,156cc <memcmp+0x50>
   15690:	20800003 	ldbu	r2,0(r4)
   15694:	28c00003 	ldbu	r3,0(r5)
   15698:	10c0151e 	bne	r2,r3,156f0 <memcmp+0x74>
   1569c:	31bfff84 	addi	r6,r6,-2
   156a0:	01ffffc4 	movi	r7,-1
   156a4:	00000406 	br	156b8 <memcmp+0x3c>
   156a8:	20800003 	ldbu	r2,0(r4)
   156ac:	28c00003 	ldbu	r3,0(r5)
   156b0:	31bfffc4 	addi	r6,r6,-1
   156b4:	10c00e1e 	bne	r2,r3,156f0 <memcmp+0x74>
   156b8:	21000044 	addi	r4,r4,1
   156bc:	29400044 	addi	r5,r5,1
   156c0:	31fff91e 	bne	r6,r7,156a8 <memcmp+0x2c>
   156c4:	0005883a 	mov	r2,zero
   156c8:	f800283a 	ret
   156cc:	20c00017 	ldw	r3,0(r4)
   156d0:	28800017 	ldw	r2,0(r5)
   156d4:	18bfee1e 	bne	r3,r2,15690 <memcmp+0x14>
   156d8:	31bfff04 	addi	r6,r6,-4
   156dc:	21000104 	addi	r4,r4,4
   156e0:	29400104 	addi	r5,r5,4
   156e4:	39bff936 	bltu	r7,r6,156cc <memcmp+0x50>
   156e8:	303fe91e 	bne	r6,zero,15690 <memcmp+0x14>
   156ec:	003ff506 	br	156c4 <memcmp+0x48>
   156f0:	10c5c83a 	sub	r2,r2,r3
   156f4:	f800283a 	ret

000156f8 <__register_exitproc>:
   156f8:	defffa04 	addi	sp,sp,-24
   156fc:	dc000315 	stw	r16,12(sp)
   15700:	040000b4 	movhi	r16,2
   15704:	8406a004 	addi	r16,r16,6784
   15708:	80c00017 	ldw	r3,0(r16)
   1570c:	dc400415 	stw	r17,16(sp)
   15710:	dfc00515 	stw	ra,20(sp)
   15714:	18805217 	ldw	r2,328(r3)
   15718:	2023883a 	mov	r17,r4
   1571c:	10003726 	beq	r2,zero,157fc <__register_exitproc+0x104>
   15720:	10c00117 	ldw	r3,4(r2)
   15724:	010007c4 	movi	r4,31
   15728:	20c00e16 	blt	r4,r3,15764 <__register_exitproc+0x6c>
   1572c:	1a000044 	addi	r8,r3,1
   15730:	8800221e 	bne	r17,zero,157bc <__register_exitproc+0xc4>
   15734:	18c00084 	addi	r3,r3,2
   15738:	18c7883a 	add	r3,r3,r3
   1573c:	18c7883a 	add	r3,r3,r3
   15740:	12000115 	stw	r8,4(r2)
   15744:	10c7883a 	add	r3,r2,r3
   15748:	19400015 	stw	r5,0(r3)
   1574c:	0005883a 	mov	r2,zero
   15750:	dfc00517 	ldw	ra,20(sp)
   15754:	dc400417 	ldw	r17,16(sp)
   15758:	dc000317 	ldw	r16,12(sp)
   1575c:	dec00604 	addi	sp,sp,24
   15760:	f800283a 	ret
   15764:	00800034 	movhi	r2,0
   15768:	10800004 	addi	r2,r2,0
   1576c:	10002626 	beq	r2,zero,15808 <__register_exitproc+0x110>
   15770:	01006404 	movi	r4,400
   15774:	d9400015 	stw	r5,0(sp)
   15778:	d9800115 	stw	r6,4(sp)
   1577c:	d9c00215 	stw	r7,8(sp)
   15780:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   15784:	d9400017 	ldw	r5,0(sp)
   15788:	d9800117 	ldw	r6,4(sp)
   1578c:	d9c00217 	ldw	r7,8(sp)
   15790:	10001d26 	beq	r2,zero,15808 <__register_exitproc+0x110>
   15794:	81000017 	ldw	r4,0(r16)
   15798:	10000115 	stw	zero,4(r2)
   1579c:	02000044 	movi	r8,1
   157a0:	22405217 	ldw	r9,328(r4)
   157a4:	0007883a 	mov	r3,zero
   157a8:	12400015 	stw	r9,0(r2)
   157ac:	20805215 	stw	r2,328(r4)
   157b0:	10006215 	stw	zero,392(r2)
   157b4:	10006315 	stw	zero,396(r2)
   157b8:	883fde26 	beq	r17,zero,15734 <__register_exitproc+0x3c>
   157bc:	18c9883a 	add	r4,r3,r3
   157c0:	2109883a 	add	r4,r4,r4
   157c4:	1109883a 	add	r4,r2,r4
   157c8:	21802215 	stw	r6,136(r4)
   157cc:	01800044 	movi	r6,1
   157d0:	12406217 	ldw	r9,392(r2)
   157d4:	30cc983a 	sll	r6,r6,r3
   157d8:	4992b03a 	or	r9,r9,r6
   157dc:	12406215 	stw	r9,392(r2)
   157e0:	21c04215 	stw	r7,264(r4)
   157e4:	01000084 	movi	r4,2
   157e8:	893fd21e 	bne	r17,r4,15734 <__register_exitproc+0x3c>
   157ec:	11006317 	ldw	r4,396(r2)
   157f0:	218cb03a 	or	r6,r4,r6
   157f4:	11806315 	stw	r6,396(r2)
   157f8:	003fce06 	br	15734 <__register_exitproc+0x3c>
   157fc:	18805304 	addi	r2,r3,332
   15800:	18805215 	stw	r2,328(r3)
   15804:	003fc606 	br	15720 <__register_exitproc+0x28>
   15808:	00bfffc4 	movi	r2,-1
   1580c:	003fd006 	br	15750 <__register_exitproc+0x58>

00015810 <__call_exitprocs>:
   15810:	defff504 	addi	sp,sp,-44
   15814:	df000915 	stw	fp,36(sp)
   15818:	dd400615 	stw	r21,24(sp)
   1581c:	dc800315 	stw	r18,12(sp)
   15820:	dfc00a15 	stw	ra,40(sp)
   15824:	ddc00815 	stw	r23,32(sp)
   15828:	dd800715 	stw	r22,28(sp)
   1582c:	dd000515 	stw	r20,20(sp)
   15830:	dcc00415 	stw	r19,16(sp)
   15834:	dc400215 	stw	r17,8(sp)
   15838:	dc000115 	stw	r16,4(sp)
   1583c:	d9000015 	stw	r4,0(sp)
   15840:	2839883a 	mov	fp,r5
   15844:	04800044 	movi	r18,1
   15848:	057fffc4 	movi	r21,-1
   1584c:	008000b4 	movhi	r2,2
   15850:	1086a004 	addi	r2,r2,6784
   15854:	12000017 	ldw	r8,0(r2)
   15858:	45005217 	ldw	r20,328(r8)
   1585c:	44c05204 	addi	r19,r8,328
   15860:	a0001c26 	beq	r20,zero,158d4 <__call_exitprocs+0xc4>
   15864:	a0800117 	ldw	r2,4(r20)
   15868:	15ffffc4 	addi	r23,r2,-1
   1586c:	b8000d16 	blt	r23,zero,158a4 <__call_exitprocs+0x94>
   15870:	14000044 	addi	r16,r2,1
   15874:	8421883a 	add	r16,r16,r16
   15878:	8421883a 	add	r16,r16,r16
   1587c:	84402004 	addi	r17,r16,128
   15880:	a463883a 	add	r17,r20,r17
   15884:	a421883a 	add	r16,r20,r16
   15888:	e0001e26 	beq	fp,zero,15904 <__call_exitprocs+0xf4>
   1588c:	80804017 	ldw	r2,256(r16)
   15890:	e0801c26 	beq	fp,r2,15904 <__call_exitprocs+0xf4>
   15894:	bdffffc4 	addi	r23,r23,-1
   15898:	843fff04 	addi	r16,r16,-4
   1589c:	8c7fff04 	addi	r17,r17,-4
   158a0:	bd7ff91e 	bne	r23,r21,15888 <__call_exitprocs+0x78>
   158a4:	00800034 	movhi	r2,0
   158a8:	10800004 	addi	r2,r2,0
   158ac:	10000926 	beq	r2,zero,158d4 <__call_exitprocs+0xc4>
   158b0:	a0800117 	ldw	r2,4(r20)
   158b4:	1000301e 	bne	r2,zero,15978 <__call_exitprocs+0x168>
   158b8:	a0800017 	ldw	r2,0(r20)
   158bc:	10003226 	beq	r2,zero,15988 <__call_exitprocs+0x178>
   158c0:	a009883a 	mov	r4,r20
   158c4:	98800015 	stw	r2,0(r19)
   158c8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x10000>
   158cc:	9d000017 	ldw	r20,0(r19)
   158d0:	a03fe41e 	bne	r20,zero,15864 <__call_exitprocs+0x54>
   158d4:	dfc00a17 	ldw	ra,40(sp)
   158d8:	df000917 	ldw	fp,36(sp)
   158dc:	ddc00817 	ldw	r23,32(sp)
   158e0:	dd800717 	ldw	r22,28(sp)
   158e4:	dd400617 	ldw	r21,24(sp)
   158e8:	dd000517 	ldw	r20,20(sp)
   158ec:	dcc00417 	ldw	r19,16(sp)
   158f0:	dc800317 	ldw	r18,12(sp)
   158f4:	dc400217 	ldw	r17,8(sp)
   158f8:	dc000117 	ldw	r16,4(sp)
   158fc:	dec00b04 	addi	sp,sp,44
   15900:	f800283a 	ret
   15904:	a0800117 	ldw	r2,4(r20)
   15908:	80c00017 	ldw	r3,0(r16)
   1590c:	10bfffc4 	addi	r2,r2,-1
   15910:	15c01426 	beq	r2,r23,15964 <__call_exitprocs+0x154>
   15914:	80000015 	stw	zero,0(r16)
   15918:	183fde26 	beq	r3,zero,15894 <__call_exitprocs+0x84>
   1591c:	95c8983a 	sll	r4,r18,r23
   15920:	a0806217 	ldw	r2,392(r20)
   15924:	a5800117 	ldw	r22,4(r20)
   15928:	2084703a 	and	r2,r4,r2
   1592c:	10000b26 	beq	r2,zero,1595c <__call_exitprocs+0x14c>
   15930:	a0806317 	ldw	r2,396(r20)
   15934:	2088703a 	and	r4,r4,r2
   15938:	20000c1e 	bne	r4,zero,1596c <__call_exitprocs+0x15c>
   1593c:	89400017 	ldw	r5,0(r17)
   15940:	d9000017 	ldw	r4,0(sp)
   15944:	183ee83a 	callr	r3
   15948:	a0800117 	ldw	r2,4(r20)
   1594c:	15bfbf1e 	bne	r2,r22,1584c <__call_exitprocs+0x3c>
   15950:	98800017 	ldw	r2,0(r19)
   15954:	153fcf26 	beq	r2,r20,15894 <__call_exitprocs+0x84>
   15958:	003fbc06 	br	1584c <__call_exitprocs+0x3c>
   1595c:	183ee83a 	callr	r3
   15960:	003ff906 	br	15948 <__call_exitprocs+0x138>
   15964:	a5c00115 	stw	r23,4(r20)
   15968:	003feb06 	br	15918 <__call_exitprocs+0x108>
   1596c:	89000017 	ldw	r4,0(r17)
   15970:	183ee83a 	callr	r3
   15974:	003ff406 	br	15948 <__call_exitprocs+0x138>
   15978:	a0800017 	ldw	r2,0(r20)
   1597c:	a027883a 	mov	r19,r20
   15980:	1029883a 	mov	r20,r2
   15984:	003fb606 	br	15860 <__call_exitprocs+0x50>
   15988:	0005883a 	mov	r2,zero
   1598c:	003ffb06 	br	1597c <__call_exitprocs+0x16c>

00015990 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   15990:	defffd04 	addi	sp,sp,-12
   15994:	df000215 	stw	fp,8(sp)
   15998:	df000204 	addi	fp,sp,8
   1599c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   159a0:	0001883a 	nop
   159a4:	e0bfff17 	ldw	r2,-4(fp)
   159a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   159ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   159b0:	10000226 	beq	r2,zero,159bc <_exit+0x2c>
    ALT_SIM_FAIL();
   159b4:	002af070 	cmpltui	zero,zero,43969
   159b8:	00000106 	br	159c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   159bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   159c0:	003fff06 	br	159c0 <_exit+0x30>
